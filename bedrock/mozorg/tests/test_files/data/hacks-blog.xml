<?xml version="1.0" encoding="UTF-8"?><feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en-US"
  xml:base="https://hacks.mozilla.org/wp-atom.php"
   >
	<title type="text">Mozilla Hacks &#8211; the Web developer blog</title>
	<subtitle type="text">hacks.mozilla.org</subtitle>

	<updated>2016-09-20T21:06:30Z</updated>

	<link rel="alternate" type="text/html" href="https://hacks.mozilla.org" />
	<id>https://hacks.mozilla.org/feed/atom/</id>
	<link rel="self" type="application/atom+xml" href="https://hacks.mozilla.org/feed/atom/" />

	<generator uri="https://wordpress.org/" version="4.6.1">WordPress</generator>
	<entry>
		<author>
			<name>mitaylor</name>
						<uri>https://miketaylr.com</uri>
					</author>
		<title type="html"><![CDATA[Firefox 49 fixes sites designed with WebKit in mind, and more]]></title>
		<link rel="alternate" type="text/html" href="https://hacks.mozilla.org/2016/09/firefox-49-fixes-sites-designed-with-webkit-in-mind-and-more/" />
		<id>https://hacks.mozilla.org/?p=30221</id>
		<updated>2016-09-20T21:06:30Z</updated>
		<published>2016-09-20T16:22:30Z</published>
		<category scheme="https://hacks.mozilla.org" term="CSS" /><category scheme="https://hacks.mozilla.org" term="Firefox" />		<summary type="html"><![CDATA[Several recent articles on the Hacks blog explain why web developers should care about cross-browser compatibility and how great web developers achieve it. Web developers have a critical role in making the web work for everyone. And so do browser makers. As of today we’re introducing a number of compatibility features to the Gecko rendering [&#8230;] <a class="go" href="https://hacks.mozilla.org/2016/09/firefox-49-fixes-sites-designed-with-webkit-in-mind-and-more/">Continue reading</a>]]></summary>
		<content type="html" xml:base="https://hacks.mozilla.org/2016/09/firefox-49-fixes-sites-designed-with-webkit-in-mind-and-more/"><![CDATA[<p>Several recent articles on the Hacks blog explain <a href="https://hacks.mozilla.org/2016/07/make-the-web-work-for-everyone/">why web developers should care about cross-browser compatibility</a> and <a href="https://hacks.mozilla.org/category/a-web-for-everyone-interviews/">how great web developers achieve it</a>. Web developers have a critical role in making the web work for everyone. And so do browser makers. As of today we’re introducing a number of <a href="https://developer.mozilla.org/en-US/Firefox/Releases/49#Compatibility">compatibility</a> features to the Gecko rendering engine, bringing us up to date with the <a href="https://compat.spec.whatwg.org/">WHATWG Compatibility Standard</a>.</p>
<p>Some notable changes in this release include support for several <code>-webkit-</code> prefixes and WebKit-specific interfaces. These platform features are non-standard, vendor-specific, and quite prevalent.</p>
<p>Non-standard, incompatible CSS breaks websites for user agents designed around standards. When a browser that doesn&#8217;t support <code>-webkit-</code> prefixes (such as Firefox 48 and below) visits one of these sites, the web looks broken. This will be the case until those sites update their CSS. That&#8217;s why Firefox 49 includes the following changes to accommodate WebKit-specific content:</p>
<ul>
<li><a href="https://developer.apple.com/library/iad/documentation/AudioVideo/Reference/WebKitCSSMatrixClassReference/index.html"><code>WebKitCSSMatrix()</code></a> interface support</li>
<li><code>-webkit-gradient()</code> support</li>
<li><code>-webkit-</code> prefix property mappings to their standard equivalents.</li>
<li>Mappings from some <code>-webkit-</code>prefixed (old) flexbox props to <code>-moz-</code>prefixed flexbox props.</li>
<li>Support for the following CSS properties that don’t yet have an unprefixed equivalent:</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-text-fill-color"><code>-webkit-text-fill-color</code></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-text-stroke-color"><code>-webkit-text-stroke-color</code></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-text-stroke-width"><code>-webkit-text-stroke-width</code></a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/-webkit-text-stroke"><code>-webkit-text-stroke</code></a></li>
</ul>
<p>(in)Frequently Asked Questions (iFAQ):</p>
<p><strong>Q.</strong> So, what does this mean for me?</p>
<p><strong>A.</strong> As a user, improved compatibility with sites that were designed for WebKit browsers only, especially on mobile.<br />
<img src="https://hacks.mozilla.org/files/2016/09/okcupid.png" alt="okcupid" /></p>
<p>As a developer, you might want to go back and add unprefixed equivalents to your <code>-webkit-</code>only CSS so we can remove these from the web platform one day in the future (theoretically). Pro Tip: Unprefixed properties always come last.</p>
<p><strong>Q.</strong> Did you just break my site?</p>
<p><strong>A.</strong> We hope not! But you can toggle this for testing with the following preference:</p>
<p><code>about:config?filter=layout.css.prefixes.webkit</code></p>
<p>If there’s a difference (for the worse!), please report bugs to <a href="https://bugzilla.mozilla.org">bugzilla.mozilla.org</a> and cc <a href="mailto:mitaylor@mozilla.com">mitaylor@mozilla.com</a>, or report them on <a href="https://webcompat.com">webcompat.com</a>.</p>
<p><strong>Q.</strong> Should I only use -webkit- prefixes from now on?</p>
<p><strong>A.</strong> No, that’s unnecessary and inadvisable. Keep using web standards and keep testing in multiple browsers. If you must use -webkit- prefixes (and there are fewer reasons to do so than ever before), make sure they’re above the unprefixed property in your CSS.</p>
<p><em>Full disclosure: Mike edits the Compatibility Standard, but there’s <a href="https://github.com/whatwg/compat/issues/">work to be done if you’d like to contribute</a>!</em></p>
]]></content>
			<link rel="replies" type="text/html" href="https://hacks.mozilla.org/2016/09/firefox-49-fixes-sites-designed-with-webkit-in-mind-and-more/#comments" thr:count="14"/>
		<link rel="replies" type="application/atom+xml" href="https://hacks.mozilla.org/2016/09/firefox-49-fixes-sites-designed-with-webkit-in-mind-and-more/feed/atom/" thr:count="14"/>
		<thr:total>14</thr:total>
		</entry>
		<entry>
		<author>
			<name>Justin Crawford</name>
						<uri>http://hoosteeno.com</uri>
					</author>
		<title type="html"><![CDATA[A Web for Everyone: Interviews with Web Practitioners — David Walsh]]></title>
		<link rel="alternate" type="text/html" href="https://hacks.mozilla.org/2016/09/a-web-for-everyone-interviews-with-web-practitioners-david-walsh/" />
		<id>https://hacks.mozilla.org/?p=30215</id>
		<updated>2016-09-19T15:22:44Z</updated>
		<published>2016-09-19T15:22:44Z</published>
		<category scheme="https://hacks.mozilla.org" term="A Web for Everyone: Interviews" /><category scheme="https://hacks.mozilla.org" term="People of HTML5" /><category scheme="https://hacks.mozilla.org" term="Web Developers" />		<summary type="html"><![CDATA[We&#8217;ve heard now from Rachel Andrew, Chris Coyier, and Belén Albeza. Each of these great web developers offered ideas for accomplishing cross-browser compatibility. The fourth interviewee in our web-compatibility interview series brings some new tools to the table. David Walsh (@davidwalshblog) taught himself HTML, CSS and JavaScript at a young age, and soon turned those skills [&#8230;]]]></summary>
		<content type="html" xml:base="https://hacks.mozilla.org/2016/09/a-web-for-everyone-interviews-with-web-practitioners-david-walsh/"><![CDATA[<p>We&#8217;ve heard now from <a href="https://hacks.mozilla.org/2016/08/a-web-for-everyone-interviews-with-web-practitioners-rachel-andrew/">Rachel Andrew</a>, <a href="https://hacks.mozilla.org/2016/09/a-web-for-everyone-interviews-with-web-practitioners-chris-coyier/">Chris Coyier</a>, and <a href="https://hacks.mozilla.org/2016/09/a-web-for-everyone-interviews-with-web-practitioners-belen-albeza/">Belén Albeza</a>. Each of these great web developers offered ideas for accomplishing cross-browser compatibility. The fourth interviewee in our web-compatibility interview series brings some new tools to the table.</p>
<p>David Walsh (<a href="https://twitter.com/davidwalshblog" target="_blank">@davidwalshblog</a>) taught himself HTML, CSS and JavaScript at a young age, and soon turned those skills into a vocation. He started blogging about front-end development after landing his first job in the field. Now, a decade later, <a href="https://davidwalsh.name" target="_blank">David&#8217;s blog </a>is daily reading for tens of thousands of web developers who go there for tips, tutorials, and reflections about the life of a developer. David has spoken at JavaScript conferences around the world including LondonAJAX and BrazilJS. He works as a front-end developer and evangelist at Mozilla.</p>
<hr class="dino" />
<p><img src="https://davidwalsh.name/demo/aboutPhoto.jpg" alt="David Walsh" /></p>
<p><strong>David, what does cross-browser compatibility mean to you?</strong></p>
<p>Cross-browser compatibility means functionality and design working across not only different desktop browsers but also browser apps on different mobile devices, sometimes extending to gaming machines like the Xbox One.</p>
<p><strong>How often do you have to think about cross-browser compatibility? Have you found ways to work that allow you to reduce the amount of time you think about it compared to when you were less experienced?</strong></p>
<p>Working with some bleeding edge APIs at Mozilla, including <a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/Using_Service_Workers" target="_blank">Service Workers</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebVR_API" target="_blank">WebVR</a>, and <a href="https://aframe.io/" target="_blank">A-Frame</a>, cross-browser compatibility is something I have to think of often.</p>
<blockquote class="pullquote"><p>Cross-browser compatibility changes meaning but has always been present.</p></blockquote>
<p>Earlier in my career I would also think of cross-browser compatibility but it was a different environment: IE6 had stalled, <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent" target="_blank">user-agent checking</a> was commonplace, and both WebKit/Safari and Firefox were implementing features with <a href="https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix" target="_blank">their own prefixes</a>, making using new features difficult.</p>
<p>Cross-browser compatibility changes meaning but has always been present.</p>
<p><strong>What motivates you to make the extra effort to build a cross-browser compatible site?</strong></p>
<p>Mozilla properties are visited by millions of users on different browsers, devices, and variant versions of each, meaning that cross-browser compatibility is a must. Also the idea that everyone deserves the same experience if possible.</p>
<blockquote class="pullquote"><p>Everyone deserves the same experience if possible.</p></blockquote>
<p><strong>Could anything convince you not to make that effort? What?</strong></p>
<p>I suspect that some developers and/or organizations may see cross-browser compatibility as a bloat in time and cost. Luckily, the browsers have come together on the importance of standards and are roughly on the same timeline with features, so unless you’re using bleeding edge capabilities, cross-browser compatibility isn’t as difficult as it used to be.</p>
<p><strong>Have you ever had to convince a client or boss that building a cross-browser compatible site was important? How’d you do it?</strong></p>
<p>Absolutely, especially in the days that I worked at a small agency.  Cross-browser compatibility was seen as a time-consuming task, one that the analytics didn’t justify. I made the case that cross-browser compatibility would “future-proof” sites in case new browsers came along, and I was right: Chrome debuted with a WebKit engine, quickly took hold. Mac users (Safari) were no longer the only users of the WebKit engine and set of style/feature differences.</p>
<p><strong>Did you ever have a specific experience that caused you to take cross-browser compatibility more seriously with your next project?</strong></p>
<p>Yes — the growth of Chrome! Chrome not only used WebKit but then moved to its own engine and started implementing features on its own timeline.  This all seemed to happen fairly quickly and it was very eye-opening to me to see!</p>
<p><strong>You’ve blogged a lot about tools &#8212; for example, just this summer you talked about </strong><strong><a href="http://slimerjs.org/" target="_blank">Slimer.js</a>, <a href="http://phantomjs.org/" target="_blank">Phantom.js</a>, and <a href="http://bbc-news.github.io/wraith/" target="_blank">Wraith</a>, among many others. Which tools (or techniques) would be at the top of your list for coding compatible sites or testing for compatibility?</strong></p>
<p>Selenium testing is a great place to start, regardless of which abstraction you use on top of it.  I really liked <a href="http://slimerjs.org/" target="_blank">Slimer.js</a>, <a href="http://phantomjs.org/" target="_blank">Phantom.js</a>, and <a href="http://bbc-news.github.io/wraith/" target="_blank">Wraith</a>, as you&#8217;ve mentioned. The truth is new tools are popping up all the time!</p>
<p><strong>What would you tell a brand new developer graduating from a coding bootcamp about cross-browser compatibility?</strong></p>
<p>I would tell them they’re incredibly lucky to have missed the early days of browsers doing their own thing!  They should start with the mindset that cross-browser compatibility (outside of bleeding edge features) is a must, and that if they start with that attitude, they’d always have it.</p>
<hr class="dino" />
<p><strong>Tips from David&#8217;s interview</strong></p>
<ul>
<li>Don&#8217;t overestimate the difficulty of making a site compatible across browsers. Cross-browser compatibility isn&#8217;t as hard as it used to be.</li>
<li>Try automating parts of your browser testing using command-line tools like <a href="http://slimerjs.org/" target="_blank">Slimer.js</a>, <a href="http://phantomjs.org/" target="_blank">Phantom.js</a>, and <a href="http://bbc-news.github.io/wraith/" target="_blank">Wraith</a>.</li>
<li>Functional testing with <a href="http://docs.seleniumhq.org/" target="_blank">Selenium</a> &#8212; using multiple browsers, of course &#8212; can make it easier to discover browser-breaking bugs in new code.</li>
</ul>
]]></content>
			<link rel="replies" type="text/html" href="https://hacks.mozilla.org/2016/09/a-web-for-everyone-interviews-with-web-practitioners-david-walsh/#comments" thr:count="0"/>
		<link rel="replies" type="application/atom+xml" href="https://hacks.mozilla.org/2016/09/a-web-for-everyone-interviews-with-web-practitioners-david-walsh/feed/atom/" thr:count="0"/>
		<thr:total>0</thr:total>
		</entry>
		<entry>
		<author>
			<name>Bryan Clark</name>
					</author>
		<title type="html"><![CDATA[Introducing debugger.html]]></title>
		<link rel="alternate" type="text/html" href="https://hacks.mozilla.org/2016/09/introducing-debugger-html/" />
		<id>https://hacks.mozilla.org/?p=30203</id>
		<updated>2016-09-14T15:57:08Z</updated>
		<published>2016-09-14T15:57:08Z</published>
		<category scheme="https://hacks.mozilla.org" term="Debugging" /><category scheme="https://hacks.mozilla.org" term="Developer Tools" /><category scheme="https://hacks.mozilla.org" term="Featured Article" /><category scheme="https://hacks.mozilla.org" term="Firefox" /><category scheme="https://hacks.mozilla.org" term="JavaScript" />		<summary type="html"><![CDATA[debugger.html is a modern JavaScript debugger from Mozilla, built as a web application with React and Redux. This project was started early this year in an effort to replace the current debugger within the Firefox Developer Tools. Also, we wanted to make a debugger capable of debugging multiple targets and functioning in a standalone mode. [&#8230;]]]></summary>
		<content type="html" xml:base="https://hacks.mozilla.org/2016/09/introducing-debugger-html/"><![CDATA[<p><em>debugger.html</em> is a modern JavaScript debugger from Mozilla, built as a<br />
web application with <a href="https://facebook.github.io/react/" target="_blank">React</a> and <a href="http://redux.js.org/" target="_blank">Redux</a>. This project was started early<br />
this year in an effort to replace the current debugger within the <a href="https://developer.mozilla.org/en/docs/Tools" target="_blank">Firefox Developer Tools</a>. Also, we wanted to make a debugger capable of debugging multiple targets and functioning in a standalone mode.</p>
<p><img src="https://hacks.mozilla.org/files/2016/09/colla.png" alt="collage of debugger targets" /></p>
<p>Currently, debugger.html can connect to and debug Firefox, and also connects experimentally to Chrome and Node. The debugger connects to Firefox using the Mozilla’s <a href="https://wiki.mozilla.org/Remote_Debugging_Protocol">Remote Debug Protocol</a> (RDP) and communicates with Node and Chrome using <a href="https://developer.chrome.com/devtools/docs/debugger-protocol">Chrome’s RDP</a>.</p>
<p>The debugger.html project is hosted on <a href="https://github.com/devtools-html/debugger.html">GitHub</a> and uses modern frameworks and toolchains, making it readily available and attractive to a wide audience of developers.</p>
<h1>debugger.html</h1>
<p>The user interface is separated into three main regions: the sources panel, the editor panel and the right sidebar.</p>
<ul>
<li>The <em>sources panel</em> displays a tree view of all the current sources for the<br />
application currently being debugged.</li>
<li>The <em>editor panel</em> is used to display various source files from the project and provides functionality for setting breakpoints and prettifying the source.</li>
<li>The <em>right sidebar</em> displays the current set of breakpoints, the current call stack, and scoped variables, when the debugger is paused.
<ul>
<li>The debugger supports controls for pausing, step over, step in, step out and play functions for debugging your JavaScript.</li>
<li>The <em>call stack panel</em> displays the call stack frames for a given pause condition and the <em>scopes panel</em> displays an expandable variable tree based on the selected frame.</li>
</ul>
</li>
</ul>
<p><img src="https://hacks.mozilla.org/files/2016/09/debug.gif" alt="debug demonstration Gif" /></p>
<h1>Getting Started</h1>
<p>To get started using the debugger you can check out the code from Github<br />
and look through the <a href="https://github.com/devtools-html/debugger.html/blob/master/CONTRIBUTING.md#getting-started">Getting Started</a> guide.</p>
<p>If you just want to dive straight in, run the following commands:</p>
<div>
<pre><code class="language-javascript">npm install - Install dependencies
npm start - Start development web server
open http://localhost:8000 - Open in any modern browser</code></pre>
</div>
<p>Once you have opened the debugger in a browser on port 8000, the main<br />
debugger page will be displayed, listing any debuggable targets that you can select. In order for the debugger to connect and debug a target it must be running with remote debugging turned on. This generally requires that you start the target with a couple of flags set. For example, you can start a Firefox instance on MacOS to enable remote debugging with the following command:</p>
<div>
<pre><code class="language-javascript">$ /Applications/Firefox.app/Contents/MacOS/firefox-bin
--start-debugger-server 6080 -P development</code></pre>
</div>
<p>Other options for Chrome and Firefox are listed <a href="https://github.com/devtools-html/debugger.html/blob/master/docs/remotely-debuggable-browsers.md#">here</a>.</p>
<p>Debugging Node requires that you have <a href="https://nodejs.org/en/blog/release/v6.3.0/" target="_blank">version v6.3.0</a> or higher installed. You will need to run Node with the inspect flag set. For example if you want to debug <code>myserver.js</code> you will need to use a command similar to the following.</p>
<div>
<pre><code>$ node --inspect myserver.js</code></pre>
</div>
<p>More information is available in the <a href="https://github.com/devtools-html/debugger.html/blob/master/CONTRIBUTING.md#getting-started">Getting Started</a> guide</p>
<h1>Firefox Developer Tools</h1>
<p>We are integrating this debugger into our <a href="https://developer.mozilla.org/en-US/docs/Tools">Developer Tools</a> for Firefox. The first iteration has just landed in <a href="https://nightly.mozilla.org/" target="_blank">Nightly</a> and you can try it out there.</p>
<p><img src="https://hacks.mozilla.org/files/2016/09/jsfiddle.png" alt="example debugging jsfiddle" /></p>
<h1>Getting Involved</h1>
<p>As mentioned above, this project is still in development and we&#8217;d be grateful for your help in making the best debugger possible. If you are interested in joining us in this effort, please take a look the <a href="https://github.com/devtools-html/debugger.html/blob/master/CONTRIBUTING.md">Contributing</a> guide.</p>
]]></content>
			<link rel="replies" type="text/html" href="https://hacks.mozilla.org/2016/09/introducing-debugger-html/#comments" thr:count="7"/>
		<link rel="replies" type="application/atom+xml" href="https://hacks.mozilla.org/2016/09/introducing-debugger-html/feed/atom/" thr:count="7"/>
		<thr:total>7</thr:total>
		</entry>
		<entry>
		<author>
			<name>Dietrich Ayala</name>
						<uri>http://metafluff.com</uri>
					</author>
		<title type="html"><![CDATA[Vaulting Out of Walled Gardens with Fancy Links]]></title>
		<link rel="alternate" type="text/html" href="https://hacks.mozilla.org/2016/09/vaulting-out-of-walled-gardens-with-fancy-links/" />
		<id>https://hacks.mozilla.org/?p=30198</id>
		<updated>2016-09-12T15:58:42Z</updated>
		<published>2016-09-12T15:58:42Z</published>
		<category scheme="https://hacks.mozilla.org" term="Presentation" /><category scheme="https://hacks.mozilla.org" term="Web Developers" /><category scheme="https://hacks.mozilla.org" term="bestpractices" /><category scheme="https://hacks.mozilla.org" term="development" /><category scheme="https://hacks.mozilla.org" term="tool" />		<summary type="html"><![CDATA[Have you ever noticed that in Twitter, Facebook, Google and Pinterest some links are displayed quite fancily, with preview images, descriptive text summaries and other information? These links are fancy because of metadata in the source code of the web page itself, implemented specifically for the rich display of links inside each of these companies&#8217; [&#8230;]]]></summary>
		<content type="html" xml:base="https://hacks.mozilla.org/2016/09/vaulting-out-of-walled-gardens-with-fancy-links/"><![CDATA[<div>
Have you ever noticed that in Twitter, Facebook, Google and Pinterest some links are displayed quite fancily, with preview images, descriptive text summaries and other information?
</div>
<div><a href="http://metafluff.com/" target="_blank"><img class="aligncenter size-large wp-image-30199" src="https://hacks.mozilla.org/files/2016/09/Screen-Shot-2016-09-09-at-11.52.16-AM-500x356.png" alt="screen-shot-2016-09-09-at-11-52-16-am" width="500" height="356" srcset="https://hacks.mozilla.org/files/2016/09/Screen-Shot-2016-09-09-at-11.52.16-AM-500x356.png 500w, https://hacks.mozilla.org/files/2016/09/Screen-Shot-2016-09-09-at-11.52.16-AM-250x178.png 250w, https://hacks.mozilla.org/files/2016/09/Screen-Shot-2016-09-09-at-11.52.16-AM-768x546.png 768w, https://hacks.mozilla.org/files/2016/09/Screen-Shot-2016-09-09-at-11.52.16-AM.png 894w" sizes="(max-width: 500px) 100vw, 500px" /></a></div>
<div>
These links are <em>fancy</em> because of metadata in the source code of the web page itself, implemented specifically for the rich display of links inside each of these companies&#8217; content platforms.
</div>
<p></p>
<div>
Unfortunately for developers, each of these internet industry titans has implemented their own metadata formats for this: Twitter has <a href="https://dev.twitter.com/cards/overview" target="_blank">Cards</a>, Facebook and Pinterest use <a href="http://ogp.me/" target="_blank">Open Graph</a> metadata and Google uses <a href="http://schema.org/" target="_blank">Schema.org</a> markup.
</div>
<p></p>
<div>
Thus creating a <strong>&lt;header&gt; soup of doom</strong> for each and every individual developer who dares to tread this path:
</div>
<div>
<img class="aligncenter size-large wp-image-30202" src="https://hacks.mozilla.org/files/2016/09/Screen-Shot-2016-09-09-at-12.30.58-PM-500x254.png" alt="screen-shot-2016-09-09-at-12-30-58-pm" width="500" height="254" srcset="https://hacks.mozilla.org/files/2016/09/Screen-Shot-2016-09-09-at-12.30.58-PM-500x254.png 500w, https://hacks.mozilla.org/files/2016/09/Screen-Shot-2016-09-09-at-12.30.58-PM-250x127.png 250w, https://hacks.mozilla.org/files/2016/09/Screen-Shot-2016-09-09-at-12.30.58-PM-768x389.png 768w" sizes="(max-width: 500px) 100vw, 500px" />
</div>
<div>
Well that looks like a <strong>mess</strong>. And it&#8217;s different for each website. However, it’s worth doing for two reasons:
</div>
<p></p>
<div>The first reason is that fancy links increase click-through rates, <strong>increasing engagement and driving traffic</strong> to your website. This is good for your blog, your business, or whatever reason you’re sharing the link in the first place.</div>
<p></p>
<div>The second reason is that high click-through rates in walled gardens mean people are <strong>escaping</strong> those walled gardens, spending time on the Wild Wild Web.</div>
<p></p>
<div>So, to make it easier to do this, I created <a href="https://autonome.github.io/silobuster/"><strong>Silo Buster</strong></a>.</div>
<div><img class="aligncenter size-large wp-image-30201" src="https://hacks.mozilla.org/files/2016/09/Screen-Shot-2016-09-09-at-12.30.00-PM-500x359.png" alt="screen-shot-2016-09-09-at-12-30-00-pm" width="500" height="359" srcset="https://hacks.mozilla.org/files/2016/09/Screen-Shot-2016-09-09-at-12.30.00-PM-500x359.png 500w, https://hacks.mozilla.org/files/2016/09/Screen-Shot-2016-09-09-at-12.30.00-PM-250x180.png 250w, https://hacks.mozilla.org/files/2016/09/Screen-Shot-2016-09-09-at-12.30.00-PM-768x552.png 768w" sizes="(max-width: 500px) 100vw, 500px" /></div>
<div>Silo Buster is an easy-to-use website where you enter a small amount of information, and all that &lt;header&gt; goop is generated for you. You can then copy and paste it into your web pages or integrate it into your template or content management system.</div>
<p></p>
<div>Take <a href="https://autonome.github.io/silobuster/">Silo Buster</a> for a spin, and then check your analytics and see if there’s any change. Experiment with it: Tweak the photos, or the summary text and check again.</div>
<p></p>
<div>If you’d like to learn more about how these sites implement their metadata, and how to debug your rich links, check out the links at the bottom of Silo Buster.</div>
<p></p>
<div>If you&#8217;ve got other tips and tricks for fancy links, or experiences either good or bad with them, share your thoughts in the comments!</div>
]]></content>
			<link rel="replies" type="text/html" href="https://hacks.mozilla.org/2016/09/vaulting-out-of-walled-gardens-with-fancy-links/#comments" thr:count="7"/>
		<link rel="replies" type="application/atom+xml" href="https://hacks.mozilla.org/2016/09/vaulting-out-of-walled-gardens-with-fancy-links/feed/atom/" thr:count="7"/>
		<thr:total>7</thr:total>
		</entry>
		<entry>
		<author>
			<name>Justin Crawford</name>
						<uri>http://hoosteeno.com</uri>
					</author>
		<title type="html"><![CDATA[A Web for Everyone: Interviews with Web Practitioners — Belén Albeza]]></title>
		<link rel="alternate" type="text/html" href="https://hacks.mozilla.org/2016/09/a-web-for-everyone-interviews-with-web-practitioners-belen-albeza/" />
		<id>https://hacks.mozilla.org/?p=30191</id>
		<updated>2016-09-11T18:16:30Z</updated>
		<published>2016-09-08T16:03:23Z</published>
		<category scheme="https://hacks.mozilla.org" term="A Web for Everyone: Interviews" /><category scheme="https://hacks.mozilla.org" term="Featured Article" /><category scheme="https://hacks.mozilla.org" term="People of HTML5" /><category scheme="https://hacks.mozilla.org" term="Web Developers" />		<summary type="html"><![CDATA[For the third interview in our cross-browser compatibility series we talk with Belén Albeza (@ladybenko). Belén is an engineer and a game developer who works on developer relations at Mozilla. She is the author of several books about web development, including &#8220;Power-up Your Front-End Development with Grunt&#8221; and &#8220;XHTML + CSS ¡de una maldita vez!&#8221; [&#8230;]]]></summary>
		<content type="html" xml:base="https://hacks.mozilla.org/2016/09/a-web-for-everyone-interviews-with-web-practitioners-belen-albeza/"><![CDATA[<p>For the third interview in our cross-browser compatibility series we talk with Belén Albeza (<a href="https://twitter.com/ladybenko" target="_blank">@ladybenko</a>). Belén is an engineer and a game developer who works on developer relations at Mozilla. She is the author of several books about web development, including &#8220;<a href="https://leanpub.com/grunt" target="_blank">Power-up Your Front-End Development with Grunt</a>&#8221; and &#8220;<a href="http://cafeina.ladybenko.net/xhtml.pdf" target="_blank">XHTML + CSS ¡de una maldita vez!</a>&#8221; She is a frequent speaker at conferences on topics such as game development, Web APIs and more. Next week she&#8217;ll speak at <a href="https://viewsourceconf.org/berlin-2016/schedule/#css-framework" target="_blank">View Source 2016 in Berlin</a>! She also <a href="https://hacks.mozilla.org/author/balbezamozilla-com/">contributes often to Mozilla Hacks</a>.</p>
<p>We&#8217;ve heard from two great web developers so far about how (and why) they integrate web compatibility into their workflows. Two weeks ago, Rachel Andrew said, <a href="https://hacks.mozilla.org/2016/08/a-web-for-everyone-interviews-with-web-practitioners-rachel-andrew/">&#8220;I&#8217;ve always worked from the assumption that the web is for everyone.&#8221;</a> Last week, Chris Coyier said he is motivated to make cross-browser compatible sites by a simple economic reality: <a href="https://hacks.mozilla.org/2016/09/a-web-for-everyone-interviews-with-web-practitioners-chris-coyier/">&#8220;People pay for websites that work for them.&#8221;</a></p>
<p>What motivates Belén to make the web work for everyone? Read on to find out.</p>
<hr class="dino" />
<p><img class="aligncenter size-full wp-image-30192" src="https://hacks.mozilla.org/files/2016/09/belenalbeza.jpg" alt="Belén Albeza" width="400" height="400" srcset="https://hacks.mozilla.org/files/2016/09/belenalbeza.jpg 400w, https://hacks.mozilla.org/files/2016/09/belenalbeza-250x250.jpg 250w, https://hacks.mozilla.org/files/2016/09/belenalbeza-32x32.jpg 32w, https://hacks.mozilla.org/files/2016/09/belenalbeza-50x50.jpg 50w, https://hacks.mozilla.org/files/2016/09/belenalbeza-64x64.jpg 64w, https://hacks.mozilla.org/files/2016/09/belenalbeza-96x96.jpg 96w, https://hacks.mozilla.org/files/2016/09/belenalbeza-128x128.jpg 128w" sizes="(max-width: 400px) 100vw, 400px" /></p>
<p><strong>Belén, what does cross-browser compatibility mean to you?</strong></p>
<p>It means having a website or a web app that is <em>functional</em> – not necessarily <em>identical</em> – across different browsers.</p>
<p><strong> How often do you have to think about cross-browser compatibility? Have you found ways to work that allow you to reduce the amount of time you think about it compared to when you were less experienced?</strong></p>
<p>You always have to think about that. It is hard, however, since it&#8217;s natural to do 90% of the development under the same system. The only shortcut to this is to use web standards, so you know that your code will have a good chance of working in other browsers and systems, but you still never know for sure until someone tries it in a real browser, on a real device.</p>
<blockquote class="pullquote"><p>The only shortcut is to use web standards, so you know that your code will have a good chance of working in other browsers.</p></blockquote>
<p><strong> What motivates you to make the extra effort to build a cross-browser compatible site?</strong></p>
<p>From my point of view, cross-browser compatibility is not a nice bonus to have: it is a <em>must</em>. You just cannot afford to have your product not work in one of the major browsers (or OSes). So I don&#8217;t see it as &#8220;extra effort&#8221;, I see it as &#8220;mandatory effort&#8221;.</p>
<p><strong>Could anything convince you not to make that effort? What?</strong></p>
<p>Cross-browser compatibility is not a binary switch in which you either have it or not – it is a spectrum. I consider it mandatory to have the product work under major browsers (Chrome, Firefox, Edge, Safari, Android Browser) and in major OSes (Windows, Mac, iOS, Android). Beyond that, unless it is a client requirement – like legacy support for older systems/browsers – I think that making sure that your code complies with Web Standards is a good sanity point. Most of the time you don&#8217;t have the resources to test in every browser, on every system, on every device.</p>
<p>There is also the issue of needing a particular feature that is core to your product, for instance, WebRTC, Websockets, or Web Audio. In this case, you are making a conscious decision or leaving out browsers with no implementation or a partial one.</p>
<p><strong> Have you ever had to convince a client or boss that building a cross-browser compatible site was important? How’d you do it?</strong></p>
<p>My experience so far has been usually the opposite: clients or product owners wanting to support as many browsers and systems as possible! I have had to convince them to ditch support for obsolete browsers so our code base could be more modern and smaller.</p>
<p><strong>Did you ever have a specific experience that caused you to take cross-browser compatibility more seriously with your next project?</strong></p>
<p>In one of my previous jobs we were developing a web app and we used both Firefox and Chrome for development. But these were the regular versions of the browsers. We built a release candidate of our app and patted ourselves on the back… just to find out the next day that the QA team had found a really nasty bug in our web app! How that could be?</p>
<p>Well, it turned out that the day after we submitted the release candidate for QA, a new version of a browser was released, and it fixed a bug that we had a workaround for. And this workaround – which was no longer necessary – was causing a bug! From that day on, we added the nightly builds of <a href="https://www.google.com/chrome/browser/canary.html" target="_blank">Chrome</a> and <a href="http://nightly.mozilla.org/" target="_blank">Firefox</a> to our development stack of tools, so we knew what to expect in the future!</p>
<p><strong> You’re speaking this September at View Source in Berlin. Your session is called, “<a href="https://viewsourceconf.org/berlin-2016/schedule/#css-framework_summary" target="_blank">You might not need a CSS framework.</a>” Do you think frameworks make cross-browser compatibility better or worse? Does any framework stand out as particularly good for compatibility?</strong></p>
<p>I think that framework creators have a huge responsibility with respect to cross-browser compatibility. If a framework only supports a subset of major browsers, and somehow it manages to become extremely popular… the Web would be doomed. My recommendation, in general, is to avoid the use of third-party frameworks except in very specific circumstances (like developing a prototype).</p>
<p><strong>You’ve done quite a bit of work with HTML5 games. What special compatibility challenges do HTML5 game developers face? Do you use a different set of tools for preventing/debugging compatibility issues in HTML5 games?</strong></p>
<p>It is challenging in many ways: performance varies across browsers, across devices… There are also some quirks you need to be aware of: for instance, different browsers support different formats for audio files, some mobile browsers require a user interaction to be able to play sounds, etc. But you have similar issues when creating native games, because not all devices are equal, do not perform the same and have different hardware capabilities!</p>
<p>When working on a commercial game there is usually a QA stage where the game is tested on different devices and OSes – you would &#8220;just&#8221; need to add different browsers as well. Now that I make games on my own, I pick a game framework which is known for good cross-browser compatibility (<a href="http://phaser.io/" target="_blank">Phaser</a>) and test the game on the handful of devices I have at home.</p>
<p><strong>What would you tell a brand new developer graduating from a coding bootcamp about cross-browser compatibility?</strong></p>
<p>This is not an option, it is a must. You cannot afford to lose 50%, 40% or 30% of your potential audience. You have to care! And <a href="http://caniuse.com" target="_blank">caniuse.com</a> works wonders ;)</p>
<blockquote class="pullquote"><p>You cannot afford to lose 50%, 40% or 30% of your potential audience. You have to care!</p></blockquote>
<hr class="dino" />
<p><strong>Tips from Belén&#8217;s interview</strong></p>
<ul>
<li>Cross-browser compatibility does not mean making things look identical in every browser &#8212; it just means making them usable for everyone.</li>
<li>The only shortcut for building a cross-browser compatible website is to stick to standards.</li>
<li>Remember to test your site or application on the nightly versions of browsers, which include features soon to land in release channels.</li>
</ul>
]]></content>
			<link rel="replies" type="text/html" href="https://hacks.mozilla.org/2016/09/a-web-for-everyone-interviews-with-web-practitioners-belen-albeza/#comments" thr:count="0"/>
		<link rel="replies" type="application/atom+xml" href="https://hacks.mozilla.org/2016/09/a-web-for-everyone-interviews-with-web-practitioners-belen-albeza/feed/atom/" thr:count="0"/>
		<thr:total>0</thr:total>
		</entry>
		<entry>
		<author>
			<name>Kannan Vijayan</name>
					</author>
		<title type="html"><![CDATA[FlyWeb &#8211; Pure Web Cross-Device Interaction]]></title>
		<link rel="alternate" type="text/html" href="https://hacks.mozilla.org/2016/09/flyweb-pure-web-cross-device-interaction/" />
		<id>https://hacks.mozilla.org/?p=30180</id>
		<updated>2016-09-07T15:49:12Z</updated>
		<published>2016-09-06T14:42:30Z</published>
		<category scheme="https://hacks.mozilla.org" term="Bleeding edge" /><category scheme="https://hacks.mozilla.org" term="Featured Article" /><category scheme="https://hacks.mozilla.org" term="Mobile" /><category scheme="https://hacks.mozilla.org" term="Web APIs" />		<summary type="html"><![CDATA[FlyWeb is an experimental project we’ve been prototyping from within the depths of Mozilla’s platform division.  It started as a side-project late last year, and since then a small, ad-hoc team has been working on implementing a “version zero” of the concept.  We’ve been tinkering for the last 6 months on an implementation, and it’s [&#8230;]]]></summary>
		<content type="html" xml:base="https://hacks.mozilla.org/2016/09/flyweb-pure-web-cross-device-interaction/"><![CDATA[<p>FlyWeb is an experimental project we’ve been prototyping from within the depths of Mozilla’s platform division.  It started as a side-project late last year, and since then a small, ad-hoc team has been working on implementing a “version zero” of the concept.  We’ve been tinkering for the last 6 months on an implementation, and it’s getting to the point where we feel comfortable talking about it, in particular to web developers and hardware hackers that might be interested in the ideas it proposes.</p>
<p>Fundamentally, we’re aiming for one goal: making it easy for people or devices that are physically close to stream applications and content to each other.  To do that, we want to make it dead simple for someone to stand up a “local area web server”, and for a person with a browser to discover and connect to that local area web server.  What gets built on top of that architecture is up to you and other developers/hackers.</p>
<p>FlyWeb servers can live on a web-page loaded on your computer or smartphone, or they can live on tiny hardware devices on your network.  FlyWeb servers are not designed to be accessible to “the internet”, but instead only to people on the local network (i.e., people already in physical proximity).</p>
<p>  <a href="https://hacks.mozilla.org/files/2016/09/flyweb-architecture-diagrams.jpg"><img class="alignnone wp-image-30188 size-large" src="https://hacks.mozilla.org/files/2016/09/flyweb-architecture-diagrams-500x333.jpg" alt="FlyWeb Architecture Diagrams" width="500" height="333" srcset="https://hacks.mozilla.org/files/2016/09/flyweb-architecture-diagrams-500x333.jpg 500w, https://hacks.mozilla.org/files/2016/09/flyweb-architecture-diagrams-250x167.jpg 250w, https://hacks.mozilla.org/files/2016/09/flyweb-architecture-diagrams-768x512.jpg 768w, https://hacks.mozilla.org/files/2016/09/flyweb-architecture-diagrams.jpg 1440w" sizes="(max-width: 500px) 100vw, 500px" /></a></p>
<p>The design of FlyWeb is simple.  A FlyWeb server is a web server that advertises itself on the local network using <a href="https://en.wikipedia.org/wiki/Multicast_DNS" target="_blank">mDNS</a>.  In <a href="http://nightly.mozilla.org/" target="_blank">Firefox Nightly</a>, we’ve added a small UI element that lets you list locally advertised FlyWeb services (off by default, and only activated if the <code>dom.flyweb.enabled</code> config pref is true).  When you select a service to connect to, the browser creates a unique “UUID hostname” for the service, and routes all URLs with that host to the service.  Additionally, we extend Web APIs with a new <code>navigator.publishServer()</code> function, which allows a web page to publish a FlyWeb server on the local network.  The user will be prompted to allow the web page to do this.</p>
<p>There are two major classes of use cases this design supports.  One class relates to interactions between browsers, and the other concerns interactions between browsers and “smart hardware” that wants to expose a UI to users.  Both are handled with the same architecture.</p>
<h3>Browser To Browser Interactions</h3>
<p>Let’s say you write a multiplayer game designed for smartphones.  I’m not talking about MMORPGs here, but casual games meant to be played by a group in the same room.  Like a digital Catan, Scrabble or poker.  You have a couple of options:</p>
<h4>1. Write a smartphone app</h4>
<p>This solution will work, but you’ll need to publish the app on an app store, and have everybody download the app before playing.  If somebody wants to switch to a different game, they all have to download the other game.  The app will need to use some native communication protocol for manually discovering and connecting the phones to each other.</p>
<h4>2. Write a web-based game</h4>
<p>This is also a reasonable solution, but comes with some problems.  Everybody has to visit the game website, and possibly make an account on the website (or receive some sort of unique token) which they use to coordinate with each other.  Communication between the players has to be bounced through the server the game is hosted on, which means games requiring low-latency input are difficult or impossible.  Furthermore, everybody playing has to be connected to the internet.</p>
<h4>FlyWeb approach</h4>
<p>Both of the above approaches cause significant user friction.  With FlyWeb, you can design the game as a web game, but instead of using the cloud to enable multiplayer, the game itself can host a local multiplayer experience.  Here’s how that would work:</p>
<ol>
<li>One person in the group loads the game website, and asks the game to start a new multiplayer session.</li>
<li>The game calls <code>navigator.publishServer()</code>, a FlyWeb API, to publish a local-area server. <code>publishServer</code> returns a <code>Promise</code> that resolves to a <code>FlyWebPublishedServer</code> object, on which the game binds event handlers for HTTP/WebSocket requests.</li>
<li>The friends all discover the game via their browser, and connect to it directly.</li>
<li>When they connect, the host web page’s <code>FlyWebPublishedServer</code> event handlers are called. The host web page is acting as a web server, and serves a copy of itself to all the connectors (and keeps track of them). The “client” web pages can make a web socket connection back to the host web page if the game needs low-latency communications.</li>
<li>Everybody plays together. As far as the game is concerned, communication between the “host page” and the players’ pages is accomplished using standard web technologies like HTTP fetch requests and WebSockets.</li>
</ol>
<p>No one needs to download apps, no one needs to register accounts, or cross-reference unique codes or anything complicated.  Only the browser hosting the game needs to be connected to the internet to fetch the host &#8220;server&#8221; page (and with new web features like Service Workers, even that doesn&#8217;t require an internet connection). The game can be built on pure web protocols, and everything is low-latency and playable.  Basically, multi-user experiences can be created without ANY supporting infrastructure outside of a local network, and a browser supporting FlyWeb.</p>
<p>As an example, Justin integrated FlyWeb into a Unity WebGL-based car racing demo, inspired by the 4-player split-screen Mario Kart gameplay, and Kannan held a quick gaming session at the Mozilla Toronto office:</p>
<p><iframe width="560" height="315" src="https://www.youtube.com/embed/FJ5DEGvqDb4" frameborder="0" allowfullscreen></iframe></p>
<p>In our example, a laptop browser acts as “the console”, and smartphone FlyWeb clients act as game controllers.  The smartphone browser discovers and connects to the game server hosted on the laptop web page, and receives a “controller UI” web page.  This controller page on the phone establishes a web socket connection back to the host page, and uses that for sending touch and steering input back.</p>
<p>If you have an Android phone and a laptop, you can play this demo today (and download the source code and hack it, if you want).  Just visit <a href="https://flyweb.github.io/" target="_blank">flyweb.github.io</a> and follow the instructions, then visit the &#8220;Showcase&#8221; section of the page for a link to the demo. The game is hosted via GitHub Pages and the source code is available in our <a href="https://github.com/flyweb/examples">GitHub repo</a> under the &#8220;flyweb-gp&#8221; folder.</p>
<p>You can also take a look at the “flyfile” and &#8220;photo-wall&#8221; subfolders in that GitHub repo for much simpler demos of web-based file sharing between smartphones.</p>
<h3>Smart Hardware</h3>
<p>Let’s say you are building a hardware device.  Maybe it’s a fancy new thermostat, or your own home-made quadcopter. Great! Now you need a UI to control it. You have a few options at your disposal:</p>
<h4>1. Write a smartphone app</h4>
<p>This is probably the first thing that’ll come to mind, but it has a few problems.  Writing smartphone apps is hard.  You need to set up a development environment, download an SDK/build tools and all the other stuff for your platform of choice.  You need to write the app, compile it into a bundle and load it on your phone.  If you want other people to be able to use your app easily, you need to publish it on an app store (hoping it gets accepted) and maintain it.  It’s a HUGE hassle.</p>
<p>Additionally, you need to build this app for every different platform you want to target.  Want to access it from your Windows or Mac laptop in addition to your phone?  Write another app.  Not exactly the most convenient developer experience.</p>
<h4>2. Build a web UI served from your device</h4>
<p>This approach is a lot simpler.  You don’t need to build a native app.  The UI works on different platforms.  You don’t need to host an app on an app store.  You don’t need to build an app bundle to distribute for side-loading.  But, accessing the UI is hard.  You have to open up your browser, somehow figure out the device’s IP address, and type it in.</p>
<p>This approach is also error prone.  If you later happen to access some other service with the same private IP, on some other local network (for example, 192.168.1.1:80), that service can steal the cookies stored by the first service.  The services have to be careful about using caching because you might get the cached page for the first service when you visit the second service.</p>
<h4>FlyWeb approach</h4>
<p>FlyWeb’s approach is basically option 2, but with some extra magic.  The first bit of magic is advertising over mDNS, and a browser UI to discover the service by name, instead of having to find out and type in an IP address manually.  The second bit of magic is the unique hostname generation.  Currently, every time you connect to a service, the browser generates a UUID to use as the hostname for that service.  No two UUIDs will ever be shared between services, so we avoid issues like leaking cookies, or cache cross-contamination.</p>
<p>With the help of the amazingly talented <a href="https://www.linkedin.com/in/yglazko" target="_blank">Kate Glazko</a>, we built a demo of this approach with a Parrot AR quadcopter and a Raspberry PI (controlling the copter and exposing a FlyWeb server), and presented it in June 2016 at a Mozilla All-Hands meeting.  Here’s a video of that demo:</p>
<p><iframe width="560" height="315" src="https://www.youtube.com/embed/W1c3Pqrbt3s" frameborder="0" allowfullscreen></iframe></p>
<p>The source code for this demo is also available in our <a href="https://github.com/flyweb/examples">examples repo</a> (under the flyweb-quadcopter folder).  We’ve built other demos on hardware as simple as the ESP8266, which is a $5 WiFi chip with an embedded microcontroller.  FlyWeb servers can run on extremely minimal hardware.  Even tiny, low-power devices can present extremely rich UIs because the web platform lets them dynamically stream their control UIs to a far more powerful smartphone or computer.</p>
<h3>What Next</h3>
<p>Currently, this feature is implemented and exposed ONLY in Firefox Nightly (not in Aurora or Beta), and hidden behind a pref that’s off by default.  The current implementation is basically a “version 0” implementation, which is enough to build some pretty amazing demos and get a taste for the potential of FlyWeb.</p>
<p>The team’s goal right now is to let early-adopter developers and enthusiasts play with this implementation and get feedback on the viability of the feature as a future “true” web standard.  If you’re a web developer looking to create neat multi-user “local area” experiences, or you’re a hardware hacker looking for an easy way to give a UI to your creations, we hope you’ll take a look at this, play with it, and let us know what you think.</p>
<p>If you are excited by the potential of this feature, want to build things with it, or help with the implementation (our team has 2 people in it, we are not some massive project &#8211; this is very much an experimental “skunkworks” project), please visit us at <a href="https://flyweb.github.io" target="_blank">flyweb.github.io</a>. You can also chat with us on Slack at <a href="https://mozflyweb.slack.com" target="_blank">mozflyweb.slack.com</a> (sign up <a href="https://mozflyweb-slack-invite.herokuapp.com/" target="_blank">here</a>) or follow us on Twitter at <a href="https://twitter.com/MozFlyWeb" target="_blank">@MozFlyWeb</a>.</p>
<h3>Caveats</h3>
<p>Please keep in mind that this is a very early-stage implementation.  There are probably bugs and security issues.  If you DO experiment with FlyWeb, we advise <a href="https://developer.mozilla.org/en-US/Firefox/Multiple_profiles">creating a new Firefox profile</a> just for that purpose and recommend that you DO NOT browse the general web using that profile. Use a separate profile only for running FlyWeb demos or your own code.</p>
<p>Happy hacking! :)</p>
]]></content>
			<link rel="replies" type="text/html" href="https://hacks.mozilla.org/2016/09/flyweb-pure-web-cross-device-interaction/#comments" thr:count="26"/>
		<link rel="replies" type="application/atom+xml" href="https://hacks.mozilla.org/2016/09/flyweb-pure-web-cross-device-interaction/feed/atom/" thr:count="26"/>
		<thr:total>26</thr:total>
		</entry>
		<entry>
		<author>
			<name>Justin Crawford</name>
						<uri>http://hoosteeno.com</uri>
					</author>
		<title type="html"><![CDATA[A Web for Everyone: Interviews with Web Practitioners &#8212; Chris Coyier]]></title>
		<link rel="alternate" type="text/html" href="https://hacks.mozilla.org/2016/09/a-web-for-everyone-interviews-with-web-practitioners-chris-coyier/" />
		<id>https://hacks.mozilla.org/?p=30174</id>
		<updated>2016-09-06T17:47:37Z</updated>
		<published>2016-09-01T14:33:16Z</published>
		<category scheme="https://hacks.mozilla.org" term="A Web for Everyone: Interviews" /><category scheme="https://hacks.mozilla.org" term="Interviews" /><category scheme="https://hacks.mozilla.org" term="People of HTML5" /><category scheme="https://hacks.mozilla.org" term="Web Developers" />		<summary type="html"><![CDATA[This is the second in a series of interviews about web compatibility with web practitioners. This week we caught up with Chris Coyier (@chriscoyier), prolific web developer and writer behind CSS-Tricks, Digging Into WordPress, and the ShopTalk Show. Chris is one of the founders of the code-snippet demo site CodePen. He recently published a book [&#8230;]]]></summary>
		<content type="html" xml:base="https://hacks.mozilla.org/2016/09/a-web-for-everyone-interviews-with-web-practitioners-chris-coyier/"><![CDATA[<p>This is the second in a series of interviews about web compatibility with web practitioners. This week we caught up with Chris Coyier (<a href="https://twitter.com/chriscoyier" target="_blank">@chriscoyier</a>), prolific web developer and writer behind <a href="https://css-tricks.com/" target="_blank">CSS-Tricks</a>, <a href="https://digwp.com/" target="_blank">Digging Into WordPress</a>, and the <a href="http://shoptalkshow.com/" target="_blank">ShopTalk Show</a>. Chris is one of the founders of the code-snippet demo site <a href="http://codepen.io/" target="_blank">CodePen</a>. He recently published <a href="https://abookapart.com/products/practical-svg" target="_blank">a book about SVG</a>. And now he’s here to talk about web compatibility.</p>
<p>These interviews follow up on our recent article, “<a href="https://hacks.mozilla.org/make-the-web-work-for-everyone/">Make the Web Work for Everyone</a>,” urging developers to build cross-browser compatible web experiences in order to <a href="https://hacks.mozilla.org/2016/07/make-the-web-work-for-everyone/?utm_source=hacks&amp;utm_medium=article&amp;utm_campaign=compat&amp;utm_content=market_size#other_browser">maximize exposure and market size</a>;<a href="https://hacks.mozilla.org/2016/07/make-the-web-work-for-everyone/?utm_source=hacks&amp;utm_medium=article&amp;utm_campaign=compat&amp;utm_content=drive_users_away#wont_change"> prevent interface bugs</a> that drive users away forever; and <a href="https://hacks.mozilla.org/2016/07/make-the-web-work-for-everyone/?utm_source=hacks&amp;utm_medium=article&amp;utm_campaign=compat&amp;utm_content=professional_mastery#craft">demonstrate professional mastery</a>.</p>
<p>In our first interview, Rachel Andrew said <a href="https://hacks.mozilla.org/2016/08/a-web-for-everyone-interviews-with-web-practitioners-rachel-andrew/" target="_blank">making a website work across browsers is part of doing her job well</a>; she said it can even be “fun and liberating” to use new browser features without breaking the web. Let’s see if Chris Coyier agrees.</p>
<hr class="dino" />
<p>&nbsp;</p>
<p><img class="aligncenter wp-image-30175" src="https://hacks.mozilla.org/files/2016/08/me1-250x165.jpg" alt="Chris Coyier" width="401" height="264" srcset="https://hacks.mozilla.org/files/2016/08/me1-250x165.jpg 250w, https://hacks.mozilla.org/files/2016/08/me1-768x506.jpg 768w, https://hacks.mozilla.org/files/2016/08/me1-500x330.jpg 500w" sizes="(max-width: 401px) 100vw, 401px" /></p>
<p><b>What does cross-browser compatibility mean to you, Chris?</b></p>
<p>I think the term itself is pretty clear: Make stuff work in many different browsers. What those browsers are is certainly different from team to team. Even people whose goal is extreme cross-browser compatibility have limits. Not a lot of people worrying about <a href="https://en.wikipedia.org/wiki/Netscape_Navigator" target="_blank">Netscape Navigator</a> these days.</p>
<p><b>How often do you have to think about cross-browser compatibility?</b></p>
<p>I think about it less and less over time I think, but that&#8217;s not due to my skill in fixing cross browser issues increasing, its more that browsers are more and more consistent all the time. It&#8217;s still pretty easy to waggle fingers at certain inconsistencies, but it would be hard to argue we&#8217;re worse off now than we were a few years ago.</p>
<p>Still, I&#8217;d say in my life of &#8220;actually building stuff&#8221; it&#8217;s at least a weekly occurrence that some cross-browser consideration needs to happen. And because of working on the content on CSS-Tricks, it&#8217;s almost a daily consideration. On a reference site, it&#8217;s poor form to talk about browser features without mentioning support.</p>
<p><b>Last summer, </b><a href="https://css-tricks.com/front-end-development-is-development/" target="_blank"><b>Geoff Graham wrote on CSS Tricks</b></a><b> that, <em>“It’s rather expected of us that we know how to build websites that can work cross-browser.”</em> Do you think employers and the market really demand this knowledge from developers? Do they expect it of junior devs, or is it more of a senior-level skill?</b></p>
<blockquote class="pullquote"><p>Front-end web development is a job. Knowing about, testing for, and fixing cross browser issues is part of that job.</p></blockquote>
<p>Front-end web development is a job. Knowing about, testing for, and fixing cross browser issues is part of that job. I&#8217;m not sure I would expect a junior dev to be super skillful at dealing with cross-browser issues out of the gate, but I would expect them to be open to learning about and dealing with those issues. And at levels beyond junior, it would be a pretty big red flag if a front-end dev could or didn&#8217;t want to deal with cross-browser issues.</p>
<p><b>What motivates you to make the extra effort to build a cross-browser compatible site?</b></p>
<p>Money. People pay for websites that work for them. Here&#8217;s a little example: Just last week we were working on some drag-and-drop functionality in a new part of CodePen. Worked great in Chrome, didn&#8217;t work in either Firefox or Safari. Tim Holman, one of our front-end devs, had to spend a good part of a day implementing different fixes for both. Good thing we did that before launch, otherwise we surely would have turned some potential customers off.</p>
<p>I don&#8217;t feel compelled to fix cross-browser issues because of some holy decree that all experiences be created equal. It comes down to money and customer satisfaction.</p>
<p><b>Could anything convince you not to make that effort? What?</b></p>
<p>If the cost-benefit guess is way off. If I guess that fixing a cross-browser issue will take a month of development and help 0.1% of customers, I can do some scratchpad math and probably come up with a decision not to do it. Thankfully most issues aren&#8217;t that far off.</p>
<p>Even though I do believe &#8220;it&#8217;s part of the job,&#8221; I would also say that it&#8217;s a rare developer that really loves doing that kind of work. I can say for myself, I enjoy the moment of solving the problem and closing the ticket, but the journey there can be demoralizing. I&#8217;d be cautious about doling out too much of that work to any one dev.</p>
<p><b>Have you ever had to convince a client or boss that building a cross-browser compatible site was important? How’d you do it?</b></p>
<p>It&#8217;s usually the other way around. It&#8217;s been me making a site only to send it to a client and have it not work the way I thought it would for them. So it&#8217;s them schooling me on cross-browser compatibility.</p>
<p>If I had to be part of a &#8220;convincing&#8221; session, I&#8217;d probably approach it as pragmatically as I could. Let&#8217;s look at some data and pick a reasonable spread of browsers to support and hit those targets.</p>
<p><b>Can you think of a particularly vexing or interesting compatibility bug you’ve encountered? On what site/product? Did it go live, or did you catch it before it went live? </b></p>
<p>One came up for me a few weeks ago. A person wrote in to me telling me that CSS-Tricks was very hard to scroll. I&#8217;ve never experienced it before and I was having trouble replicating it. I&#8217;m aware that I only have one dev machine and it&#8217;s a pretty souped up MacBook Pro, so I wasn&#8217;t doubting anything, I just couldn&#8217;t replicate it or dig into fixing it.</p>
<p>She sent me videos of the issue, which made it very clear. Chrome was fine. Firefox was fine. It was a special browser she was using called <a href="https://www.palemoon.org/" target="_blank">Pale Moon</a>. It&#8217;s only for Windows and it&#8217;s not available through my normal &#8220;test stuff on Windows&#8221; tool.</p>
<p>In reading about the browser a little, it talks about how one of its features is optimizing resource usage. I&#8217;m sure that&#8217;s a great thing in most cases, but it made me think that if somehow CSS-Tricks was asking for more memory than Pale Moon was willing to give it, that might cause the issue. What is painted up and down the entire page? The background! The background on CSS-Tricks is a combination of CSS gradient and SVG. Not particularly memory-light unfortunately. To test, I had her set a user stylesheet to remove the SVG, and it worked great.</p>
<p>I probably won&#8217;t change the current design just for Pale Moon, but in a redesign, it will probably push me toward doing something simpler for the background.</p>
<p><b>Did you ever have a specific experience that caused you to take cross-browser compatibility more seriously with your next project?</b></p>
<p>I feel like every time I run into a cross browser issue, it pushes me toward doing less and less fancy things. I love experimenting with new stuff, then when it comes to production stuff, my typical thought is, &#8220;what&#8217;s the most basic tried-and-true way we can pull this off?&#8221;</p>
<p><b>Are there parts of your process / toolchain / etc. that make it easy for you to incorporate or test for compatibility that you would recommend every web dev incorporate into their own?</b></p>
<p>Modern browser developer tools have gotten pretty good at simulating different viewports, connection speeds, and emulating mobile headers, but what they support feature-wise is pretty baked in. I know I open up my iOS Simulator a lot to get a &#8220;true look&#8221; at Mobile Safari quite a bit, and the fact that I can use Safari&#8217;s developer tools to poke around in there is great.</p>
<p>I really dig how <a href="https://www.browsersync.io/" target="_blank">BrowserSync</a> allows me to open a dev site on a local network with any other device, so I use that a good bit.</p>
<p>My main cross-browser testing tool though is <a href="https://crossbrowsertesting.com/" target="_blank">CrossBrowserTesting.com</a>. It&#8217;s pretty amazing.</p>
<p><b>What would you tell a brand new developer graduating from a coding bootcamp about cross-browser compatibility?</b></p>
<blockquote class="pullquote"><p>There is a certain amount of empathy required in all things web</p></blockquote>
<p>If your job is front-end development, this stuff is definitely your job. If you roll your eyes at it, it might not be the job for you. There is a certain amount of empathy required in all things web, so if you can&#8217;t extend yours to understand that people use different browsers/platforms/version, this does not bode well.</p>
<hr class="dino" />
<p>&nbsp;</p>
<p><strong>Tips from Chris&#8217;s interview</strong></p>
<ul>
<li>When debugging a compatibility bug, the first step is to completely understand the browser environment it appears in. What OS? What device? What screen size/orientation? What browser? What version?</li>
<li>If in doubt about whether a feature will work for your audience, look for more &#8220;tried and true&#8221; ways to implement the necessary functionality.</li>
<li>Learn to use the advanced features of modern browser developer tools. They can emulate connection speed, screen size, and header differences.</li>
</ul>
<p>&nbsp;</p>
]]></content>
			<link rel="replies" type="text/html" href="https://hacks.mozilla.org/2016/09/a-web-for-everyone-interviews-with-web-practitioners-chris-coyier/#comments" thr:count="0"/>
		<link rel="replies" type="application/atom+xml" href="https://hacks.mozilla.org/2016/09/a-web-for-everyone-interviews-with-web-practitioners-chris-coyier/feed/atom/" thr:count="0"/>
		<thr:total>0</thr:total>
		</entry>
		<entry>
		<author>
			<name>Havi Hoffman [Editor]</name>
					</author>
		<title type="html"><![CDATA[View Source Conference Berlin 2016]]></title>
		<link rel="alternate" type="text/html" href="https://hacks.mozilla.org/2016/08/view-source-conference-berlin-2016/" />
		<id>https://hacks.mozilla.org/?p=30150</id>
		<updated>2016-08-26T16:11:42Z</updated>
		<published>2016-08-26T16:11:42Z</published>
		<category scheme="https://hacks.mozilla.org" term="Conferences" /><category scheme="https://hacks.mozilla.org" term="Event" />		<summary type="html"><![CDATA[An overview View Source is an intimate, single-track conference for web developers, now in its second year. View Source 2016 takes place in Berlin, Germany, September 12-14, beginning with Ignite lightning talks on Monday evening, followed by two full days of great presenters, curated conversations, and sociable evenings. Tickets are still on sale. Here&#8217;s a [&#8230;]]]></summary>
		<content type="html" xml:base="https://hacks.mozilla.org/2016/08/view-source-conference-berlin-2016/"><![CDATA[<h3>An overview</h3>
<p><a href="https://viewsourceconf.org/" target="_blank"><strong>View Source</strong></a> is an intimate, single-track conference for web developers, now in its second year.</p>
<p>View Source 2016 takes place in Berlin, Germany, September 12-14, beginning with Ignite lightning talks on Monday evening, followed by two full days of great presenters, curated conversations, and sociable evenings. Tickets are still on sale.</p>
<p>Here&#8217;s a quick look at our lineup of main stage speakers &#8212; 16 great reasons to go! Discounted tickets are still available if you <a href="https://ti.to/mdn/view-source-berlin-2016/discount/MOZHACKS" target="_blank"><strong>register now</strong></a>. (Note: this link applies the MOZHACKS discount. Bring a friend!). We&#8217;d love to meet you there.</p>
<figure><a href="https://www.flickr.com/photos/viewsourceconf/22162956563"><img src="https://hacks.mozilla.org/files/2016/08/22162956563_33da6f0ef9_b-500x333.jpg" alt="22162956563_33da6f0ef9_b" width="500" height="333" class="alignnone size-large wp-image-30167" srcset="https://hacks.mozilla.org/files/2016/08/22162956563_33da6f0ef9_b-500x333.jpg 500w, https://hacks.mozilla.org/files/2016/08/22162956563_33da6f0ef9_b-250x167.jpg 250w, https://hacks.mozilla.org/files/2016/08/22162956563_33da6f0ef9_b-768x512.jpg 768w, https://hacks.mozilla.org/files/2016/08/22162956563_33da6f0ef9_b.jpg 1024w" sizes="(max-width: 500px) 100vw, 500px" /></a></p>
<figcaption>View Source Conference at the Gerding Theater in Portland, OR 2015. (© <a href="https://www.flickr.com/photos/viewsourceconf/22162956563" target="_blank">Photo by Jakub Mosur Photography</a>)</figcaption>
</figure>
<h3>Sixteen speakers, and much, much more</h3>
<p><a href="https://twitter.com/ladybenko" target="_blank"><strong>Belén Albeza</strong></a> &#8211; engineer and game developer on the Mozilla Developer Relations Team.&#8221;<em>Coding like a girl since 1996</em>.&#8221;</li>
<ul>
<li><strong>View Source talk:</strong> <em>You Might Not Need a CSS Framework<br />
</em></li>
<li><strong>Github: </strong><a href="https://github.com/belen-albeza" target="_blank">https://github.com/belen-albeza</a></li>
<li><strong>Website: </strong> <a href="http://www.belenalbeza.com/"target="_blank">Belén Albeza</a></li>
</ul>
<p><a href="https://twitter.com/rachelandrew" target="_blank"><strong>Rachel Andrew</strong></a> &#8211; web developer, speaker and author. Co-founder of the really little CMS <a href="http://grabaperch.com/">Perch</a>.</p>
<ul>
<li><strong>View Source talk:</strong> <em>Laying out the future with Grid and Flexbox</em></li>
<li><strong>Github:</strong> <a href="https://github.com/rachelandrew" target="_blank">https://github.com/rachelandrew</a></li>
<li><strong>Website:</strong> <a href="https://rachelandrew.co.uk/" target="_blank">Rachel Andrew</a></li>
</ul>
<p><a href="https://twitter.com/HadleyBeeman" target="_blank"><strong>Hadley Beeman</strong></a> &#8211; Open data, open standards &amp; technology policy. &#8220;<em>Mission: Using open data, open standards and online collaboration to improve government and daily life.</em>&#8221;</p>
<ul>
<li><strong>View Source keynote:</strong> <em>State of the Web</em></li>
</ul>
<p>View Source Conference is the inaugural Mozilla hosted web developer conference held at the Gerding Theater in Portland, OR from November 2-4, 2015. (© Photo by Jakub Mosur Photography)</p>
<p><a href="https://twitter.com/thealphanerd" target="_blank"><strong>Myles Borins</strong></a> &#8211; <em>&#8220;musician, artist, developer and inventor. He works for IBM spending most of his time contributing to the node.js ecosystem.&#8221;</em></p>
<ul>
<li><strong>View Source talk:</strong> <em>Node.js Releases</em></li>
<li><strong>Github: </strong><a href="https://github.com/thealphanerd" target="_blank">https://github.com/thealphanerd</a></li>
<li><strong>Website: </strong> <a href="http://thealphanerd.io/"target="_blank">thealphanerd.io</a></li>
</ul>
<p><a href="https://twitter.com/misprintedtype" target="_blank"><strong>Ola Gasidlo</strong></a> &#8211; <em>&#8220;JavaScript &amp;&amp; daughter driven development. Lead developer.&#8221;</em></p>
<ul>
<li><strong>View Source talk:</strong> <em>I&#8217;m offline, cool! What now?</em></li>
<li><strong>Github: </strong><a href="https://github.com/zoepage" target="_blank">https://github.com/zoepage</a></li>
</ul>
<p><a href="https://twitter.com/dontcallmedom" target="_blank"><strong>Dominique Hazael-Massieux</strong></a> &#8211; <em>&#8220;W3C Staff, working on next generation of Web technologies (incl JS APIs and WebRTC), with specific mobile focus.&#8221;</em></p>
<ul>
<li><strong>View Source talk:</strong> <em>Web, meet Virtual Reality</em></li>
<li><strong>Github: </strong><a href="https://github.com/dontcallmedom" target="_blank">https://github.com/dontcallmedom</a></li>
</ul>
<p><a href="https://twitter.com/helenvholmes" target="_blank"><strong>Helen Holmes</strong></a> &#8211; coder, author, and all round client-side wonk. &#8220;<em>@firefoxdevtools @mozilla▫️ design, type, IoT, feminist, swift, javascript, español, white ally</em>&#8221;</p>
<ul>
<li><strong>View Source talk:</strong> <em>Type is Your Right!: Performance and Web Typography</em></li>
<li><strong>Github: </strong><a href="https://github.com/helenvholmes" target="_blank">https://github.com/helenvholmes</a></li>
</ul>
<p><a href="https://twitter.com/adactio" target="_blank"><strong>Jeremy Keith</strong></a> &#8211; <em>&#8220;An Irish web developer working with @Clearleft curating @dConstruct, and more.&#8221;</em></p>
<ul>
<li><strong>View Source keynote:</strong> <em>Resilience</em></li>
<li><strong>Github: </strong><a href="https://github.com/adactio" target="_blank">https://github.com/adactio</a></li>
<li><strong>Website: </strong><a href="https://adactio.com/">Jeremy Keith: Adactio</a></li>
</ul>
<p><a href="https://twitter.com/robertnyman" target="_blank"><strong>Robert Nyman</strong></a> &#8211; &#8220;<em>Global Lead for Developer Feedback &amp; Communities, Web Platform, at Google. Helps developers in creating great things!</em>&#8221;</p>
<ul>
<li><strong>View Source keynote:</strong> <em>The Future of the Web – Progressive Web Apps and Beyond</em></li>
<li><strong>Website:</strong> <a href="https://robertnyman.com/" target="_blank">Robert Nyman</a></li>
</ul>
<p><a href="https://twitter.com/limedaring" target="_blank"><strong>Tracy Osborn</strong></a> &#8211; &#8220;<em>Author of @HelloWebApp and creator of @WeddingLovely. Designer-developer-entreprenerd who loves being outside and climbing mountains.</em>&#8221;</p>
<ul>
<li><strong>View Source talk:</strong> <em>Design for Non-Designers</em></li>
<li><strong>Github: </strong><a href="https://github.com/hellowebapp" target="_blank">https://github.com/hellowebapp</a></li>
<li><strong>Website</strong> <a href="http://limedaring.com/" target="_blank">Tracy Osborn</a></li>
</ul>
<p><a href="https://twitter.com/lrnrd" target="_blank"><strong>Lena Reinhard</strong></a> &#8211; <em>&#8220;Team Lead @TravisCI, Speaker, Photographer, Feminist Killjoy.&#8221;</em></p>
<ul>
<li><strong>View Source keynote:</strong> <em>Existing in Tech</em></li>
<li><strong>Website:</strong> <a href="http://schoenaberselten.com/" target="_blank">Lena Reinhard</a></li>
</ul>
<p><a href="https://twitter.com/danshappir" target="_blank"><strong>Dan Shappir</strong></a> &#8211; &#8220;<em>My job is to make 85 million websites&#8230; load and execute faster #perfmatters</em>&#8221;</p>
<ul>
<li><strong>View Source talk:</strong> <em>Things You Can Do In ES6 That Can&#8217;t Be Done In ES5</em></li>
<li><strong>Github: </strong><a href="https://github.com/DanShappir" target="_blank">https://github.com/DanShappir</a></li>
<li><strong>Article:</strong> <a href="http://blog.wix.engineering/2015/04/21/javascript-the-extra-good-parts/" target="_blank">JavaScript: The Extra Good Parts</a></li>
</ul>
<p><a href="https://www.twitter.com/jensimmons" target="_blank"><strong>Jen Simmons</strong></a> &#8211; &#8220;<em>Designer Advocate at Mozilla. Host &amp; executive producer of The Web Ahead podcast. Excited about new CSS for web page layout &amp; revolutionizing editorial design.</em>&#8221;</p>
<ul>
<li><strong>View Source talk:</strong> <em>Revolutionize Your Page: Real Art Direction on the Web</em></li>
<li><strong>Podcast:</strong> <a href="http://thewebahead.net/" target="_blank">The Web Ahead</a></li>
<li><strong>Website:</strong> <a href="http://jensimmons.com/" target="_blank">Jen Simmons</a></li>
</ul>
<p><a href="https://twitter.com/miketaylr" target="_blank"><strong>Mike Taylor</strong></a> &#8211; &#8220;<em>Web Compat at Mozilla. I mostly tweet about crappy code.</em>&#8221;</p>
<ul>
<li><strong>View Source talk:</strong> <em>Doing the Unstuck: How to make browsers compatible with the web</em></li>
<li><strong>Github: </strong><a href="https://github.com/miketaylr" target="_blank">https://github.com/miketaylr</a></li>
<li><strong>Website:</strong> <a href="https://miketaylr.com/" target="_blank">miketaylrdotcom</a></li>
</ul>
</ul>
<p><a href="https://www.twitter.com/estellevw" target="_blank"><strong>Estelle Weyl</strong></a> &#8211; &#8220;<em>0.10X Engineer. Snuggler of dogs. Trainer of slugs. Never has an opinion. Always has many.</em>&#8221;</p>
<ul>
<li><strong>View Source talk:</strong> <em>ECMAScript 2015: Why It Took So Long</em></li>
<li><strong>Github: </strong><a href="https://github.com/estelle" target="_blank">https://github.com/estelle</a></li>
<li><strong>Website:</strong> <a href="http://www.standardista.com/" target="_blank">Standardista</a></li>
</ul>
<p><a href="https://twitter.com/cwilso" target="_blank"><strong>Chris Wilson</strong></a> &#8211; <em>&#8220;World Wide Web Shaman. Freethinker.&#8221;</em></p>
<ul>
<li><strong>View Source talk:</strong> <em>Progressive Web Apps</em></li>
<li><strong>Github: </strong><a href="https://github.com/cwilso" target="_blank">https://github.com/cwilso</a></li>
</li>
</ul>
<p>It&#8217;s a brilliant lineup. </p>
<p>And that&#8217;s just a rundown of the main stage speakers for Tuesday and Wednesday. The View Source experience begins Monday evening with a collection of Ignite talks, and the schedule continues with workshops, demos, discussion areas, and evening social events through Wednesday. <a href="https://ti.to/mdn/view-source-berlin-2016/discount/MOZHACKS" target="_blank"><strong>Join us!</strong></a> </p>
<p><a href="https://www.flickr.com/photos/viewsourceconf/22303070533/"><img src="https://hacks.mozilla.org/files/2016/08/22303070533_1256a838ab_b-500x333.jpg" alt="22303070533_1256a838ab_b" width="500" height="333" class="alignnone size-large wp-image-30166" srcset="https://hacks.mozilla.org/files/2016/08/22303070533_1256a838ab_b-500x333.jpg 500w, https://hacks.mozilla.org/files/2016/08/22303070533_1256a838ab_b-250x167.jpg 250w, https://hacks.mozilla.org/files/2016/08/22303070533_1256a838ab_b-768x512.jpg 768w, https://hacks.mozilla.org/files/2016/08/22303070533_1256a838ab_b.jpg 1024w" sizes="(max-width: 500px) 100vw, 500px" /></a></p>
<figcaption>View Source Conference at the Gerding Theater in Portland, OR 2015. (© <a href="https://www.flickr.com/photos/viewsourceconf/22303070533/" target="_blank">Photo by Jakub Mosur Photography</a>)</figcaption>
<hr class="dino">
</li>
</ul>
<h3>If you can&#8217;t be in Berlin next month&#8230;</h3>
<p>Rest assured that all the <a href="https://viewsourceconf.org/berlin-2016/#speakers" target="_blank">View Source speaker talks</a> will be recorded and made available after the event. We will let you know where to find them as they are released. Want to have a look at last year&#8217;s conference talks? Check out the <a href="https://air.mozilla.org/channels/view-source-2015/" target="_blank">View Source 2015 channel</a> on Air Mozilla, Mozilla&#8217;s video platform. Got questions, comments, concerns? Please tweet to <a href="https://twitter.com/viewsourceconf" target="_blank">@viewsourceconf</a> and we will respond.</p>
]]></content>
			<link rel="replies" type="text/html" href="https://hacks.mozilla.org/2016/08/view-source-conference-berlin-2016/#comments" thr:count="0"/>
		<link rel="replies" type="application/atom+xml" href="https://hacks.mozilla.org/2016/08/view-source-conference-berlin-2016/feed/atom/" thr:count="0"/>
		<thr:total>0</thr:total>
		</entry>
		<entry>
		<author>
			<name>Justin Crawford</name>
						<uri>http://hoosteeno.com</uri>
					</author>
		<title type="html"><![CDATA[A Web for Everyone: Interviews with Web Practitioners &#8212; Rachel Andrew]]></title>
		<link rel="alternate" type="text/html" href="https://hacks.mozilla.org/2016/08/a-web-for-everyone-interviews-with-web-practitioners-rachel-andrew/" />
		<id>https://hacks.mozilla.org/?p=30158</id>
		<updated>2016-09-19T20:21:28Z</updated>
		<published>2016-08-25T14:42:39Z</published>
		<category scheme="https://hacks.mozilla.org" term="A Web for Everyone: Interviews" /><category scheme="https://hacks.mozilla.org" term="People of HTML5" /><category scheme="https://hacks.mozilla.org" term="Web Developers" /><category scheme="https://hacks.mozilla.org" term="cross-browser-compat-interviews" />		<summary type="html"><![CDATA[A recent article on Mozilla Hacks, “Make the Web Work for Everyone,” explored challenges and opportunities in browser compatibility. In that post we urged developers to build cross-browser compatible web experiences in order to maximize exposure and market size; prevent interface bugs that drive users away forever; and demonstrate professional mastery. Today we’re kicking off [&#8230;]]]></summary>
		<content type="html" xml:base="https://hacks.mozilla.org/2016/08/a-web-for-everyone-interviews-with-web-practitioners-rachel-andrew/"><![CDATA[<p>A recent article on Mozilla Hacks, “<a href="https://hacks.mozilla.org/make-the-web-work-for-everyone/">Make the Web Work for Everyone</a>,” explored challenges and opportunities in browser compatibility. In that post we urged developers to build cross-browser compatible web experiences in order to <a href="https://hacks.mozilla.org/2016/07/make-the-web-work-for-everyone/?utm_source=hacks&amp;utm_medium=article&amp;utm_campaign=compat&amp;utm_content=market_size#other_browser">maximize exposure and market size</a>; <a href="https://hacks.mozilla.org/2016/07/make-the-web-work-for-everyone/?utm_source=hacks&amp;utm_medium=article&amp;utm_campaign=compat&amp;utm_content=drive_users_away#wont_change">prevent interface bugs</a> that drive users away forever; and <a href="https://hacks.mozilla.org/2016/07/make-the-web-work-for-everyone/?utm_source=hacks&amp;utm_medium=article&amp;utm_campaign=compat&amp;utm_content=professional_mastery#craft">demonstrate professional mastery</a>.</p>
<p>Today we’re kicking off a series of interviews with web developers who have earned widespread admiration for their work on the web. Do these professionals at the top of their field take web compatibility as seriously as we do? Why or why not? And how do they go about achieving it?</p>
<p>We&#8217;ll start by talking with Rachel Andrew (<a href="https://twitter.com/rachelandrew">@rachelandrew</a>).</p>
<p><img class="alignleft wp-image-30159 size-full" title="Rachel Andrew" src="https://hacks.mozilla.org/files/2016/08/rachelandrew.jpg" alt="Rachel Andrew" width="400" height="400" srcset="https://hacks.mozilla.org/files/2016/08/rachelandrew.jpg 400w, https://hacks.mozilla.org/files/2016/08/rachelandrew-250x250.jpg 250w, https://hacks.mozilla.org/files/2016/08/rachelandrew-32x32.jpg 32w, https://hacks.mozilla.org/files/2016/08/rachelandrew-50x50.jpg 50w, https://hacks.mozilla.org/files/2016/08/rachelandrew-64x64.jpg 64w, https://hacks.mozilla.org/files/2016/08/rachelandrew-96x96.jpg 96w, https://hacks.mozilla.org/files/2016/08/rachelandrew-128x128.jpg 128w" sizes="(max-width: 400px) 100vw, 400px" /></p>
<p>Rachel is a founder and managing director of <a href="http://edgeofmyseat.com">edgeofmyseat.com</a>, the company that builds <a href="https://grabaperch.com/">Perch CMS</a>. She has worked on the web since 1996; in that time she’s authored <a href="https://rachelandrew.co.uk/books">numerous books about CSS and HTML5</a>. She is a frequent speaker at web development conferences (you can see her <a href="https://viewsourceconf.org/berlin-2016/schedule/#layout">talking about CSS layouts at View Source 2016</a> in Berlin, September 12-14). She blogs at <a href="https://rachelandrew.co.uk">rachelandrew.co.uk</a>.</p>
<hr class="dino" />
<p><strong>So Rachel, what does cross-browser compatibility mean to you?</strong></p>
<p>Doing my job properly! That’s it really.</p>
<p><strong>How often do you have to think about cross-browser compatibility? Have you found ways to work that allow you to reduce the amount of time you think about it compared to when you were less experienced?</strong></p>
<p>I think about it a lot less now than I used to. The main core things we want to do work cross-browser in a consistent way. We don’t have wildly buggy behaviour as we had in the past. New developers should go look at <a href="http://www.positioniseverything.net/explorer.html">positioniseverything.net/explorer.html</a> to see the stuff we used to have to deal with!</p>
<p>Where I do need to think about it is when I am using a new specification, something that isn’t fully implemented perhaps. Or something that hasn’t yet been implemented in all browsers, in that case I need to be sure that my usage of that technique for supporting browsers does not cause a problem for people in a browser that hasn’t got that feature yet.</p>
<p><strong>What motivates you to make the extra effort to build a cross-browser compatible site or product?</strong></p>
<blockquote class="pullquote"><p>I’ve always worked from the assumption that the web is for everyone.</p></blockquote>
<p>I’ve always worked from the assumption that the web is for everyone. I’m also old enough to understand how fast this stuff changes. As far as I can see the absolute best way to ensure that things work well for people now and a year down the line is to get them working in the biggest possible number of browsers and devices today.</p>
<p><strong>Could anything convince you not to make that effort?</strong></p>
<p>Not really, because it is so ingrained into how I work. I also know from experience that when someone says the site only needs to work in a certain browser, look a year down the line and that might change.</p>
<p>Also, in a world of evergreen browsers, working cross-browser can actually mean improving the future experience for the people using the browser with the biggest market share. Here’s an example: <code>position: sticky</code>, enabling sticky headers on tables and navigation has been in Firefox for a good while. It is <a href="http://caniuse.com/#feat=css-sticky">currently behind a flag in Chrome</a>. Over 50% of my users are in Chrome, however the sticky headers on a table are a nice enhancement so I might use <code>position: sticky</code> to add that little touch for Firefox users who have support.</p>
<blockquote class="pullquote"><p>We think of cross-browser being dull grunt work, battling with old browsers and weird bugs. However it can also be pretty fun and liberating, especially right now. There is new stuff shipping all of the time, you miss out if you don’t take a look at who is shipping what.</p></blockquote>
<p>When Chrome ship their support, suddenly all those users will get that nice enhancement. The site will get better for them without me having to ship any code. So being aware of what is shipping in different browsers means you can take advantage of new stuff and leave these enhancements in your site for other browsers to grow into.</p>
<p>We think of cross-browser being dull grunt work, battling with old browsers and weird bugs. However it can also be pretty fun and liberating, especially right now. There is new stuff shipping all of the time, you miss out if you don’t take a look at who is shipping what.</p>
<p><strong>Can you think of a particularly vexing or interesting compatibility bug you’ve encountered?</strong></p>
<p>Not really, of course I’ve had them. No matter how much testing you do you can be sure that something subtle or not so subtle will happen at some point. What you find is that the more time you have invested into understanding why things work as they do, the more these issues just become a bit annoying rather than giant showstoppers. Actually practicing working cross-browser in non-stressful situations means that when something baffling does occur you have the ability to take a step back and debug it, figure out how that user could possibly be seeing what they are seeing and get it fixed.</p>
<p><strong>Have you ever had to convince a client or boss that building a cross-browser compatible site was important? How’d you do it?</strong></p>
<p>Even back in the days of the browser wars I never mentioned it, I just did it. It’s how we work.</p>
<p><strong>Did you ever have a specific experience that caused you to take cross-browser compatibility more seriously with your next project?</strong></p>
<p>Not really, I’ve been doing this for a long time! However I used to do a lot of troubleshooting of work done by other people. Rather than starting from a baseline of solid experience and enhancing from there, they would have all started with something that only worked in one browser and then tried to retrofit compatibility for the others. Fixing the mess often meant going right back to basics, figuring out the core experience that was needed and then building back up the desired result in those browsers that supported the full experience.</p>
<p><strong>In your post, <a href="https://rachelandrew.co.uk/archives/2013/10/17/unfashionably-profitable/">“Unfashionably Profitable,”</a> you say, <em>“Everything should be possible without JavaScript.”</em> Do you think over-reliance on JavaScript has made the web less cross-browser compatible?</strong></p>
<p>I think that people will often reach for JavaScript earlier in the process than they need to. Even if they are not building the whole thing as a JavaScript application there is a tendency to assume JavaScript is required for all sorts of things that can be achieved without it, or where a baseline experience can be developed without JavaScript to be enhanced later.</p>
<p>I’m not saying “don’t use JavaScript” but the fact is that as soon as you bring JavaScript into the mix you have a whole host of new potential compatibility problems. A development practice that brings these things in one at a time and encourages testing at each stage makes the whole process much much easier.</p>
<p><strong>Are there parts of your process/toolchain/etc. that make it easy for you to incorporate or test for compatibility that you would recommend every web developer incorporate into their own?</strong></p>
<p>I’m pretty old-school when it comes to tools, however I am a big fan of <a href="https://www.browserstack.com">BrowserStack</a>, mostly because I travel a lot and can’t fill that laptop with virtual machines or drag several devices around with me.</p>
<p><strong>What would you tell a brand new developer graduating from a coding bootcamp about cross-browser compatibility?</strong></p>
<blockquote class="pullquote"><p>Start out right and you probably won’t have to think about it too much.</p></blockquote>
<p>Everything gets easier if you start by figuring out what the core thing the site or application or feature you are building needs to do. Build that, make sure it works in a few browsers. Then, and only then start to add the bells and whistles. Don’t get everything working in one browser and then a day before launch think, “hmm maybe I should test this in another browser”. That is when cross-browser becomes difficult, when you try and do the retro-fitting.</p>
<p>Start out right and you probably won’t have to think about it too much.</p>
<hr class="dino" />
<p><strong>Tips from Rachel&#8217;s interview</strong></p>
<ul>
<li>Experiment with upcoming or partially-implemented browser features, but use them only to enhance basic functionality, not to deliver basic functionality.</li>
<li>Add new features one at a time and test their compatibility as you go. Don’t wait to test at the end.</li>
<li>If you don&#8217;t have access to all the machines and devices you need to test on, test in one of the <a href="https://hacks.mozilla.org/2016/07/make-the-web-work-for-everyone/#tools">online browser testing tools</a>.</li>
</ul>
]]></content>
			<link rel="replies" type="text/html" href="https://hacks.mozilla.org/2016/08/a-web-for-everyone-interviews-with-web-practitioners-rachel-andrew/#comments" thr:count="0"/>
		<link rel="replies" type="application/atom+xml" href="https://hacks.mozilla.org/2016/08/a-web-for-everyone-interviews-with-web-practitioners-rachel-andrew/feed/atom/" thr:count="0"/>
		<thr:total>0</thr:total>
		</entry>
		<entry>
		<author>
			<name>Belén Albeza</name>
						<uri>http://www.belenalbeza.com</uri>
					</author>
		<title type="html"><![CDATA[A few HTML tips]]></title>
		<link rel="alternate" type="text/html" href="https://hacks.mozilla.org/2016/08/a-few-html-tips/" />
		<id>https://hacks.mozilla.org/?p=30152</id>
		<updated>2016-08-24T23:00:36Z</updated>
		<published>2016-08-23T14:48:28Z</published>
		<category scheme="https://hacks.mozilla.org" term="Featured Article" /><category scheme="https://hacks.mozilla.org" term="HTML5" /><category scheme="https://hacks.mozilla.org" term="SVG" /><category scheme="https://hacks.mozilla.org" term="html5" /><category scheme="https://hacks.mozilla.org" term="icons" /><category scheme="https://hacks.mozilla.org" term="web font icons" />		<summary type="html"><![CDATA[A while ago I wrote an article with some CSS tips, now it’s time to give some polish to our HTML! In this article I’ll share some tips and advice about HTML code. Some of this guidance will be best suited for beginners – how to properly build paragraphs, use headings, or improve forms, but [&#8230;]]]></summary>
		<content type="html" xml:base="https://hacks.mozilla.org/2016/08/a-few-html-tips/"><![CDATA[<p>A while ago I wrote an article with <a href="https://hacks.mozilla.org/2016/05/css-coding-techniques/">some CSS tips</a>, now it’s time to give some polish to our HTML! In this article I’ll share some tips and advice about HTML code. Some of this guidance will be best suited for beginners – how to properly build paragraphs, use headings, or improve forms, but we will also discuss SVG sprites for icons, a somewhat more advanced topic.</p>
<h2>Text</h2>
<h3>Paragraphs</h3>
<p>Most of our writing is structured in paragraphs, and there is an HTML element for that: <code>&lt;p&gt;</code>. <b>Do <i>not</i> use the line break tag</b> <code>&lt;br&gt;</code> to separate blocks of texts into pseudo-paragraphs, since line breaks are not meant for that.</p>
<p><strong>Avoid:</strong></p>
<pre><code class="language-html">Cupcake ipsum dolor sit. Amet chupa chups chupa chups sesame snaps. Ice cream pie jelly
beans muffin donut marzipan oat cake.

&lt;br&gt;

Gummi bears tart cotton candy icing. Muffin bear claw carrot cake jelly jujubes pudding
chocolate cake cheesecake toffee.
</code></pre>
<p><strong>Recommended:</strong></p>
<pre><code class="language-html">&lt;p&gt;Cupcake ipsum dolor sit. Amet chupa chups chupa chups sesame snaps. Ice cream
pie jelly beans muffin donut marzipan oat cake.&lt;/p&gt;

&lt;p&gt;Gummi bears tart cotton candy icing. Muffin bear claw carrot cake jelly jujubes
pudding chocolate cake cheesecake toffee.&lt;/p&gt;
</code></pre>
<p>A legit use for line breaks would be, for instance, to break verses of a poem or song:</p>
<pre><code class="language-html">&lt;p&gt;So close, no matter how far&lt;br&gt;
Couldn’t be much more from the hearth&lt;br&gt;
Forever trusting who we are&lt;br&gt;
And nothing else matters&lt;/p&gt;
</code></pre>
<h3>Headings</h3>
<p>Headings tags, from <code>&lt;h1&gt;</code> to <code>&lt;h6&gt;</code>, have an implicit rank assigned to them, from <code>1</code> (most important) to <code>6</code> (less important).</p>
<p><a href="https://www.w3.org/TR/html5/sections.html#headings-and-sections" target="_blank">To handle semantics properly,</a> <strong>pick your heading rank in sequential order</strong>, not just because of the size that the browser will use to render the heading. You can – and should!– use CSS for this, and pick a suitable rank instead.</p>
<p><strong>Avoid:</strong></p>
<pre><code class="language-html">&lt;article&gt;
    &lt;h1&gt;Monkey Island&lt;/h1&gt;
    &lt;h4&gt;Look behind you! A three-headed monkey!&lt;/h4&gt;
    &lt;!-- ... --&gt;
&lt;/article&gt;
</code></pre>
<p><strong>Recommended:</strong></p>
<pre><code class="language-html">&lt;article&gt;
    &lt;h1&gt;Monkey Island&lt;/h1&gt;
    &lt;h2&gt;Look behind you! A three-headed monkey!&lt;/h2&gt;
    &lt;!-- ... --&gt;
&lt;/article&gt;
</code></pre>
<p>Another thing to take into account is how to <strong>create subheadings or tag lines</strong> to accompany headings. <a href="https://www.w3.org/TR/html5/common-idioms.html#common-idioms" target="_blank">The W3C recommendation</a> is to use regular text markup rather than a lower-rank heading.</p>
<p><strong>Avoid:</strong></p>
<pre><code class="language-html">&lt;header&gt;
    &lt;h1&gt;Star Wars VII&lt;/h1&gt;
    &lt;h2&gt;The Force Awakens&lt;/h2&gt;
&lt;/header&gt;
</code></pre>
<p><strong>Recommended:</strong></p>
<pre><code class="language-html">&lt;header&gt;
    &lt;h1&gt;Star Wars VII&lt;/h1&gt;
    &lt;p&gt;The Force Awakens&lt;/p&gt;
&lt;/header&gt;
</code></pre>
<h2>Forms</h2>
<h3>Placeholders</h3>
<p>The placeholder attribute in <code>&lt;input&gt;</code> form elements will let you show an example value to the user that is automatically erased once the user types anything in the field. Placeholders are meant to show examples of <strong>formatting</strong> valid for a field.</p>
<p>Unfortunately, in the wild there are a lot of placeholders acting as <code>&lt;label&gt;</code> elements, informing of what the field <em>is</em> instead of serving as an example of a valid input value. This practice is not <a href="https://developer.mozilla.org/en-US/docs/Web/Accessibility" target="_blank">accessible</a>, and you should avoid it.</p>
<p><strong>Avoid:</strong></p>
<pre><code class="language-html">&lt;input type="email" placeholder="Your e-mail" name="mail"&gt;
</code></pre>
<p><strong>Recommended:</strong></p>
<pre><code class="language-html">&lt;label&gt;
    Your e-mail:
    &lt;input type="email" placeholder="darth.vader@empire.gov" name="mail"&gt;
&lt;/label&gt;
</code></pre>
<h3>Keyboards in mobile devices</h3>
<p>It is crucial to <b>provide typing hints</b> for people browsing from a mobile device, like a phone or a tablet. We can easily achieve this by picking the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes" target="_blank">correct type</a> for our <code>&lt;input&gt;</code> elements.</p>
<p>For instance, <code>type="number"</code> will make a mobile phone display the numeric keypad instead of the regular alphanumeric keyboard. The same goes for <code>type="email"</code>, <code>type="tel"</code>, etc.</p>
<p><strong>Avoid:</strong></p>
<pre><code class="language-html">&lt;label&gt;Phone number: &lt;input type="text" name="mobile"&gt;&lt;/label&gt;
</code></pre>
<p><strong>Recommended:</strong></p>
<pre><code class="language-html">&lt;label&gt;Phone number: &lt;input type="tel" name="mobile"&gt;&lt;/label&gt;
</code></pre>
<p>Here is a comparison: on the left, the keyboard that shows up when using <code>type="text"</code>; on the right, the keyboard for <code>type="tel"</code>.</p>
<p><img class="aligncenter size-large wp-image-30153" src="https://hacks.mozilla.org/files/2016/08/keyboard_compare-500x443.png" alt="keyboard comparison" width="500" height="443" srcset="https://hacks.mozilla.org/files/2016/08/keyboard_compare-500x443.png 500w, https://hacks.mozilla.org/files/2016/08/keyboard_compare-250x222.png 250w, https://hacks.mozilla.org/files/2016/08/keyboard_compare-768x681.png 768w, https://hacks.mozilla.org/files/2016/08/keyboard_compare.png 1282w" sizes="(max-width: 500px) 100vw, 500px" /></p>
<h2>Images</h2>
<p>Say hi to <b>SVG files</b>! Not only can you use vector graphics in <code>&lt;img&gt;</code> tags like this:</p>
<pre><code class="language-html">&lt;img src="acolyte_cartoon.svg" alt="acolyte"&gt;
</code></pre>
<p>You can also use <b>SVG sprites to implement vector icons</b> in your website, instead of using a Web Font – which is a hack, and might not yield perfect results. This is because browsers treat Web Font icons as text, and not as images. And there are other potential problems, like content/ad blockers disabling the download of Web Fonts. If you would like to learn more about this, watch <a href="http://wordpress.tv/2016/05/28/sarah-semark-stop-using-icon-fonts-love-svg/" target="_blank">this talk by Sarah Semark</a> about why using SVG for icons is better than using a Web Font. You can also read more about this technique on <a href="https://css-tricks.com/svg-sprites-use-better-icon-fonts/" target="_blank">CSS-Tricks</a>.</p>
<p>The idea of SVG sprites is very similar to <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Images/Implementing_image_sprites_in_CSS" target="_blank">CSS sprites</a>. The implementation consists of merging all your SVG assets in a single image file. In the case of SVG, every asset is wrapped in a <code>&lt;symbol&gt;</code> tag, like this:</p>
<pre><code class="language-html">&lt;svg&gt;
    &lt;symbol id="social-twitter" viewBox="..."&gt;
        &lt;!-- actual image data here --&gt;
    &lt;/symbol&gt;
&lt;/svg&gt;
</code></pre>
<p>Then, the icon can be used in your HTML with a <code>&lt;svg&gt;</code> tag like this, so we point to the symbol ID in the SVG file:</p>
<pre><code class="language-html">&lt;svg class="social-icon"&gt;
    &lt;use xlink:href="icons.svg#social-twitter" /&gt;
&lt;/svg&gt;
</code></pre>
<p>Does creating an SVG spritesheet seem tedious? Well, that&#8217;s why there are tools like <a href="https://github.com/w0rm/gulp-svgstore" target="_blank">gulp-svgstore</a> to automate the process and generate a spritesheet from your individual asset files.</p>
<p>And remember, since we are using a <code>&lt;svg&gt;</code> tag instead of an <code>&lt;img&gt;</code> to include the picture, we can then use CSS to apply styles. So all the cool things you can do with Web Font icons, can be done with these SVG icons as well!</p>
<pre><code class="language-css">.social-icon {
    fill: #000;
    transition: all 0.2s;
}

.social-icon:hover {
    fill: #00f;
}
</code></pre>
<p>There are some CSS limitations though: when using SVG this way, with <code>&lt;use&gt;</code> linking to a <code>&lt;symbol&gt;</code>, the image gets injected in <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Shadow_DOM" target="_blank">Shadow DOM</a> and we lose some CSS capabilities. In this case, we can’t cherry-pick which elements of the SVG to apply the styling to, and some properties (e.g., fill) will only be applied to those elements that have them undefined. But hey, you can’t do this with Web Font icons either!</p>
<p>In the demo below, you can see an example of a SVG sprite in action. When you mouse over the image, the torch’s fire will change its color via CSS.</p>
<p class="codepen" data-height="270" data-theme-id="light" data-slug-hash="OXBQZq" data-default-tab="css,result" data-user="ladybenko" data-embed-version="2">See the Pen <a href="http://codepen.io/ladybenko/pen/OXBQZq/" target="_blank">SVG acolyte demo</a> by ladybenko (<a href="http://codepen.io/ladybenko" target="_blank">@ladybenko</a>) on <a href="http://codepen.io" target="_blank">CodePen</a>.</p>
<p><script src="//assets.codepen.io/assets/embed/ei.js" async=""></script></p>
<hr />
<p>I hope that these tips are helpful. If you have any questions, or would like to share your own tip, please leave a comment!</p>
]]></content>
			<link rel="replies" type="text/html" href="https://hacks.mozilla.org/2016/08/a-few-html-tips/#comments" thr:count="36"/>
		<link rel="replies" type="application/atom+xml" href="https://hacks.mozilla.org/2016/08/a-few-html-tips/feed/atom/" thr:count="36"/>
		<thr:total>36</thr:total>
		</entry>
		<entry>
		<author>
			<name>Jen Simmons</name>
						<uri>http://jensimmons.com</uri>
					</author>
		<title type="html"><![CDATA[Using Feature Queries in CSS]]></title>
		<link rel="alternate" type="text/html" href="https://hacks.mozilla.org/2016/08/using-feature-queries-in-css/" />
		<id>https://hacks.mozilla.org/?p=30136</id>
		<updated>2016-08-17T13:48:31Z</updated>
		<published>2016-08-17T13:00:26Z</published>
		<category scheme="https://hacks.mozilla.org" term="CSS" /><category scheme="https://hacks.mozilla.org" term="Featured Article" /><category scheme="https://hacks.mozilla.org" term="Feature Queries" />		<summary type="html"><![CDATA[There’s a tool in CSS that you might not have heard of yet. It&#8217;s powerful. It&#8217;s been there for a while. And it&#8217;ll likely become one of your favorite new things about CSS. Behold, the @supports rule. Also known as Feature Queries. With @supports, you can write a small test in your CSS to see [&#8230;]]]></summary>
		<content type="html" xml:base="https://hacks.mozilla.org/2016/08/using-feature-queries-in-css/"><![CDATA[<p>There’s a tool in CSS that you might not have heard of yet. It&#8217;s powerful. It&#8217;s been there for a while. And it&#8217;ll likely become one of your favorite new things about CSS.</p>
<p>Behold, the <code>@supports</code> rule. Also known as <a href="http://www.w3.org/TR/css3-conditional/#at-supports">Feature Queries</a>.</p>
<p>With <code>@supports</code>, you can write a small test in your CSS to see whether or not a particular “feature” (CSS property or value) is supported, and apply a block of code (or not) based on the answer. Like this:</p>
<pre><code>@supports (display: grid) {
   // code that will only run if CSS Grid is supported by the browser
 }
</code></pre>
<p>If the browser understands <code>display: grid</code>, then all of the styling inside the brackets will be applied. Otherwise all of that styling will be skipped.</p>
<p>Now, there seems to be a bit of confusion about what Feature Queries are for. This is not some kind of external verification that analyzes whether or not a browser has <em>properly</em> implemented a CSS property. If you are looking for that, <a href="http://testthewebforward.org">look elsewhere</a>. Feature Queries ask the browser to self-report on whether or not a certain CSS property/value is supported, and use the answer to decide whether or not to apply a block of CSS. If a browser has implemented a feature improperly or incompletely, <code>@supports</code> won’t help you. If the browser is misreporting what CSS it supports, <code>@supports</code> won’t help you. It’s not a magic wand for making browser bugs disappear.</p>
<p>That said, I’ve found <code>@supports</code> to be incredibly helpful. The <code>@supports</code> rule has repeatedly let me use new CSS far earlier than I could without it. </p>
<p>For years, developers have used <a href="https://modernizr.com">Modernizr</a> to do what Feature Queries do — but Modernizr requires JavaScript. While the scripts might be tiny, CSS architected with Modernizr requires the JavaScript file to download, to execute, and to complete before the CSS is applied. Involving JavaScript will always be slower than only using CSS. Requiring JavaScript opens up the possibility of failure — what happens if the JavaScript doesn’t execute? Plus, Modernizr requires an additional layer of complexity that many projects just can’t handle. Feature Queries are faster, more robust, and much simpler to use. </p>
<p>You might notice the syntax of a Feature Query is a lot like a Media Query. I think of them as cousins.</p>
<pre><code>@supports (display: grid) {
  main {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
  }
}
</code></pre>
<p>Now most of the time, you do not need such a test in your CSS. For example, you can write this code without testing for support:</p>
<pre><code>aside {
  border: 1px solid black;
  border-radius: 1em;
}
</code></pre>
<p>If a browser understands <code>border-radius</code>, then it will put rounded corners on the <code>aside</code> box. If it doesn&#8217;t, it will skip that line of code and move on, leaving the edges of the box to be square. There is no reason to run a test or use a Feature Query. This is just how CSS works. It’s a fundamental principle in <a href="http://jensimmons.com/presentation/progressing-our-layouts">architecting solid, progressively-enhanced CSS</a>. Browsers simply skip over code they don’t understand, without throwing an error.</p>
<figure>
<img src="https://hacks.mozilla.org/files/2016/08/border-radius.png" alt="a screenshot of border radius effect in  old vs new browsers" width="950" height="300" class="alignleft size-full wp-image-30137" srcset="https://hacks.mozilla.org/files/2016/08/border-radius.png 950w, https://hacks.mozilla.org/files/2016/08/border-radius-250x79.png 250w, https://hacks.mozilla.org/files/2016/08/border-radius-768x243.png 768w, https://hacks.mozilla.org/files/2016/08/border-radius-500x158.png 500w" sizes="(max-width: 950px) 100vw, 950px" /></p>
<figcaption>Most browsers will display <code>border-radius: 1em</code> as the result on the right. Internet Explorer 6, 7 and 8, however, will not round the corners, and you’ll see the result on the left. Check out this example at <a href="http://codepen.io/jensimmons/pen/EydmkK?editors=1100">codepen.io/jensimmons/pen/EydmkK</a> </figcaption>
</figure>
<p>You do not need a Feature Query for this.</p>
<p>So when do you want to use <code>@supports</code>? A Feature Query is a tool for bundling together CSS declarations so that they’ll run as a group under certain conditions. Use a Feature Query when you want to apply a mix of old and new CSS, but only when the new CSS is supported. </p>
<p>Let’s look at an example using the Initial Letter property. This new property <code>initial-letter</code> tells the browser to make the element in question bigger — like for a drop cap. Here, the first letter of the first word in a paragraph is being told to be the size of four lines of text. Fabulous. Oh, but I would also like to make that letter bold, and put a bit of margin on its right side, and hey, let&#8217;s make it a nice orange color. Cool.</p>
<pre><code>  p::first-letter {
     -webkit-initial-letter: 4;
     initial-letter: 4;
     color: #FE742F;
     font-weight: bold;
     margin-right: 0.5em;
  }
</code></pre>
<figure>
<img src="https://hacks.mozilla.org/files/2016/08/intial-letter-1.gif" alt="a screenshot of this example Initial Letter in Safari 9" width="870" height="348" class="alignleft size-full wp-image-30139" /></p>
<figcaption>Here’s what our initial-letter example looks like in Safari 9.</figcaption>
</figure>
<p>Now let’s see what will happen in all the other browsers…</p>
<figure>
<img src="https://hacks.mozilla.org/files/2016/08/intial-letter-2.png" alt="a screenshot of this Initial Letter example in other browsers" width="870" height="348" class="alignleft size-full wp-image-30140" srcset="https://hacks.mozilla.org/files/2016/08/intial-letter-2.png 870w, https://hacks.mozilla.org/files/2016/08/intial-letter-2-250x100.png 250w, https://hacks.mozilla.org/files/2016/08/intial-letter-2-768x307.png 768w, https://hacks.mozilla.org/files/2016/08/intial-letter-2-500x200.png 500w" sizes="(max-width: 870px) 100vw, 870px" /></p>
<figcaption>Oh, no. This looks terrible in all the other browsers.</figcaption>
</figure>
<p>Well, that’s not acceptable. We don&#8217;t want to change the color of the letter, or add a margin, or make it bold unless it&#8217;s also going to be made bigger by the Initial Letter property. We need a way to test and see whether or not the browser understands <code>initial-letter</code>, and only apply the change to color, weight, and margin if it does. Enter the Feature Query. </p>
<pre><code>@supports (initial-letter: 4) or (-webkit-initial-letter: 4) {
  p::first-letter {
     -webkit-initial-letter: 4;
     initial-letter: 4;
     color: #FE742F;
     font-weight: bold;
     margin-right: 0.5em;
  }
}
</code></pre>
<p>Notice, you do need to test a full string with both the property and value. This confused me at first. Why am I testing <code>initial-letter: 4</code> ? Is the value of 4 important? What if I put 17? Does it need to match the value that is further down in my code? </p>
<p>The <code>@supports</code> rule tests a string that contains both the property and value because sometimes it’s the property that needs the test, and sometimes it’s the value. For the <code>initial-letter</code> example, it doesn’t really matter what you put for the value. But consider <code>@supports (display: grid)</code> and you’ll see the need for both. Every browser understands <code>display</code>. Only experimental browsers understand <code>display: grid</code> (at the moment). </p>
<p>Back to our example: Currently <code>initial-letter</code> is only supported in Safari 9, and it requires a prefix. So I&#8217;ve written the prefix, making sure to also include the unprefixed version, and I&#8217;ve written the test to look for one or the other. Yes, you can have <code>or</code>, <code>and</code>, and <code>not</code> statements in your Feature Queries.</p>
<p>Here’s the new result. The browsers that understand <code>initial-letter</code> show a giant bolded, orange drop-cap. The other browsers act like the drop cap doesn&#8217;t exist — the same way they would if I’d waited to use this feature until more browsers had support for it. (We are currently implementing Initial Letter in Firefox, by the way.)</p>
<figure>
<img src="https://hacks.mozilla.org/files/2016/08/intial-letter-with-and-without.gif" alt="a before and after comparison " width="1740" height="590" class="alignleft size-full wp-image-30141" /></p>
<figcaption>The screenshot on the left is from Safari 9. All other browsers show the result on the right. You can see this code in action at <a href="http://codepen.io/jensimmons/pen/ONvdYL?editors=1100">codepen.io/jensimmons/pen/ONvdYL</a> </figcaption>
</figure>
<h2>Organizing Your Code</h2>
<p>Now you might be tempted to use this tool to cleanly fork your code into two branches. “Hey browser, if you understand Viewport Units, do this, and if you do not understand them, do this other thing.” That feels nice and tidy. </p>
<pre><code>@supports (height: 100vh) {
  // my layout that uses viewport height
}
@supports not (height: 100vh) {
  // the alternative layout for older browsers
}
// WE MIGHT WISH. BUT THIS IS BAD CODE.
</code></pre>
<p>This is not a good idea — at least not yet. Do you see the problem? </p>
<p>Well, not all browsers support Feature Queries. And the browsers that do not understand <code>@supports</code> will skip over both blocks of code. That’s probably bad.</p>
<p>Does this mean we can’t use Feature Queries until 100% of browsers support them? Nope. We can, and we should use Feature Queries today. Simply do not write your code like the last example.</p>
<p>How do we do this right? Well, in much the same way we used Media Queries before they were 100% supported. And well, actually it’s easier to use Feature Queries in this transitional period than it was to use Media Queries. You just have to be smart about it. </p>
<p>You want to structure your code knowing that the oldest browsers won’t support Feature Queries or the feature you are testing for. I’ll show you how.</p>
<p>(Of course, sometime in the far future, once 100% of the browsers have Feature Queries, we can make heavier use of <code>@supports not</code> and organize our code in that way. But it’ll be many years until we get there.)</p>
<h2>Support for Feature Queries</h2>
<p>So how far back are Feature Queries supported? </p>
<p>Well <code>@supports</code> has worked in Firefox, Chrome, and Opera since mid&#8211;2013. It also works in every version of Edge. Safari shipped it in Fall 2015, in Safari 9. Feature Queries are not supported in any version of Internet Explorer, Opera Mini, Blackberry Browser, or UC Browser. </p>
<figure>
<a href="http://caniuse.com/#feat=css-featurequeries"><img src="https://hacks.mozilla.org/files/2016/08/Can-I-Use-Feature-Queries.gif" alt="a screenshot from Can I Use showing support for Feature Queries" width="1098" height="794" class="alignleft size-full wp-image-30142" /></a></p>
<figcaption>Looking up support for <a href="http://caniuse.com/#feat=css-featurequeries">Feature Queries on Can I Use</a></figcaption>
</figure>
<p>You might think the fact Internet Explorer doesn’t have support for Feature Queries is a big problem. Actually, it’s usually not. I’ll show you why in a moment. I believe the biggest hurdle is Safari 8. We need to keep an eye out for what happens there. </p>
<p>Let’s look at another example. Say we have some layout code we want to apply that requires using <code>object-fit: cover</code> in order to work properly. For the browsers that don’t understand <code>object-fit</code>, we want to apply different layout CSS.</p>
<figure>
<a href="http://caniuse.com/#feat=object-fit"><img src="https://hacks.mozilla.org/files/2016/08/Can-I-Use-Object-Fit.gif" alt="a screenshot from Can I Use showing support for Object-fit" width="1098" height="895" class="alignleft size-full wp-image-30138" /></a></p>
<figcaption>Looking up support for <a href="http://caniuse.com/#feat=object-fit">Object Fit on Can I Use</a></figcaption>
</figure>
<p>So let’s write:</p>
<pre><code>div {
  width: 300px;
  background: yellow;
  // some complex code for a fallback layout
}
@supports (object-fit: cover) {
  img {
    object-fit: cover;
  }
  div {
    width: auto;
    background: green;
   // some other complex code for the fancy new layout
  }
}
</code></pre>
<p>So what happens? Feature Queries is either supported or not, and the new feature <code>object-fit: cover</code> is either supported or not. Combine those, and we get four possibilities:</p>
<table>
<thead>
<tr>
<th>Feature Query Support?</th>
<th>Feature support?</th>
<th>What Happens?</th>
<th>Is This What We Want?</th>
</tr>
</thead>
<tbody>
<tr>
<td>Supports Feature Queries</td>
<td>Supports the feature in question</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Supports Feature Queries</td>
<td>Does not support the feature</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Does not support Feature Queries</td>
<td>Does not support the feature</td>
<td></td>
<td></td>
</tr>
<tr>
<td>Does not support Feature Queries</td>
<td>Supports the feature in question</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<h3>Situation 1: Browsers that support Feature Queries, and support the feature in question</h3>
<p>Firefox, Chrome, Opera, and Safari 9 all support <code>object-fit</code> and support <code>@supports</code>, so this test will run just fine, and the code inside this block will be applied. Our image will be cropped using <code>object-fit: cover</code>, and our <code>div</code> background will be green. </p>
<h3>Situation 2: Browsers that support Feature Queries, and do not support the feature in question</h3>
<p>Edge does not support <code>object-fit</code>, but it does support <code>@supports</code>, so this test will run and fail, preventing the code block from being applied. The image will not have <code>object-fit</code> applied, and the <code>div</code> will have a yellow background. </p>
<p>This is what we want.</p>
<h3>Situation 3: Browsers that do not support Feature Queries, and do not support the feature in question</h3>
<p>This is where our classic nemesis Internet Explorer appears. IE does not understand <code>@supports</code> and it does not understand <code>object-fit</code>. You might think this means we can’t use a Feature Query — but that’s not true. </p>
<p>Think about the result we want. We want IE to skip over this entire block of code. And that’s exactly what will happen. Why? Because when it reaches <code>@supports</code>, it doesn’t recognize the syntax, and it skips to the end. </p>
<p>It might be skipping the code “for the wrong reasons” — it skips over the code because it doesn’t understand <code>@supports</code>, instead of because it doesn’t understand <code>object-fit</code> — but who cares! We still get exactly the result we want. </p>
<p>This same thing happens with the Blackberry Browser and UC Browser for Android. They don’t understand <code>object-fit</code>, nor <code>@supports</code>, so we are all set. It works out great.</p>
<p>The bottom line — anytime you use a Feature Query in a browser that does not support Feature Queries, it’s fine as long as that browser also does not support the feature you are testing. </p>
<p>Think through the logic of your code. Ask yourself, what happens when the browser skips over this code? If that’s what you want, you are all set.</p>
<h3>Situation 4: Browsers that support do not Feature Queries, yet do support the feature in question</h3>
<p>The problem is this fourth combination — when the test proposed by a Feature Query doesn’t run, but the browser does support that feature and should run that code. </p>
<p>For example, <code>object-fit</code> is supported by Safari 7.1 (on Mac) and 8 (Mac and iOS) — but neither browser supports Feature Queries. The same is true for Opera Mini — it will support <code>object-fit</code> but not <code>@supports</code>. </p>
<p>What happens? Those browsers get to this block of code, and instead of using the code, applying <code>object-fit:cover</code> to the image and turning the background color of the <code>div</code> green, it skips the whole block of code, leaving yellow as the background color. </p>
<p>And this is not really what we want. </p>
<table>
<thead>
<tr>
<th>Feature Query Support?</th>
<th>Feature support?</th>
<th>What Happens?</th>
<th>Is This What We Want?</th>
</tr>
</thead>
<tbody>
<tr>
<td>Supports Feature Queries</td>
<td>Supports the feature in question</td>
<td>CSS is applied</td>
<td>Yes</td>
</tr>
<tr>
<td>Supports Feature Queries</td>
<td>Does not support the feature</td>
<td>CSS is not applied</td>
<td>Yes</td>
</tr>
<tr>
<td>Does not support Feature Queries</td>
<td>Does not support the feature</td>
<td>CSS is not applied</td>
<td>Yes</td>
</tr>
<tr>
<td>Does not support Feature Queries</td>
<td>Supports the feature in question</td>
<td>CSS is not applied</td>
<td>No, likely not.</td>
</tr>
</tbody>
</table>
<p>Of course, it depends on the particular use case. Perhaps this is a result we can live with. The older browser gets an experience planned for older browsers. The web page still works. </p>
<p>But much of the time, we will want that browser to be able to use any feature that it does support. This is why Safari 8 is likely the biggest problem when it comes to Feature Queries, not Internet Explorer. There are many newer properties that Safari 8 does support — like Flexbox. You probably don’t want to block Safari 8 from these properties. That’s why I rarely use <code>@supports</code> with Flexbox, or when I have, I’ve written at least three forks in my code, one with a <code>not</code>. (Which gets complicated fast, so I’m not even going to try to explain it here.) </p>
<p>If you are using a feature that has better support in older browsers than Feature Queries, then think through all of the combinations as you write your code. Be sure not to exclude browsers from getting something you want them to get.</p>
<p>Meanwhile, it’s easy to use <code>@supports</code> with the newest CSS features — CSS Grid for example, and Initial Letter. No browser will ever support CSS Grid without supporting Feature Queries. We don’t have to worry about our fourth, problematic combination with the newest features, which makes Feature Queries incredibly useful as we go forward.</p>
<p>All of this means that while IE11 will likely be around for many years to come, we can use Feature Queries liberally with the newest advances in CSS.</p>
<h2>Best Practices</h2>
<p>So now we realize why we can’t write our code like this: </p>
<pre><code>@supports not (display: grid) {
    // code for older browsers
    // DO NOT COPY THIS EXAMPLE
}
@supports (display: grid) {
    // code for newer browsers
    // DID I SAY THIS IS REALLY BAD?
}
</code></pre>
<p>If we do, we’ll stop the older browsers from getting the code they need.</p>
<p>Instead, structure your code like this:</p>
<pre><code>// fallback code for older browsers

@supports (display: grid) {
    // code for newer browsers
    // including overrides of the code above, if needed
}
</code></pre>
<p>This is exactly the strategy we applied to using Media Queries when supporting old versions of IE. This strategy is what gave rise to the phrase “mobile first”. </p>
<p>I expect CSS Grid to land in browsers in 2017, and I bet we will use Feature Queries quite a lot when implementing future layouts. It’s going to be much less of a hassle, and much faster, than involving JavaScript. And <code>@supports</code> will let us doing interesting and complex things for browsers that support CSS Grid, while providing layout options for the browser that don’t. </p>
<p>Feature Queries have been around since mid&#8211;2013. With the imminent release of Safari 10, I believe it&#8217;s past time for us to add <code>@supports</code> to our toolbox.</p>
]]></content>
			<link rel="replies" type="text/html" href="https://hacks.mozilla.org/2016/08/using-feature-queries-in-css/#comments" thr:count="16"/>
		<link rel="replies" type="application/atom+xml" href="https://hacks.mozilla.org/2016/08/using-feature-queries-in-css/feed/atom/" thr:count="16"/>
		<thr:total>16</thr:total>
		</entry>
		<entry>
		<author>
			<name>Soledad Penadés</name>
						<uri>http://soledadpenades.com</uri>
					</author>
		<title type="html"><![CDATA[What&#8217;s new in Web Audio?]]></title>
		<link rel="alternate" type="text/html" href="https://hacks.mozilla.org/2016/08/whats-new-in-web-audio-2/" />
		<id>https://hacks.mozilla.org/?p=30133</id>
		<updated>2016-08-15T15:21:40Z</updated>
		<published>2016-08-15T14:59:34Z</published>
		<category scheme="https://hacks.mozilla.org" term="Audio" /><category scheme="https://hacks.mozilla.org" term="Featured Article" /><category scheme="https://hacks.mozilla.org" term="Web APIs" />		<summary type="html"><![CDATA[The Web Audio API is still under development, which means there are new methods and properties being added, renamed, shuffled around or simply removed! In this article, we look at what’s happened since our last update in early 2015, both in the Web Audio specification and in Firefox’s implementation. The demos all work in Firefox [&#8230;]]]></summary>
		<content type="html" xml:base="https://hacks.mozilla.org/2016/08/whats-new-in-web-audio-2/"><![CDATA[<p>The <a href="https://webaudio.github.io/web-audio-api/">Web Audio API</a> is still under development, which means there are new methods and properties being added, renamed, shuffled around or simply removed!</p>
<p>In this article, we look at what’s happened since our <a href="https://hacks.mozilla.org/2015/02/whats-new-in-web-audio/">last update</a> in early 2015, both in the Web Audio specification and in Firefox’s implementation. The demos all work in <a href="https://nightly.mozilla.org/" target="_blank">Firefox Nightly</a>, but some of the latest changes might not be present in Firefox release or Developer Edition yet.</p>
<h1>API changes</h1>
<h2>Breaking change</h2>
<p>The reduction attribute in <tt>DynamicsCompressorNode</tt> is now a <tt>float</tt> instead of an <tt>AudioParam</tt>. You can read the value with <tt>compressor.reduction</tt> instead of <tt>compressor.reduction.value</tt>.</p>
<p>This value shows the amount of gain reduction that the compressor is applying to the signal, and it had been read-only anyway, so it makes sense to have it as a <tt>float</tt> and not an <tt>AudioParam</tt> (since no changes can be scheduled).</p>
<p>To detect whether the browser your code is running on supports the <tt>AudioParam</tt> or <tt>float</tt> data type, you can check for the existence of the <tt>.value</tt> attribute on <tt>reduction</tt>:</p>
<pre><code class="js">if(compressor.reduction.value !== undefined) {
  // old style
} else {
  // new style
}
</code></pre>
<p>Take a look at <a href="https://mozdevs.github.io/WebAudio-examples/DynamicsCompressor">this example</a> where the <tt>reduction</tt> attribute is accessed while a drum loop is playing. Notice how the value changes to react to the loudness in the track, and how we’re detecting which API version the browser supports before reading the attribute <tt>value</tt>.</p>
<h2>New properties and methods</h2>
<h3>New life cycle management methods in <tt>AudioContext</tt></h3>
<p>With <tt>AudioContext</tt>s being rather expensive, three new methods have been added: <tt>suspend()</tt>, <tt>resume()</tt> and <tt>close()</tt>.</p>
<p>These allow developers to suspend the processing for some time until it is needed again, and to free some resources with <tt>close()</tt> when the <tt>AudioContext</tt> isn’t required anymore.</p>
<p>Essentially, when an <tt>AudioContext</tt> is suspended, no sounds will be played, and when it resumes, it will continue playing where it left off. The <a href="https://webaudio.github.io/web-audio-api/#widl-BaseAudioContext-suspend-Promise-void">description for <tt>suspend()</tt></a> in the specification has all the details.</p>
<p><a href="https://mozdevs.github.io/WebAudio-examples/AudioContext">This example</a> demonstrates the usage of these methods.</p>
<h3>Precise <tt>AudioNode</tt> <tt>disconnect()</tt> methods</h3>
<p>In the past, you could not disconnect nodes selectively: if you ran <tt>disconnect()</tt> on a given node, it would disconnect it from all other nodes.</p>
<p>Thankfully, the <tt>disconnect()</tt> method can now be overloaded to increase the type of disconnections you can perform:</p>
<ul>
<li><tt>disconnect()</tt> &#8211; disconnects a node from every node (this is the existing function)</li>
<li><tt>disconnect(outputNumber)</tt> &#8211; disconnects all connections from the node’s <tt>outputNumber</tt> channel</li>
<li><tt>disconnect(anotherNode)</tt> &#8211; disconnects all connections to <tt>anotherNode</tt></li>
<li><tt>disconnect(anotherNode, outputNumber)</tt> &#8211; disconnects all connections from <tt>outputNumber</tt> channel from node <tt>anotherNode</tt></li>
<li><tt>disconnect(anotherNode, outputNumber, inputNumber)</tt> &#8211; disconnects connections to <tt>anotherNode</tt> from <tt>outputNumber</tt> into <tt>inputNumber</tt> channels</li>
<li><tt>disconnect(audioParam)</tt> &#8211; disconnects connections from this node to <tt>audioParam</tt></li>
<li><tt>disconnect(audioParam, outputNumber)</tt> &#8211; disconnects connections from this node’s <tt>outputNumber</tt> channel to <tt>audioParam</tt></li>
</ul>
<p>I strongly recommend you read <a href="https://webaudio.github.io/web-audio-api/#methods-3">the specification for <tt>AudioNode</tt></a> to understand all the details on the effects of these disconnections. You can also read <a href="https://github.com/WebAudio/web-audio-api/issues/6">the original discussion</a> to find out about the motivation for this change.</p>
<h3>New length attribute in <tt>OfflineAudioContext</tt></h3>
<p>This new attribute reflects the value that was passed to the constructor when the <tt>OfflineAudioContext</tt> was initialised, so developers don’t have to keep track of it on a separate variable:</p>
<pre><code lang="js">var oac = new OfflineAudioContext(1, 1000, 44100);
console.log(oac.length);
>&gt; 1000
</code></pre>
<p>Here’s <a href="https://mozdevs.github.io/WebAudio-examples/OfflineAudioContext/">an example</a> that demonstrates using that attribute and also rendering a sound wave with a gain envelope.</p>
<h3>New <tt>detune</tt> attribute in <tt>AudioBufferSourceNode</tt></h3>
<p>This is similar to the <tt>detune</tt> attribute in <tt>OscillatorNode</tt>s, but can now be used for fine-tuning samples with more accuracy than just using the existing <tt>playbackRate</tt> property.</p>
<h3>New <tt>AudioParam</tt>-typed position and orientation attributes in <tt>PannerNode</tt></h3>
<p>These new attributes are <tt>AudioParam</tt>s, which means you can use automation to modify them instead of continuously calling the <tt>setPosition()</tt> or <tt>setOrientation()</tt> methods in a loop.</p>
<p>The <tt>StereoPannerNode</tt> <tt>pan</tt> attribute was already an <tt>AudioParam</tt>, so all the nodes that let you pan sounds in space also allow you to automate their spatial properties. Great stuff for modular synthesis!</p>
<p>That said, we still lack the ability to automate the position and orientation properties in <tt>AudioListener</tt>, which means that if you want to update these periodically you have to use <tt>setPosition()</tt> and <tt>setOrientation()</tt> methods on the <tt>AudioListener</tt> for now. (Bug #<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1283029">1283029</a> tracks this).</p>
<h3>Passing values to set initial parameters for <tt>PeriodicWave</tt> instances</h3>
<p>You can now pass an options object when creating instances of <tt>PeriodicWave</tt>:</p>
<pre><code lang="js">var wave = audioContext.createPeriodicWave(real, imag, { disableNormalization: false });
</code></pre>
<p>Compare with the previous syntax:</p>
<pre><code lang="js">var wave = audioContext.createPeriodicWave(real, imag);
wave.disableNormalization = false;
</code></pre>
<p>In the future, all node creation methods will allow developers to pass objects to set their initial parameters, and will also be <em>constructible</em>, so we&#8217;ll be able to do things such as <tt>new GainNode(anAudioContext, {gain: 0.5});</tt>. This will make Web Audio code way more succinct than it actually can be when it comes to initialising nodes. Less code to maintain is always good news!</p>
<h2>New node: <tt>IIRFilterNode</tt></h2>
<p><a href="https://rtoy.github.io/webaudio-hacks/more/filter-design/filter-design.html"><img src="https://hacks.mozilla.org/files/2016/08/iirfilter.png" alt="Building an IIRFilter with Digital Filter Design" /></a></p>
<p>If <tt>BiquadFilterNode</tt> is not enough for your needs, <tt>IIRFilterNode</tt> will allow you to build your own custom filter.</p>
<p>You can create instances calling the <tt>createIIRFilter()</tt> function on an <tt>AudioContext</tt>, and passing in two arrays of coefficients representing the <tt>feedforward</tt> and <tt>feedback</tt> values that define the filter:</p>
<pre><code lang="js">var customFilter = audioContext.createIIRFilter([ 0.1, 0.2, ...], [0.4, 0.3, ...]);
</code></pre>
<p>This type of filter node is not automatable, which means that once created, you cannot change its parameters. If you want to use automation, you’ll have to keep using the existing <tt>BiquadFilter</tt> nodes, and alter their <tt>Q</tt>, <tt>detune</tt>, <tt>frequency</tt> and <tt>gain</tt> attributes which are all <tt>AudioParams</tt>.</p>
<p>The spec has more data on <a href="https://webaudio.github.io/web-audio-api/#the-iirfilternode-interface">these differences</a>, and you can use the <a href="https://rtoy.github.io/webaudio-hacks/more/filter-design/filter-design.html">Digital Filter Design</a> resource to design and visualise filters and get ready-to-use Web Audio code with prepopulated <tt>feedforward</tt> and <tt>feedback</tt> arrays.</p>
<h2>Chaining methods</h2>
<p>Some more “syntactic sugar” to improve developers’ ergonomics:</p>
<p>The <tt>connect()</tt> methods return the node they connect to, so you can chain multiple nodes faster. Compare:</p>
<p>Before:</p>
<pre><code lang="js">node0.connect(node1);
node1.connect(node2);
node2.connect(node3);
</code></pre>
<p>After:</p>
<pre><code>node0.connect(node1).connect(node2).connect(node3);</code></pre>
<p>And the <tt>AudioParam</tt> automation methods can be chained as well, as each method returns the object it was called on. For example, you could use it to define envelopes faster:</p>
<p>Before:</p>
<pre><code lang="js">gain.setValueAtTime(0, ac.currentTime);
gain.linearRampToValueAtTime(1, ac.currentTime + attackTime);
</code></pre>
<p>After:</p>
<pre><code lang="js">gain.setValueAtTime(0, ac.currentTime)
  .linearRampToValueAtTime(1, ac.currentTime + attackTime);</code></pre>
<h2>Coming up in the future</h2>
<p>The Web Audio Working Group is almost finished writing the specification for <tt>AudioWorklet</tt>s, which is the new name for <tt>AudioWorker</tt>s. These will replace the <tt>ScriptProcessorNode</tt>, which also lets you write your own nodes, but runs on the UI thread, so it’s not the best idea performance-wise.</p>
<p><a href="https://github.com/WebAudio/web-audio-api/pull/869">The pull request defining <tt>AudioWorklet</tt>s</a> and associated objects on the specification must be merged first, and once that’s done vendors can start implementing support for <tt>AudioWorklet</tt>s on their browsers.</p>
<h1>Firefox changes: performance and debugging improvements</h1>
<p>Three hard-working engineers (Karl Tomlinson, Daniel Minor and Paul Adenot) spent at least six months improving the performance of Web Audio in Firefox. What this means, in practical terms, is that audio code now takes less time to run and it’s faster than or as fast as Chrome is. The only exception is when working with <tt>AudioParam</tt>s, where Firefox performance is not as good&#8230; <em>yet</em>.</p>
<p>Similarly, <tt>ScriptProcessorNode</tt>s are now less prone to introduce delay if the main thread is <i>very</i> busy. This is great for applications such as console emulators: low latency means a more faithful emulation, which in turns makes for lots of fun playing games!</p>
<p>Going even deeper, assembly level optimisations for computing DSP kernels have been introduced. These take advantage of <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SIMD" target="_blank">SIMD</a> instructions on ARM and x86 to compute multiple values in parallel, for simple features such as panning, adjusting gain, etc. This means faster and more efficient code, which uses less battery—especially important on mobile devices.</p>
<p>Additionally, cross-origin errors involving <tt>MediaElement</tt> nodes will now be reported to the developer tools console, instead of silently failing. This will help developers identify the exact issue, instead of wondering why are they getting only silence.</p>
<p>There were many more fixed bugs—probably too many to list here! But have a look at <a href="https://bugzilla.mozilla.org/buglist.cgi?resolution=FIXED&amp;query_format=advanced&amp;component=Web%20Audio&amp;product=Core">the bug list</a> if you’re really curious.</p>
]]></content>
		</entry>
		<entry>
		<author>
			<name>Nicolas Chevobbe</name>
						<uri>http://nicolaschevobbe.com/</uri>
					</author>
		<title type="html"><![CDATA[Developer Edition 50: Console, Memory Tool,  Net Monitor and more]]></title>
		<link rel="alternate" type="text/html" href="https://hacks.mozilla.org/2016/08/developer-edition-50-console-memory-tool-net-monitor-and-more/" />
		<id>https://hacks.mozilla.org/?p=30098</id>
		<updated>2016-08-09T16:00:02Z</updated>
		<published>2016-08-09T15:34:59Z</published>
		<category scheme="https://hacks.mozilla.org" term="Developer Tools" /><category scheme="https://hacks.mozilla.org" term="Featured Article" /><category scheme="https://hacks.mozilla.org" term="Firefox Development Highlights" />		<summary type="html"><![CDATA[Firefox Developer Edition 50 is here. It has numerous improvements that will help you work with script-initiated network requests, tweak indexedDB data, and much more. It also introduces something special we’ve all been really wanting for a while, so let’s get right to it: Console A long awaited feature is finally coming to the dev [&#8230;]]]></summary>
		<content type="html" xml:base="https://hacks.mozilla.org/2016/08/developer-edition-50-console-memory-tool-net-monitor-and-more/"><![CDATA[<p><a href="https://www.mozilla.org/en-US/firefox/developer/all/"><strong>Firefox Developer Edition 50</strong></a> is here. It has numerous improvements that will help you work with script-initiated network requests, tweak indexedDB data, and much more. It also introduces something special we’ve all been really wanting for a while, so let’s get right to it:</p>
<h2>Console</h2>
<p>A long awaited feature is finally coming to the dev tools, but we need your help in this final phase of testing. The <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=670002"><strong>source maps</strong></a> feature is currently <em>preffed</em> off by default, as we test before shipping it to everyone.</p>
<p>If you’re curious as to why this has been such a challenging issue, James Long wrote an excellent post on the matter: <a href="http://jlongster.com/On-the-Road-to-Better-Sourcemaps-in-the-Firefox-Developer-Tools">On the Road to Better Sourcemaps in the Firefox Developer Tools</a></p>
<p>Curious how the solution came about? I&#8217;ll paraphrase our own Joe Walker,</p>
<blockquote><p><em>“Interns often don’t have all the background on how difficult bugs are, and sometimes jump into really challenging bugs&#8212;which is to say, yay interns!&nbsp;”</em></p></blockquote>
<p>So, a big thanks to Firefox Developer Tools&#8217; intern <a href="https://github.com/jbhoosreddy">Jaideep Bhoosreddy</a> for figuring it out.</p>
<p>Source maps allow you to compact all your JavaScript files in one script in order to save download time for your users, or to compile from another format (like TypeScript or CoffeeScript) to Javascript, while maintaining a reference to the original files, so it’s not a nightmare to debug.</p>
<p>Source maps were supported in the debugger, but not in the console till now. This meant that any logged message had its location (the file and the line the log was emitted from) point to the compiled JavaScript file, but if said file was long and/or minified, this location info was barely usable.</p>
<p>Those times are over. The console will now show the original source, and not the compiled one anymore. You can view it in action in the gif below, with a CoffeeScript file:</p>
<figure><a href="https://hacks.mozilla.org/files/2016/08/webconsole_sourcemap.gif"><img src="https://hacks.mozilla.org/files/2016/08/webconsole_sourcemap.gif" alt="Gif demonstrating source map support in console with a CoffeeScript file" width="1248" height="725" class="alignnone size-full wp-image-30108" /></a></p>
<figcaption>Source map support in the console</figcaption>
</figure>
<p>Source map support is currently off by default and can be activated through a preference. Because there are various implementations in the wild depending on the tool used to build the source map file, we want to get some initial testing of the different variations. That&#8217;s where you come in.</p>
<p><strong>Here&#8217;s how you can help:</strong></p>
<p>To activate source map support in the console, please set the preference on.</p>
<ul>
<li>Go to <code>about:config</code></li>
<li>Search for <code>devtools.sourcemap.locations.enabled</code></li>
<li>Double-click the line to toggle the value to <code>true</code></li>
<li>Close and re-open the web console</li>
</ul>
<p><a href="https://hacks.mozilla.org/files/2016/08/config_sourcemap.png"><img src="https://hacks.mozilla.org/files/2016/08/config_sourcemap.png" alt="about:config screenshot for enabling source map support" width="1063" height="277" class="alignnone size-full wp-image-30100" srcset="https://hacks.mozilla.org/files/2016/08/config_sourcemap.png 1063w, https://hacks.mozilla.org/files/2016/08/config_sourcemap-250x65.png 250w, https://hacks.mozilla.org/files/2016/08/config_sourcemap-768x200.png 768w, https://hacks.mozilla.org/files/2016/08/config_sourcemap-500x130.png 500w" sizes="(max-width: 1063px) 100vw, 1063px" /></a></p>
<p>If you see anything that looks wrong, shout out to <a href="https://twitter.com/firefoxdevtools">@firefoxdevtools</a> on Twitter or let us know on the <a href="ircs://irc.mozilla.org:6697/">#devtools channel on IRC</a>.</p>
<h3>Network Stack Trace</h3>
<p>In Firefox Developer Edition 50, the console now shows the <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1281732">stack trace that led to a network request in HTTP log message</a>. This is on by default.</p>
<p><a href="https://hacks.mozilla.org/files/2016/08/console_stacktrace.png"><img src="https://hacks.mozilla.org/files/2016/08/console_stacktrace.png" alt="Screenshot of an HTTP log&#039;s stack trace in the console" width="864" height="570" class="alignnone size-full wp-image-30101" srcset="https://hacks.mozilla.org/files/2016/08/console_stacktrace.png 864w, https://hacks.mozilla.org/files/2016/08/console_stacktrace-250x165.png 250w, https://hacks.mozilla.org/files/2016/08/console_stacktrace-768x507.png 768w, https://hacks.mozilla.org/files/2016/08/console_stacktrace-500x330.png 500w" sizes="(max-width: 864px) 100vw, 864px" /></a></p>
<h2>Memory Tool</h2>
<p>The Memory Tool is also now enabled by default. This is a must-have tool for debugging and maintaining top-notch app performance. It helps you to find and fix memory leaks in your application. If you want to learn more about it, check out the <a href="https://developer.mozilla.org/docs/Tools/Memory">article on MDN</a> or go read the Hacks post on <a href="https://hacks.mozilla.org/2015/11/firefoxs-new-memory-tool/">Firefox’s New Memory Tool</a>.</p>
<h2>Network Monitor</h2>
<p>In Firefox 49, the “Cause” column was added. It shows how a given network request is initiated, its type and, if available, the stack trace that led to it. The stack trace bubble <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1280247">now shows the frame asynchronous cause</a> (XHR, Promise, setTimeout, etc.), similar to the debugger stack trace panel.</p>
<p><a href="https://hacks.mozilla.org/files/2016/08/network_stack_async.png"><img src="https://hacks.mozilla.org/files/2016/08/network_stack_async.png" alt="Screenshot of the Network Monitor panel showing a stack trace with an asynchronous cause" width="1063" height="258" class="alignnone size-full wp-image-30106" srcset="https://hacks.mozilla.org/files/2016/08/network_stack_async.png 1063w, https://hacks.mozilla.org/files/2016/08/network_stack_async-250x61.png 250w, https://hacks.mozilla.org/files/2016/08/network_stack_async-768x186.png 768w, https://hacks.mozilla.org/files/2016/08/network_stack_async-500x121.png 500w" sizes="(max-width: 1063px) 100vw, 1063px" /></a></p>
<p>Furthermore, entries <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1282211">can be sorted by their cause by clicking on the column header</a>. This could be helpful to quickly find all the network requests that were initiated by <code>fetch</code> for example.</p>
<h2>JSON Viewer</h2>
<p>The JSON Viewer was refined and shows data in a smarter manner:</p>
<ul>
<li><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1244916">Empty arrays are displayed</a> as <code>[]</code> (was <code>[0]</code>), to match empty object syntax, which is <code>{}</code>.</li>
<li>Colon separators are <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1244919">now also shown for object properties</a>, like the other property types.</li>
</ul>
<h2>Storage Inspector</h2>
<p>Following the global effort by <a href="https://twitter.com/ratcliffe_mike">Mike Ratcliffe</a> and <a href="https://twitter.com/jsnajdr">Jarda Snajdr</a> to improve the Storage Inspector, it is <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1231445">now possible to remove a single indexedDB entry through the context menu</a>.</p>
<p><a href="https://hacks.mozilla.org/files/2016/08/idb_remove_entry.png"><img src="https://hacks.mozilla.org/files/2016/08/idb_remove_entry.png" alt="Screenshot of the context menu to remove an IndexedDB entry in Storage Editor" width="1145" height="208" class="alignnone size-full wp-image-30105" srcset="https://hacks.mozilla.org/files/2016/08/idb_remove_entry.png 1145w, https://hacks.mozilla.org/files/2016/08/idb_remove_entry-250x45.png 250w, https://hacks.mozilla.org/files/2016/08/idb_remove_entry-768x140.png 768w, https://hacks.mozilla.org/files/2016/08/idb_remove_entry-500x91.png 500w" sizes="(max-width: 1145px) 100vw, 1145px" /></a></p>
<h2>about:debugging</h2>
<p>Service Workers are definitely the next big thing in Web development, providing a whole set of tools you can use to build progressive web apps that match native apps in functionality, with offline capabilities and push notifications.<br />
Did you know that you can manage registered Service Workers in the <tt>about:debugging#workers</tt> page? This page <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1188981">now also shows push subscription endpoints</a> and allows you to send a test notification with no more effort than the click of a button.</p>
<p><a href="https://hacks.mozilla.org/files/2016/08/push-service.png"><img src="https://hacks.mozilla.org/files/2016/08/push-service.png" alt="Screenshot of Push subscription endpoints in the about:debugging page" width="2810" height="1702" class="alignnone size-full wp-image-30109" srcset="https://hacks.mozilla.org/files/2016/08/push-service.png 2810w, https://hacks.mozilla.org/files/2016/08/push-service-250x151.png 250w, https://hacks.mozilla.org/files/2016/08/push-service-768x465.png 768w, https://hacks.mozilla.org/files/2016/08/push-service-500x303.png 500w" sizes="(max-width: 2810px) 100vw, 2810px" /></a></p>
<h2>Other Notes</h2>
<p><strong>Icons:</strong> Icons across all the developer tools got even better in Firefox 50. They are <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1260523">now more consistent and look sharp as a knife</a>.</p>
<figure><a href="https://hacks.mozilla.org/files/2016/08/icons_49.png"><img src="https://hacks.mozilla.org/files/2016/08/icons_49.png" alt="Devtools tab icons in Firefox 49" width="1205" height="45" class="size-full wp-image-30102" srcset="https://hacks.mozilla.org/files/2016/08/icons_49.png 1205w, https://hacks.mozilla.org/files/2016/08/icons_49-250x9.png 250w, https://hacks.mozilla.org/files/2016/08/icons_49-768x29.png 768w, https://hacks.mozilla.org/files/2016/08/icons_49-500x19.png 500w" sizes="(max-width: 1205px) 100vw, 1205px" /></a></p>
<figcaption>Tab icons in Firefox 49</figcaption>
</figure>
<figure><a href="https://hacks.mozilla.org/files/2016/08/icons_50.png"><img src="https://hacks.mozilla.org/files/2016/08/icons_50.png" alt="New devtools tab icons in Firefox 50" width="1207" height="45" class="size-full wp-image-30103" srcset="https://hacks.mozilla.org/files/2016/08/icons_50.png 1207w, https://hacks.mozilla.org/files/2016/08/icons_50-250x9.png 250w, https://hacks.mozilla.org/files/2016/08/icons_50-768x29.png 768w, https://hacks.mozilla.org/files/2016/08/icons_50-500x19.png 500w" sizes="(max-width: 1207px) 100vw, 1207px" /></a></p>
<figcaption>New tab icons in Firefox 50</figcaption>
</figure>
<p><strong>WebAssembly:</strong> As Luke Wagner said in a <a href="https://hacks.mozilla.org/2016/03/a-webassembly-milestone/">previous blog post</a>&nbsp;:</p>
<blockquote><p><em>“WebAssembly is an emerging standard whose goal is to define a safe, portable, size- and load-time efficient binary compiler target which offers near-native performance”</em></p></blockquote>
<p>WebAssembly files were already supported in the debugger, and they are <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1280471">now highlighted</a> which make them look much nicer.</p>
<figure><a href="https://hacks.mozilla.org/files/2016/08/wasm.png"><img src="https://hacks.mozilla.org/files/2016/08/wasm.png" alt="Screenshot of WebAssembly file syntax highlighting in debugger" width="1408" height="545" class="alignnone size-full wp-image-30107" srcset="https://hacks.mozilla.org/files/2016/08/wasm.png 1408w, https://hacks.mozilla.org/files/2016/08/wasm-250x97.png 250w, https://hacks.mozilla.org/files/2016/08/wasm-768x297.png 768w, https://hacks.mozilla.org/files/2016/08/wasm-500x194.png 500w" sizes="(max-width: 1408px) 100vw, 1408px" /></a></p>
<figcaption>WebAssembly file syntax highlighting</figcaption>
</figure>
<p>And to wrap up, a minor but useful change: <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1221545">the Style Editor can now be disabled</a> to save some space if you don’t use it.</p>
<p>With that, we’ve completed the overview of Developer Edition 50. Download <a href="https://www.mozilla.org/en-US/firefox/developer/">the latest update</a> now and let us know what you think. One last thing, though. A lot of the improvements we covered in this post were made possible by awesome contributors. Big thanks to all of you.</p>
<p>The dev tools are written using standard HTML, Javascript and CSS, so if you have any front-end development experience, you can contribute too. If you want to help the dev tools to get even better, you can find easy bugs to start with in <a href="http://firefox-dev.tools/">http://firefox-dev.tools/</a>.  Everyone is welcome!</p>
]]></content>
			<link rel="replies" type="text/html" href="https://hacks.mozilla.org/2016/08/developer-edition-50-console-memory-tool-net-monitor-and-more/#comments" thr:count="2"/>
		<link rel="replies" type="application/atom+xml" href="https://hacks.mozilla.org/2016/08/developer-edition-50-console-memory-tool-net-monitor-and-more/feed/atom/" thr:count="2"/>
		<thr:total>2</thr:total>
		</entry>
		<entry>
		<author>
			<name>Andrzej Mazur</name>
						<uri>http://end3r.com</uri>
					</author>
		<title type="html"><![CDATA[js13kGames: Code golf for game devs]]></title>
		<link rel="alternate" type="text/html" href="https://hacks.mozilla.org/2016/08/js13kgames-code-golf-for-game-devs/" />
		<id>https://hacks.mozilla.org/?p=30069</id>
		<updated>2016-08-08T14:51:43Z</updated>
		<published>2016-08-08T14:51:43Z</published>
		<category scheme="https://hacks.mozilla.org" term="Challenge" /><category scheme="https://hacks.mozilla.org" term="Featured Article" /><category scheme="https://hacks.mozilla.org" term="Games" />		<summary type="html"><![CDATA[How much is 13 kB? These days a couple of kilobytes seem like a drop in the ocean. Rewind back to the dawn of video game history, however, and you&#8217;ll soon realise that early pioneers had to work with crazy limitations. The beloved Atari 2600, for example, had a measly 128 bytes of RAM with [&#8230;]]]></summary>
		<content type="html" xml:base="https://hacks.mozilla.org/2016/08/js13kgames-code-golf-for-game-devs/"><![CDATA[<p>How much is 13 kB? These days a couple of kilobytes seem like a drop in the ocean. Rewind back to the dawn of video game history, however, and you&#8217;ll soon realise that early pioneers had to work with crazy limitations.</p>
<p>The beloved <a href="https://en.wikipedia.org/wiki/Atari_2600">Atari 2600</a>, for example, had a measly 128 bytes of RAM with cartridges supplying an additional 4 kilobytes. As the saying goes: <strong>constraints inspire creativity</strong>. The annual js13kGames competition channels creativity by challenging aspiring game developers to create a game using just 13,312 bytes, zipped.</p>
<h2>A coding competition for HTML5 game developers</h2>
<p><a href="http://js13kgames.com">Js13kGames</a> is an annual online JavaScript competition for HTML5 game developers that began in 2012. The fun part is the file-size limit, set to 13 kilobytes. Participants have a whole month (August 13th &#8211; September 13th) to build a game on the given theme &#8211; in 2015, the theme was <em>Reversed</em>.</p>
<p><img src="https://hacks.mozilla.org/files/2016/07/js13kgames-banner.jpg" alt="js13kgames banner" width="600" height="220" class="alignnone size-full wp-image-30073" srcset="https://hacks.mozilla.org/files/2016/07/js13kgames-banner.jpg 600w, https://hacks.mozilla.org/files/2016/07/js13kgames-banner-250x92.jpg 250w, https://hacks.mozilla.org/files/2016/07/js13kgames-banner-500x183.jpg 500w" sizes="(max-width: 600px) 100vw, 600px" /></p>
<p>Thanks to our friends and sponsors, this competition offers plenty of prizes, includes a panel of expert judges, free t-shirts, and other goodies, shipped worldwide for free. But winning is only one of the benefits of participation. There&#8217;s lots to be gained from being a part of the js13kGames community. People help each other if they&#8217;re stuck on something, share their tools,  workflows, tips, and tricks. Plus, the constraint of a limited time frame helps you finish a game, and trains your skills in the process.</p>
<h2>Last year&#8217;s winners</h2>
<p>Thirteen kilobytes is not enough even for a low resolution image. The small screenshots on the entries pages are usually bigger than the games themselves! And yet, you may be surprised by what can be achieved in such a small size. Take a look at some of last year&#8217;s winners for inspiration:</p>
<ul>
<li><a href="http://js13kgames.com/entries/behind-asteroids-the-dark-side">Behind Asteroids &#8211; The Dark Side</a> by Gaëtan Renaudeau</li>
<li><a href="http://js13kgames.com/entries/road-blocks">Road Blocks</a> by Ash Kyd</li>
<li><a href="http://js13kgames.com/entries/roboflip">RoboFlip</a> by Eoin McGrath</li>
</ul>
<p>Wondering how such features are implemented? I&#8217;ve interviewed the winners, asking them to share some of their secrets to success. They share tooling and techniques for game development with extreme constraints. And if you&#8217;re craving more details: <a href="https://github.com/js13kGames">all games are on GitHub</a>, so you can dig through the source code yourself.</p>
<h2>RoboFlip</h2>
<p><img src="https://hacks.mozilla.org/files/2016/07/roboflip.jpg" alt="RoboFlip" width="400" height="250" class="alignnone size-full wp-image-30075" srcset="https://hacks.mozilla.org/files/2016/07/roboflip.jpg 400w, https://hacks.mozilla.org/files/2016/07/roboflip-250x156.jpg 250w" sizes="(max-width: 400px) 100vw, 400px" /></p>
<p><a href="http://eoinmcg.github.io/" target="_blank">Eoin McGrath</a> describes some aspects of his workflow for RoboFlip:</p>
<p><em>&#8220;The final entries can be zipped. Zip compression works much better on a single file than multiple files, so the best thing to do is inline all images, concatenate files, minify your JavaScript and remove any white space. Thanks to task runners like Grunt and Gulp this process can be largely automated. Check out the <a href="https://github.com/eoinmcg/roboflip/blob/master/gulpfile.js">Gulp file</a> that I used. A simple <code>gulp build</code> command takes care of all the heavy lifting and lets me know how much valuable space I have left.&#8221;</em></p>
<p><img src="https://hacks.mozilla.org/files/2016/07/gulp_build-500x398.png" alt="Gulp build task in action" width="500" height="398" class="alignnone size-large wp-image-30072" srcset="https://hacks.mozilla.org/files/2016/07/gulp_build-500x398.png 500w, https://hacks.mozilla.org/files/2016/07/gulp_build-250x199.png 250w, https://hacks.mozilla.org/files/2016/07/gulp_build.png 657w" sizes="(max-width: 500px) 100vw, 500px" /></p>
<h3>Graphics</h3>
<p><em>&#8220;First off, forget about high resolution sprite sheets with lots of animation frames. Simplicity is the key. A lot can be achieved with procedural generation or SVGs. I personally went for a retro-style pixellated look. First, all images were created at tiny resolutions (from about 6&#215;6 pixels) in GIMP. I then encoded them in <code>base64</code> and used the Canvas API to redraw them at a larger scale.&#8221;</em></p>
<p><img src="https://hacks.mozilla.org/files/2016/07/scaled_sprites.png" alt="Scaled up sprites" width="322" height="191" class="alignnone size-full wp-image-30076" srcset="https://hacks.mozilla.org/files/2016/07/scaled_sprites.png 322w, https://hacks.mozilla.org/files/2016/07/scaled_sprites-250x148.png 250w" sizes="(max-width: 322px) 100vw, 322px" /></p>
<p><em>&#8220;Another handy trick I used was to run all images through a function that replaced non-transparent color values with white.&#8221;</em></p>
<p><img src="https://hacks.mozilla.org/files/2016/07/block_damage.png" alt="Damage frame for crate sprite" width="322" height="170" class="alignnone size-full wp-image-30071" srcset="https://hacks.mozilla.org/files/2016/07/block_damage.png 322w, https://hacks.mozilla.org/files/2016/07/block_damage-250x132.png 250w" sizes="(max-width: 322px) 100vw, 322px" /></p>
<p><em>&#8220;This proved a cheap and effective way to have damage frames available for all sprites.&#8221;</em></p>
<h3>Sound</h3>
<p><em>&#8220;A game with no sound effects is like coffee without the caffeine. Obviously, there is no way you can fit a single <code>.mp3</code> or <code>.ogg</code> file into your game with the given limitations. Thankfully, there is <a href="https://github.com/mneubrand/jsfxr">jsfxr</a>, which is a very nice library you can use to create some 8bit styled beeps.</p>
<p>For the musically inclined you can also have a stab at creating a soundtrack<br />
using the <a href="https://github.com/nicolas-van/sonant-x-live" target="_blank">Sonant-X library</a> &#8211; check out <a href="http://nicolas-van.github.io/sonant-x-live/#N4Igzg9gdg5gMgUyiAXARgEwGYA05owAiAhgC7GoDaoEYAxmgPoR2moCcetDjAJgmxQAGLvSb9SAVygJUIkNyYAPJADc5onqogAbVGgBsaTUwDuxVQgBmEAE4BbDQvoZmrDptcSn3LwOmyKAAsnowqUOrCodp66AAcGKHmljYOTlAQAJZgCIxWxPy2TmqMZOR0ANb6QvIlYJJg5JnI8WhxeCW2CDoIxDn6cW3GICX2faQIRejsiSBWSnmZOhNT8vN5XQCOTutdkFDEUHSBGACsIXML%2FDrEAJ6MpJn2gQZ469d3pfaCaELtl4wAA6HDYIbYoXAA4FQL6CIx4HQ2ZhiUHg%2BSIiB5BZWLZODGo1CQ%2FHEb4cC745LWOyOFCzQFUYyJRk4ZmsnBM9ksznMkSJXAhZn8nCnHCvADsOHapwAung6FRQC1KGggokROqcBqtZqddqNSq9bqjWgsO1DVrpQBfHCKhlYEXmo2O51O43210ms26q02kBKg06z2B90u7Um%2FWqwNBfUh11h01On22lDK2OhuPBiNqjMxh1ur3qpN%2BhnYHNl9MV8tF%2F1YSt18sNi3W5PKjAFxsd%2BvO6sMtCcE3GLsZzCvNAqztVy1FxRuQT%2FGfeKLOHgSAI%2BFHhSLyGcxdc8SmpGnblyz1Dzk%2BL490PxSGR71yb%2B%2BMXdL3yMA%2FU9JZHJ5AqTfScCMESlKQ5RVOgNQdMB9SNMQzTFMBXQ9H0gRYAYaFQaojBjI0%2F7TLM6xWEsKz6G82K4iggyQQCezQIcxz6KcrwAh89yPM8qAEVc3SfCSggYFxQIgjiYKEmRQkwnxqBBESSIziJaIIkihEUeiymqUpmJSUuFIWFSaRLvSKb6typkcuZXIWWyVlmZZsogPKKYtiaeYuW6rnum5IhecGHkij5PnebGbkBWmLLBfaPYpqFeZBX54XxbmvkJclSVxSl6WZSlLlWtOKIsHCJh8AIe7iP4d6vhuailc%2BugAbMM4fgZwxvgVZ6hJeHXlYE57XmE1WVX1L4JEkemHpxeAZNkuT5IUCFYWUxCVNUtTQQ0TQtEE5wikBWFIb0%2FS0mKGASrt2HjHhfaCURyx4ZCKmiUd1G7Ag%2Bz0T1O3vDxbFPC84msbCqAGGsCzQgSKDMesYPaXEzH4vJGkgPiD3gsMyMUadxKkhBcNIk1R54EZlCGsYgpcmTpOcrglN8uTVP2Y51DFtFnmeUEEoxSy7PZaz%2Fnc5zKoc7z2X8xFfNC%2F5wuCxlIsS1FyrRlz3mnEyiveYraAq0r2sBprqsRsr%2Bs6xrWsBurhvG%2BbLKm2rOs2xg8sDuFpMyc7wYu9TWCk17bsqp7g6%2B67TtBiHpxBV6ofh%2BF7SR9HwYx2H4VirlzbLkwbUoKdC4lYNZW3oEV7KANhe1bEbRZyi%2BMTcurgZztb6dTXxX59Xb6Pug0R1eg8JN1XtKTd%2BM1%2FqsmEgWBK2jzBG0DG0o%2F7ShnHHadowXVMmD3dixGXeJCkAc9Cy0QcRyBIYgkA%2BxJz%2Fd9gPoKcG8SeDkOgyC2k9%2FDKK7zpynkY9aPqY9swsY%2FHYLjTEfdIRE0rJTNkNM6YwMsnA%2BmcoFTM1TJLSWMc2ZMjZlHEKrNMF82wXzXBUsEwhUjOQkh6C47kKITrU0jsg5B1OHzXA6tqYsK5tTJhHD2Fcw5kwvhIcyFBxEdw3BGsyFiJoRQyRMdoyOzCkOZRnYU6%2BhnBnXqecaqrgqiXduLUUQviukVPuV5a7uEzl1QQ5jm5rkGg%2BAahihpdzFLYvuswpo%2Flmnhf4JRFrLQgqtLCU84ItGCYweeh12BCBiaPHCJFu4XEIlvKY10KIsP3pE16dFj6cUVixa%2BF8gZXxuPcbSpxhhQ2EhRe%2B0NsYGFAciHgn81KYhRnif%2BikkZIm0m098Y1PyGSoCo7yiDoHjJZAzFBNZYoeiUTLEmCy0ruRzGomg%2BVLEVxXDnEuuiC5FXbiXYxMxTGDIMg1E8mjrFPn2SUpuRzO5lziBcN8HiB7TV%2FHNWkwx%2FGgSWuBaMNQImhPgrSbaFxOjdAOoEGJcL4mr1QGKU6KTbppJ3hjX4INslvTyfEf4X0ykPF%2Bu1QpRLtLSyhDUx6yTn6SQaYBd%2BLTEbIx%2FqjTS4NMa9OxmgMUTS%2B7DEgROMMVMcAClFeK2mkqcBChlMgpyqDArCuVcoxh2ZRkqtUanf0bZNUarrIwther5ntn1YouZ%2BrjXmnWWnU8lEiqN2zi3XO%2FUIg1RfCXMxoRrlN0dRebqT5HlNw9aNFIQz5BeKHt8lUfjgIBPAmhDCZ1QWbW2nPaFC8IRwoiQky6SbUWJPSY9L2WTD7vX0AJUpnxikoE%2BtxclPKsCCTBq08S9SbEcoRo9fpHSO49PaRkjlFLub9oGWGgy8ghWWpMhyampl%2BTTIVUqF0Sr6yrpVfLFdyyPQGGzOu0Zm6yz7o7JrAOSzEpxnNVa69oYU72VsBAUwiAWhMSEMxJAvAAAKZRJgtFrJaIAAAA%3D">this awesome playable example</a>.&#8221;</em> (You may need to hit &#8220;Play Song&#8221; to initiate.)</p>
<h2>Road Blocks</h2>
<p><em>&#8220;One of the things I love about the js13kGames competition is the artificial limitation it places on you in terms of what you can achieve,&#8221;</em> writes <a href="https://github.com/AshKyd" target="_blank">Ash Kyd</a>, a game developer from Australia. </p>
<p><em>&#8220;I find as an indie dev, with more open-ended projects it&#8217;s possible to get bogged down by all the possibilities and end up with nothing to show at the end, whereas setting some hard limits makes you more creative in terms of what you can accomplish.&#8221;</em></p>
<p><img src="https://hacks.mozilla.org/files/2016/07/road-blocks.jpg" alt="Road Blocks" width="400" height="250" class="alignnone size-full wp-image-30074" srcset="https://hacks.mozilla.org/files/2016/07/road-blocks.jpg 400w, https://hacks.mozilla.org/files/2016/07/road-blocks-250x156.jpg 250w" sizes="(max-width: 400px) 100vw, 400px" /></p>
<p><em>&#8220;Thanks to the filesize limitation, Road Blocks is a fundamentally simple game and didn&#8217;t require a massive amount of coding work. As a result, a lot of my time was spent polishing the gameplay and smoothing rough edges during the competition, which resulted in a higher quality product at the end of the month.&#8221;</em></p>
<h2>Behind Asteroids &#8211; The Dark Side</h2>
<p><em>&#8220;Js13kGames is a great opportunity to discover and experiment with cool technologies like WebGL or Web Audio — and improve your skills.  With a 13 kB limit, you can&#8217;t afford to hide behind a framework. Also, obviously, you shouldn&#8217;t use images but try to procedurally generate them. That said, it&#8217;s up to you to find your style and use the tricks that suit you. Don&#8217;t fall into doing all the tricks right away &#8211; prototype first and compress your code at the very end,&#8221;</em> advises veteran game developer and js13kGames winner <a href="https://github.com/gre" target="_blank">Gaëtan Renaudeau</a>. </p>
<p><img src="https://hacks.mozilla.org/files/2016/07/behind-asteroids.jpg" alt="Behind Asteroids" width="400" height="250" class="alignnone size-full wp-image-30070" srcset="https://hacks.mozilla.org/files/2016/07/behind-asteroids.jpg 400w, https://hacks.mozilla.org/files/2016/07/behind-asteroids-250x156.jpg 250w" sizes="(max-width: 400px) 100vw, 400px" /></p>
<p><em>&#8220;One of the interesting tricks I&#8217;ve found to save bytes is to avoid object-oriented style. Instead, I just write functions and <a href="https://github.com/gre/behind-asteroids#i-have-avoided-oo-style-to-functional-style">use Arrays as tuple data type</a> &#8211; I&#8217;ve used this technique in the past for a previous <a href="http://js1k.com/2014-dragons/demo/1790">js1k entry</a>.</em></p>
<p><em>This is the third year I&#8217;ve participated in the js13kGames competition and the third time I&#8217;ve had fun with WebGL. My 2015 submission is a remake of <em>Asteroids</em> where you don&#8217;t actually control the spaceship but you instead send the asteroids. This is my take on the <em>Reversed</em> theme.</em></p>
<p><em>On desktop, the game is implemented by typing &#8211; a letter is displayed on each asteroid and you have to type it at the right moment. On mobile, it simply turns into a touch-enabled game.</em></p>
<p><em>The game is paced with different levels from beginners to more experienced players who control the spaceship which you must destroy with the asteroids. The spaceship controls are driven by an <a href="https://github.com/gre/behind-asteroids/blob/master/src/ai.js">AI algorithm</a>.&#8221;</em></p>
<h3>How the game is rendered</h3>
<p><em>&#8220;The game uses hybrid rendering techniques: it is first rendered on Canvas using basic 2D shapes and is then piped into multiple WebGL post-processing effects.</p>
<p>The 2D Canvas drawing involves circles for particles and bullets, polygons for asteroids and spaceships, and lines for the procedural font as <a href="https://github.com/gre/behind-asteroids/blob/master/src/lib/asteroids.font.js">the path of each letter is hardcoded</a>. Game shapes are drawn exclusively with one of the 3 color channels (red, blue and green) to split objects into different groups that the post-processing can filter &#8211; for instance, bullets are drawn in blue so we can apply specific glare effects for them. This is an interesting technique to optimize and store different things into a single texture as the game is in monochrome.</em></p>
<p><em>The different effects involved in the WebGL post-processing are <a href="https://github.com/gre/behind-asteroids#making-of-the-post-processing-effects-pipeline">detailed in this post-mortem</a>. The important goal of this final step is to graphically reproduce <a href="https://www.youtube.com/watch?v=i-x_gPxqEMw&amp;t=4m14s">the great vector graphics of the original arcade machine</a>.</em></p>
<p><em>A background environment map where you see a player reflecting into the arcade game screen is also added in the background. It is entirely procedurally generated in a <a href="https://developer.mozilla.org/en-US/docs/Games/Techniques/3D_on_the_web/GLSL_Shaders">Fragment Shader</a>.&#8221;</em></p>
<h2>Summary</h2>
<p>You can employ a myriad of approaches to shave precious bytes off your code base. These range from the <a href="http://www.sitepoint.com/shorthand-javascript-techniques/">fairly well known</a> to the <a href="http://codegolf.stackexchange.com/questions/2682/tips-for-golfing-in-javascript">more obscure</a>. There&#8217;s an article on <a href="http://gamedevelopment.tutsplus.com/articles/how-to-minify-your-html5-game-for-the-js13kgames-competition--cms-21883">How to minify your HTML5 game</a> over at Tuts+ Game Development, and you will also find a nicely curated list of tools and other materials at <a href="http://js13kgames.github.io/resources/">js13kGames Resources</a> page.</p>
<p>I hope you&#8217;ve enjoyed this brief tour of js13kGames landscape and some of the winning <a href="https://en.wikipedia.org/wiki/Code_golf" target="_blank">code golf</a> tricks past winners recommend. Tempted to give it a go this year? The 2016 competition starts in just a few days &#8211; on August 13th. <a href="http://2016.js13kgames.com/" target="_blank"><strong>Join us!</strong></a> It&#8217;s not too late to start coding.</p>
]]></content>
		</entry>
		<entry>
		<author>
			<name>Brian Birtles</name>
						<uri>https://birtles.wordpress.com/</uri>
					</author>
		<title type="html"><![CDATA[Animating like you just don&#8217;t care with Element.animate]]></title>
		<link rel="alternate" type="text/html" href="https://hacks.mozilla.org/2016/08/animating-like-you-just-dont-care-with-element-animate/" />
		<id>https://hacks.mozilla.org/?p=30082</id>
		<updated>2016-08-10T02:47:41Z</updated>
		<published>2016-08-03T16:43:24Z</published>
		<category scheme="https://hacks.mozilla.org" term="Animations" /><category scheme="https://hacks.mozilla.org" term="Featured Article" /><category scheme="https://hacks.mozilla.org" term="Firefox" /><category scheme="https://hacks.mozilla.org" term="Performance" /><category scheme="https://hacks.mozilla.org" term="Web APIs" /><category scheme="https://hacks.mozilla.org" term="animation" /><category scheme="https://hacks.mozilla.org" term="css" /><category scheme="https://hacks.mozilla.org" term="JavaScript" /><category scheme="https://hacks.mozilla.org" term="performance" /><category scheme="https://hacks.mozilla.org" term="waapi" />		<summary type="html"><![CDATA[In Firefox 48 we&#8217;re shipping the Element.animate() API — a new way to programmatically animate DOM elements using JavaScript. Let’s pause for a second — “big deal”, you might say, or “what&#8217;s all the fuss about?” After all, there are already plenty of animation libraries to choose from. In this post I want to explain [&#8230;]]]></summary>
		<content type="html" xml:base="https://hacks.mozilla.org/2016/08/animating-like-you-just-dont-care-with-element-animate/"><![CDATA[<p>In <a href="https://developer.mozilla.org/en-US/Firefox/Releases/48" target="_blank">Firefox 48</a> we&#8217;re shipping the <code><a href="https://developer.mozilla.org/docs/Web/API/Element/animate" target="_blank"><b>Element.animate()</b></a></code><b> API</b> — a new way to programmatically animate DOM elements using JavaScript. Let’s pause for a second — “big deal”, you might say, or “what&#8217;s all the fuss about?” After all, there are already plenty of animation libraries to choose from. In this post I want to explain what makes <code>Element.animate()</code> special.</p>
<h2 id="what-a-performance">What a performance</h2>
<p><code>Element.animate()</code> is the first part of the <a href="https://developer.mozilla.org/docs/Web/API/Web_Animations_API" target="_blank"><b>Web Animations API</b></a> that we&#8217;re shipping and, while there are plenty of nice features in the API as a whole, such as better synchronization of animations, combining and morphing animations, extending CSS animations, etc., the biggest benefit of <code>Element.animate()</code> is performance. <em>In some cases,</em> <code>Element.animate()</code> lets you create jank-free animations that are simply impossible to achieve with JavaScript alone.</p>
<p>Don&#8217;t believe me? Have a look at the following demo, which compares best-in-class JavaScript animation on the left, with <code>Element.animate()</code> on the right, whilst periodically running some time-consuming JavaScript to simulate the performance when the browser is busy.</p>
<p><a href="https://people.mozilla.org/~bbirtles/demos/jank-example/jank-example.html"><img class="wp-image-30084 aligncenter" src="https://hacks.mozilla.org/files/2016/08/jank-example-400.gif" alt="Performance of regular JavaScript animation vs Element.animate()" width="600" height="395" /></a>To see for yourself, try <a href="https://people.mozilla.org/~bbirtles/demos/jank-example/jank-example.html"><b>loading the demo</b></a> in the latest release of Firefox or Chrome. Then, you can check out the <a href="https://mozdevs.github.io/Animation-examples/" target="_blank">full collection of demos</a> we&#8217;ve been building!</p>
<p>When it comes to animation performance, there is a lot of conflicting information being passed around. For example, you might have heard amazing (and untrue) claims like, “CSS animations run on the GPU”, and nodded along thinking, “Hmm, not sure what that means but it sounds fast.” So, to understand what makes <code>Element.animate()</code> fast and how to make the most of it, let’s look into what makes animations slow to begin with.</p>
<h2 id="animations-and-layers">Animations are like onions (Or cakes. Or parfait.)</h2>
<p>In order for an animation to appear smooth, we want all the updates needed for each frame of an animation to happen within about 16 milliseconds. That&#8217;s because browsers try to update the screen at the same rate as the refresh rate of the display they’re drawing to, which is usually 60Hz.</p>
<p>On each frame, there are typically two things a browser does that take time: calculating the layout of elements on the page, and drawing those elements. By now, hopefully you&#8217;ve <em>heard</em> the advice, “Don&#8217;t animate properties that update layout.” I am hopeful here — <a href="https://www.chromestatus.com/metrics/css/animated">current usage metrics</a> suggest that web developers are wisely choosing to animate properties like <a href="https://developer.mozilla.org/docs/Web/CSS/transform"><code>transform</code></a> and <a href="https://developer.mozilla.org/docs/Web/CSS/opacity"><code>opacity</code></a> that don’t affect layout whenever they can. (<a href="https://developer.mozilla.org/docs/Web/CSS/color"><code>color</code></a> is another example of a property that doesn&#8217;t require recalculating layout, but we&#8217;ll see in a moment why opacity is better still.)</p>
<p>If we can avoid performing layout calculations on each animation frame, that just leaves drawing the elements. It turns out that programming is not the only job where laziness is a virtue — indeed <a href="http://www.tofugu.com/japan/anime-vs-cartoons/#pull-cels">animators worked out a long time ago</a> that they could avoid drawing a bunch of very similar frames by creating partially transparent cels, moving the cels around on top of the background, and snapshotting the result along the way.</p>
<p><img src="https://hacks.mozilla.org/files/2016/08/pull-cel-example-650.gif" alt="Example of cels used to create animation frames" width="648" height="224" /></p>
<p style="text-align: center;"><em>Example of creating animation frames using cels.</em><br />
<em> (Of course, not everyone uses fancy cels; <a href="https://www.youtube.com/watch?v=xs7WaL44_Iw">some people just cut out Christmas cards</a>.)</em></p>
<p>A few years ago browsers caught on to this “pull cel” trick. Nowadays, if a browser sees that an element is moving around without affecting layout, it will draw two separate layers: the background and the moving element. On each animation frame, it then just needs to re-position these layers and snapshot the result without having to redraw anything. That snapshotting (more technically referred to as <b>compositing</b>) turns out to be something that GPUs are very good at. What&#8217;s more, when they composite, GPUs can apply 3D transforms and opacity fades all without requiring the browser to redraw anything. As a result, if you&#8217;re animating the transform or opacity of an element, the browser can leave most of the work to the GPU and stands a much better chance of making its 16ms deadline.</p>
<p><i>Hint: If you’re familiar with tools like Firefox’s </i><a href="https://developer.mozilla.org/docs/Tools/Paint_Flashing_Tool"><i>Paint Flashing Tool</i></a><i> or Chrome’s </i><a href="https://developer.chrome.com/devtools/docs/rendering-settings"><i>Paint Rectangles</i></a> <i>you’ll notice when layers are being used because you’ll see that even though the element is animating nothing is being painted! To see the actual layers, you can set <code>layers.draw-borders</code> to true in Firefox’s </i><i>about:config</i><i> page, or choose “Show layer borders” in Chrome’s rendering tab.</i></p>
<h2 id="using-will-change">You get a layer, and you get a layer, everyone gets a layer!</h2>
<p>The message is clear — layers are great and you are expecting that surely the browser is going to take full advantage of this amazing invention and arrange your page’s contents like a <a href="http://www.pbs.org/food/fresh-tastes/mille-crepe-cake/" target="_blank">mille crêpe cake</a>. Unfortunately, layers aren&#8217;t free. For a start, they take up a lot more memory since the browser has to remember (and draw) all the parts of the page that would otherwise be overlapped by other elements. Furthermore, if there are too many layers, the browser will spend more time drawing, arranging, and snapshotting them all, and eventually your animation will actually get slower! As a result, a browser only creates layers when it&#8217;s pretty sure they&#8217;re needed — e.g. when an element&#8217;s <code>transform</code> or <code>opacity</code> property is being animated.</p>
<p>Sometimes, however, browsers don&#8217;t know a layer is needed until it’s too late. For example, if you animate an element&#8217;s transform property, up until the moment when you apply the animation, the browser has no premonition that it should create a layer. When you suddenly apply the animation, the browser has a mild panic as it now needs to turn one layer into two, redrawing them both. This takes time, which ultimately interrupts the start of the animation. The polite thing to do (and the best way to ensure your animations start smoothly and on time) is to give the browser some advance notice by setting the <a href="https://developer.mozilla.org/docs/Web/CSS/will-change"><code>will-change</code></a> property on the element you plan to animate.</p>
<p>For example, suppose you have a button that toggles a drop-down menu when clicked, as shown below.</p>
<p><img class="size-full wp-image-30086" src="https://hacks.mozilla.org/files/2016/08/will-change-example.gif" alt="Example of using will-change to prepare a drop-down menu for animation" width="204" height="232" /></p>
<p><a href="https://people.mozilla.org/~bbirtles/demos/will-change-example/will-change-example.html">Live example</a></p>
<p>We could hint to the browser that it should prepare a layer for the menu as follows:</p>
<pre><code class="css">nav {
  transition: transform 0.1s;
  transform-origin: 0% 0%;
  will-change: transform;
}
nav[aria-hidden=true] {
  transform: scaleY(0);
}</code></pre>
<p>But you shouldn’t get too carried away. Like <a href="https://en.wikipedia.org/wiki/The_Boy_Who_Cried_Wolf" target="_blank">the boy who cried wolf</a>, if you decide to <code>will-change</code> all the things, after a while the browser will start to ignore you. You’re better off to only apply <code>will-change</code> to bigger elements that take longer to redraw, and only as needed. The <a href="https://developer.mozilla.org/docs/Tools/Web_Console">Web Console</a> is your friend here, telling you when you&#8217;ve blown your <code>will-change</code> budget, as shown below.</p>
<p><img class="aligncenter size-full wp-image-30091" src="https://hacks.mozilla.org/files/2016/08/will-change-budget-warning-dark.png" alt="Screenshot of the DevTools console showing a will-change over-budget warning." width="1533" height="304" srcset="https://hacks.mozilla.org/files/2016/08/will-change-budget-warning-dark.png 1533w, https://hacks.mozilla.org/files/2016/08/will-change-budget-warning-dark-250x50.png 250w, https://hacks.mozilla.org/files/2016/08/will-change-budget-warning-dark-768x152.png 768w, https://hacks.mozilla.org/files/2016/08/will-change-budget-warning-dark-500x99.png 500w" sizes="(max-width: 1533px) 100vw, 1533px" /></p>
<h2 id="animating-on-the-compositor">Animating like you just don&#8217;t care</h2>
<p>Now that you know all about layers, we can finally get to the part where <code>Element.animate()</code> shines. Putting the pieces together:</p>
<ul>
<li>By animating the right properties, we can avoid redoing layout on each frame.</li>
<li>If we animate the <a href="https://developer.mozilla.org/docs/Web/CSS/opacity"><code>opacity</code></a> or <a href="https://developer.mozilla.org/docs/Web/CSS/transform"><code>transform</code></a> properties, through the magic of layers we can often avoid redrawing them too.</li>
<li>We can use <a href="https://developer.mozilla.org/docs/Web/CSS/will-change"><code>will-change</code></a> to let the browser know to get the layers ready in advance.</li>
</ul>
<p>But there’s a problem. It doesn’t matter how fast we prepare each animation frame if the part of the browser that’s in control is busy tending to other jobs like responding to events or running complicated scripts. We could finish up our animation frame in 5 milliseconds but it won’t matter if the browser then spends 50 milliseconds doing <a href="https://developer.mozilla.org/docs/Tools/Performance/Allocations#Allocations_and_garbage_collection"><b>garbage collection</b></a>. Instead of seeing silky smooth performance our animations will stutter along, destroying the illusion of motion and causing users’ blood pressure to rise.</p>
<p>However, if we have an animation that we know doesn’t change layout and perhaps doesn’t even need redrawing, it should be possible to let someone else take care of adjusting those layers on each frame. As it turns out, browsers already have a process designed precisely for that job — a separate thread or process known as the <b>compositor</b> that specializes in arranging and combining layers. All we need is a way to tell the compositor the whole story of the animation and let it get to work, leaving the main thread — that is, the part of the browser that’s doing everything else to run your app — to forget about animations and get on with life.</p>
<p>This can be achieved by using none other than the long-awaited <a href="https://developer.mozilla.org/docs/Web/API/Element/animate">Element.animate()</a> API! Something like the following code is all you need to create a smooth animation that can run on the compositor:</p>
<pre><code class="js">elem.animate({ transform: [ 'rotate(0deg)', 'rotate(360deg)' ] },
             { duration: 1000, iterations: Infinity });
</code></pre>
<p><img class="aligncenter size-full wp-image-30088" src="https://hacks.mozilla.org/files/2016/08/simple-example-280.gif" alt="Screenshot of the animation produced: a rotating foxkeh" width="280" height="276" /><br />
<a href="https://people.mozilla.org/~bbirtles/demos/simple-example/simple-example.html">Live example</a></p>
<p>By being upfront about what you&#8217;re trying to do, the main thread will thank you by dealing with all your other scripts and event handlers in short order.</p>
<p>Of course, you can get the same effect by using <a href="https://developer.mozilla.org/docs/Web/CSS/CSS_Animations/Using_CSS_animations">CSS Animations</a> and <a href="https://developer.mozilla.org/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions">CSS Transitions</a> — in fact, in browsers that support Web Animations, the same engine is also used to drive CSS Animations and Transitions — but for some applications, script is a better fit.</p>
<h2 id="am-I-doing-it-right">Am I doing it right?</h2>
<p>You&#8217;ve probably noticed that there are a few conditions you need to satisfy to achieve jank-free animations: you need to animate <code>transform</code> or <code>opacity</code> (at least for now), you need a layer, and you need to declare your animation up front. So how do you know if you&#8217;re doing it right?</p>
<p>The animation inspector in Firefox&#8217;s DevTools will give you a handy little lightning bolt indicator for animations running on the compositor. Furthermore, as of <a href="https://developer.mozilla.org/en-US/Firefox/Releases/49">Firefox 49</a>, the animation inspector can often tell you <i>why</i> your animation didn&#8217;t make the cut.</p>
<p><img class="aligncenter size-full wp-image-30090" src="https://hacks.mozilla.org/files/2016/08/compositing-information-2.png" alt="Screenshot showing DevTools Animation inspector reporting why the transform property could not be animated on the compositor." width="1158" height="394" srcset="https://hacks.mozilla.org/files/2016/08/compositing-information-2.png 1158w, https://hacks.mozilla.org/files/2016/08/compositing-information-2-250x85.png 250w, https://hacks.mozilla.org/files/2016/08/compositing-information-2-768x261.png 768w, https://hacks.mozilla.org/files/2016/08/compositing-information-2-500x170.png 500w" sizes="(max-width: 1158px) 100vw, 1158px" /></p>
<p>See the <a href="https://developer.mozilla.org/docs/Tools/Page_Inspector/How_to/Work_with_animations#Further_information_about_animation_compositing">relevant MDN article</a> for more details about how this tool works.</p>
<p><em>(Note that the result is not always correct — there&#8217;s a <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1223204">known bug</a> where animations with a delay sometimes tell you that they&#8217;re not running on the compositor when, in fact, they are. If you suspect DevTools is lying to you, you can always include some long-running JavaScript in the page like in the <a href="https://people.mozilla.org/~bbirtles/demos/jank-example.html">first example</a> in this post. If the animation continues on its merry way you know you&#8217;re doing it right — and, as a bonus, this technique will work in any browser.)</em></p>
<p>Even if your animation doesn’t qualify for running on the compositor, there are still performance advantages to using <code>Element.animate()</code>. For instance, you can avoid reparsing CSS properties on each frame, and allow the browser to apply other little tricks like ignoring animations that are currently offscreen, thereby prolonging battery life. Furthermore, you&#8217;ll be on board for whatever other performance tricks browsers concoct in the future (and there are many more of those coming)!</p>
<h2 id="conclusion">Conclusion</h2>
<p>With the release of <a href="https://developer.mozilla.org/en-US/Firefox/Releases/48">Firefox 48</a>, <code>Element.animate()</code> is implemented in release versions of both Firefox and Chrome. Furthermore, there&#8217;s a <a href="https://github.com/web-animations/web-animations-js">polyfill</a> (you’ll want the <a href="https://github.com/web-animations/web-animations-js/blob/master/web-animations.min.js" target="_blank"><code>web-animations.min.js</code></a> version) that will fall back to using <a href="https://developer.mozilla.org/docs/Web/API/window/requestAnimationFrame"><code>requestAnimationFrame</code></a> for browsers that don&#8217;t yet support <code>Element.animate()</code>. In fact, if you&#8217;re using a framework like Polymer, you might already be using it!</p>
<p>There’s a lot more to look forward to from the <a href="https://developer.mozilla.org/docs/Web/API/Web_Animations_API">Web Animations API</a>, but we hope you enjoy this first installment (<a href="https://mozdevs.github.io/Animation-examples/" target="_blank">demos</a> and all)!</p>
]]></content>
			<link rel="replies" type="text/html" href="https://hacks.mozilla.org/2016/08/animating-like-you-just-dont-care-with-element-animate/#comments" thr:count="9"/>
		<link rel="replies" type="application/atom+xml" href="https://hacks.mozilla.org/2016/08/animating-like-you-just-dont-care-with-element-animate/feed/atom/" thr:count="9"/>
		<thr:total>9</thr:total>
		</entry>
		<entry>
		<author>
			<name>Dave Herman</name>
						<uri>http://calculist.org</uri>
					</author>
		<title type="html"><![CDATA[Shipping Rust in Firefox]]></title>
		<link rel="alternate" type="text/html" href="https://hacks.mozilla.org/2016/07/shipping-rust-in-firefox/" />
		<id>https://hacks.mozilla.org/?p=30049</id>
		<updated>2016-07-12T13:00:04Z</updated>
		<published>2016-07-12T13:00:04Z</published>
		<category scheme="https://hacks.mozilla.org" term="Featured Article" /><category scheme="https://hacks.mozilla.org" term="Research" /><category scheme="https://hacks.mozilla.org" term="Rust" />		<summary type="html"><![CDATA[TL;DR: Starting with Firefox 48, Mozilla is shipping its first production Rust code, with more to come! Mozilla ❤ Rust It&#8217;s hard to believe it&#8217;s been almost seven years since Mozilla Research first began sponsoring the development of Rust, at the time little more than an ambitious research experiment with a small but devoted community. [&#8230;]]]></summary>
		<content type="html" xml:base="https://hacks.mozilla.org/2016/07/shipping-rust-in-firefox/"><![CDATA[<p><strong>TL;DR: Starting with Firefox 48, Mozilla is shipping its first production Rust code, with more to come!</strong></p>
<h2>Mozilla ❤ Rust</h2>
<p>It&#8217;s hard to believe it&#8217;s been almost seven years since Mozilla Research first began sponsoring the development of <a href="https://www.rust-lang.org/en-US/">Rust</a>, at the time little more than an ambitious research experiment with a small but devoted community. Remarkably, despite a long history of inventions and discoveries, Rust&#8217;s key principles have remained constant. The Rust core team&#8217;s original vision—a safe alternative to C++ to make systems programmers more productive, mission-critical software less prone to memory exploits, and parallel algorithms more tractable—has been central to Mozilla’s interest in backing the Rust project and, ultimately, using Rust in production.</p>
<p>An equally promising development has been the fact that Rust&#8217;s safety and modern features are attracting new people to systems programming. For Mozilla, where community-based development is quite literally <a href="https://www.mozilla.org/en-US/mission/">our mission</a>, widening our circle is vital.</p>
<p>So I&#8217;m pleased to mark an important milestone:<strong> with Firefox 48, Mozilla will ship our first Rust component to all desktop platforms</strong>, and with Android support coming soon.</p>
<h2>Building Rust into Mozilla&#8217;s media stack</h2>
<p>One of the first groups at Mozilla to make use of Rust was the Media Playback team. Now, it&#8217;s certainly easy to see that media is at the heart of the modern Web experience. What may be less obvious to the non-paranoid is that every time a browser plays a seemingly innocuous video (say, a <a href="https://www.youtube.com/watch?v=xn54TvpGu7E">chameleon popping bubbles</a>), it&#8217;s reading data delivered in a complex format and created by someone you don&#8217;t know and don&#8217;t trust. And as it turns out, media formats are known to have been used to trick decoders into exposing <a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-3870">nasty security vulnerabilities</a> that exploit memory management bugs in Web browsers&#8217; implementation code.</p>
<p>This makes a <a href="https://air.mozilla.org/guaranteeing-memory-safety-in-rust/">memory-safe programming language</a> like Rust a compelling addition to Mozilla&#8217;s tool-chest for protecting against potentially malicious media content on the Web. For this reason, Ralph Giles and Matthew Gregan built Mozilla&#8217;s <a href="https://github.com/mozilla/mp4parse-rust">first Rust media parser</a>. And I&#8217;m happy to report that their code will be the first Rust component shipping in Firefox. For the Rust community as well, this is a real achievement: <strong>Rust code shipping to hundreds of millions of Firefox users</strong>. Our preliminary measurements show the Rust component performing beautifully and delivering identical results to the original C++ component it&#8217;s replacing—but now implemented in a memory-safe programming language.</p>
<figure class="paragraph" style="margin: 2em 0;">
<a href="https://telemetry.mozilla.org/new-pipeline/dist.html#!cumulative=0&amp;end_date=2016-04-07&amp;keys=__none__!__none__!__none__&amp;max_channel_version=release%252F45&amp;measure=MEDIA_RUST_MP4PARSE_SUCCESS&amp;min_channel_version=null&amp;product=Firefox&amp;sanitize=1&amp;sort_keys=submissions&amp;start_date=2016-03-03&amp;table=0&amp;trim=1&amp;use_submission_date=0"><img class="alignnone wp-image-30056 size-large" src="https://hacks.mozilla.org/files/2016/07/Screen-Shot-2016-07-11-at-3.48.04-PM-500x280.png" alt="Telemetry data for Firefox's first Rust component" srcset="https://hacks.mozilla.org/files/2016/07/Screen-Shot-2016-07-11-at-3.48.04-PM-500x280.png 500w, https://hacks.mozilla.org/files/2016/07/Screen-Shot-2016-07-11-at-3.48.04-PM-250x140.png 250w, https://hacks.mozilla.org/files/2016/07/Screen-Shot-2016-07-11-at-3.48.04-PM-768x430.png 768w, https://hacks.mozilla.org/files/2016/07/Screen-Shot-2016-07-11-at-3.48.04-PM.png 1058w" sizes="(max-width: 500px) 100vw, 500px" /></a></p>
<figcaption>Firefox telemetry data showing zero issues in over a billion uses of the new Rust code.</figcaption>
</figure>
<h2>More to come!</h2>
<p>Many people deserve huge thanks for getting us to this point. Ralph Giles and Matthew Gregan implemented the component, and Nathan Froyd, Nick Nethercote, Ted Mielczarek, Gregory Szorc, and Alex Crichton have been instrumental in integrating Rust into the Firefox build and tooling system and ensuring it can ship on all of our platforms.</p>
<p>Rust itself is the product of a tremendous, vibrant community. None of this work would have been possible without the incredible contributions of <a href="https://github.com/rust-lang/rust/issues">issues</a>, <a href="https://github.com/rust-lang/rfcs">design</a>, <a href="https://github.com/rust-lang/rust">code</a>, and <a href="https://www.rust-lang.org/en-US/contribute.html">so much more</a> of Rustaceans worldwide. As a <a href="http://calculist.org/blog/2015/12/23/neon-node-rust/">Rustacean myself</a>, I’d encourage you to come play with Rust. It’s a great time to <a href="https://doc.rust-lang.org/book/getting-started.html">get started</a>, and increasingly, to <a href="https://wiki.mozilla.org/Oxidation">get involved with a Mozilla project using Rust</a>.</p>
<p>Seeing Rust code ship in production at Mozilla feels like the culmination of a long journey. But this is only the first step for Mozilla. Watch this space!</p>
]]></content>
			<link rel="replies" type="text/html" href="https://hacks.mozilla.org/2016/07/shipping-rust-in-firefox/#comments" thr:count="24"/>
		<link rel="replies" type="application/atom+xml" href="https://hacks.mozilla.org/2016/07/shipping-rust-in-firefox/feed/atom/" thr:count="24"/>
		<thr:total>24</thr:total>
		</entry>
		<entry>
		<author>
			<name>Justin Crawford</name>
						<uri>http://hoosteeno.com</uri>
					</author>
		<title type="html"><![CDATA[Make the Web Work For Everyone]]></title>
		<link rel="alternate" type="text/html" href="https://hacks.mozilla.org/2016/07/make-the-web-work-for-everyone/" />
		<id>https://hacks.mozilla.org/?p=30032</id>
		<updated>2016-07-22T20:21:34Z</updated>
		<published>2016-07-06T12:59:33Z</published>
		<category scheme="https://hacks.mozilla.org" term="Accessibility" /><category scheme="https://hacks.mozilla.org" term="Developer Tools" /><category scheme="https://hacks.mozilla.org" term="Featured Article" /><category scheme="https://hacks.mozilla.org" term="Testing" />		<summary type="html"><![CDATA[Updated 2016/07/22: Commenters found a few data errors (thanks!) which have now been corrected. Millions of websites have compatibility problems on one or more of the major browsers, leading to a poor user experience. The web developer community can fix this. The web has changed immensely in the past 20 years. In 1996 there were [&#8230;]]]></summary>
		<content type="html" xml:base="https://hacks.mozilla.org/2016/07/make-the-web-work-for-everyone/"><![CDATA[<blockquote><p><strong>Updated 2016/07/22: </strong>Commenters found a few data errors (thanks!) which have now been corrected.</p></blockquote>
<p>Millions of websites have compatibility problems on one or more of the major browsers, leading to a poor user experience. The web developer community can fix this.</p>
<p>The web has changed immensely in the past 20 years. In 1996 there were roughly <a href="http://www.mit.edu/people/mkgray/net/web-growth-summary.html">a million websites</a>; now there are <a href="http://www.internetlivestats.com/watch/websites/">more than a billion</a>. Back then there were roughly 50 million internet users; today there are <a href="https://en.wikipedia.org/wiki/List_of_web_browsers">more than 3 billion</a>. We have more content than we ever dreamed was possible. People are enjoying it on <a href="http://press.ihs.com/press-release/technology/over-8-billion-connected-devices-globally-ihs-says">8.1 billion connected devices</a>, including <a href="http://opensignal.com/reports/2015/08/android-fragmentation/">more than 24,000 distinct mobile device types</a>.</p>
<p><a href="https://hacks.mozilla.org/files/2016/06/webcompat_blog_graphics_600x800-01.jpg"><img class="aligncenter wp-image-30036" src="https://hacks.mozilla.org/files/2016/06/webcompat_blog_graphics_600x800-01.jpg" alt="Statistics illustrating explosive growth in the number of sites, users, and devices." width="700" height="934" srcset="https://hacks.mozilla.org/files/2016/06/webcompat_blog_graphics_600x800-01.jpg 1250w, https://hacks.mozilla.org/files/2016/06/webcompat_blog_graphics_600x800-01-250x333.jpg 250w, https://hacks.mozilla.org/files/2016/06/webcompat_blog_graphics_600x800-01-768x1024.jpg 768w, https://hacks.mozilla.org/files/2016/06/webcompat_blog_graphics_600x800-01-500x667.jpg 500w" sizes="(max-width: 700px) 100vw, 700px" /></a></p>
<p>This explosive growth in content, devices and users has made cross browser compatibility even more essential than it was in 1996. Stack Overflow has <a href="http://stackoverflow.com/search?q=cross-browser">almost 55,000 questions that include the string “cross-browser”</a>, and hundreds of thousands of questions about things that work fine in [Browser X]. Any question about how a particular browser handles a particular site is a potential compatibility question.</p>
<p><a href="https://hacks.mozilla.org/files/2016/06/webcompat_blog_graphics_600x800-02.jpg"><img class="aligncenter wp-image-30035" src="https://hacks.mozilla.org/files/2016/06/webcompat_blog_graphics_600x800-02-500x667.jpg" alt="Statistics showing the number of questions on Stack Overflow that relate to cross-browser compatibility." width="700" height="934" srcset="https://hacks.mozilla.org/files/2016/06/webcompat_blog_graphics_600x800-02-500x667.jpg 500w, https://hacks.mozilla.org/files/2016/06/webcompat_blog_graphics_600x800-02-250x333.jpg 250w, https://hacks.mozilla.org/files/2016/06/webcompat_blog_graphics_600x800-02-768x1024.jpg 768w, https://hacks.mozilla.org/files/2016/06/webcompat_blog_graphics_600x800-02.jpg 1250w" sizes="(max-width: 700px) 100vw, 700px" /></a></p>
<p>So yeah, cross-browser compatibility is still a thing. It’s a thing we care about at Mozilla, and we think you should care about it too. Why? Well, <a href="#other_browser">your users probably aren’t on the same browser as you</a>. They have <a href="#accessibility">different abilities and needs</a> than you think. They <a href="#wont_change">won’t change browsers if your site breaks for them</a>. Serving them well is <a href="#craft">one way to demonstrate mastery of your craft</a>. And <a href="#tools">modern tools</a> make it easier than ever.</p>
<p>What causes cross-browser incompatibilities? It’s complex. Here are some of today’s top culprits:</p>
<ul>
<li>Developers who use browser-specific features (e.g. vendor-specific prefixing) to achieve certain effects without fallbacks or polyfills for other browsers.</li>
<li>Browser vendors who rush to implement features developers want before they are standardized.</li>
<li>Browser vendors who are slow to implement standards and fix bugs in their browsers.</li>
<li>Sites that employ user agent sniffing to serve different content to different browsers.</li>
<li>Developers who are over-reliant on a single toolset (which sometimes only reliably supports a single browser) and may miss cross-browser compatibility bugs.</li>
<li>Growth in the industry &#8212; intense demand has encouraged many new web developers to join the field, which means <a href="https://www.developereconomics.com/reports/developer-economics-state-of-developer-nation-q1-2016">developers overall are less experienced on average than they were a few years ago</a>.</li>
</ul>
<p><a href="https://hacks.mozilla.org/files/2016/07/webcompat_blog_graphics_600x800-031.jpg"><img class="aligncenter wp-image-30033" src="https://hacks.mozilla.org/files/2016/07/webcompat_blog_graphics_600x800-031-500x667.jpg" alt="Statistics suggesting that browser implementations, developer experience, and developer browser choice may affect cross-browser compatibility." width="700" height="934" /></a></p>
<p>Some of these challenges have been with us since the early days of the web. But since those days, web development has made great progress. Best practices and modern tools can help us build vibrant experiences on every browser.</p>
<p>So, developers, here are a few things to inspire you to <b>make your next web site work for everyone.</b></p>
<h2 id="other_browser">More people use <em>that other browser</em> than you think</h2>
<p>Many developers believe the browser they use is the only browser that anyone really uses, therefore they should just develop for it. <a href="http://www.w3schools.com/browsers/browsers_stats.asp">By some measures</a>, 70% of web developers use Chrome on the desktop. But only about 50% of web traffic across all device types is on Chrome, and only about 62% of web traffic on the desktop is on Chrome. Building and testing only on Chrome alone ignores <a href="http://gs.statcounter.com/#all-browser-ww-monthly-201506-201606">almost half of global users</a>. (It’s worth pointing out here that <a href="https://www.google.com/url?q=https://www.netmarketshare.com/&#038;sa=D&#038;ust=1469221730309000&#038;usg=AFQjCNHyOWMv5Rjg6AmLwWdoqmwaCq1xiw">different browser share trackers use different methodologies and produce different numbers</a>, and the numbers change quickly and often.)</p>
<p>And browser use varies by geography. Chrome, Firefox and IE/Edge are the top browsers in many locales, but the proportion of users on each varies. German users favor Firefox over Chrome. IE is big in Japan. Quite a few Australians choose Safari. <a href="http://gs.statcounter.com/#browser-VN-monthly-201505-201605">More than 1 in 5 Vietnamese users</a> run a fork of Chromium called Cốc Cốc. Building and testing on just one browser ignores these market differences.</p>
<p>Finally, <a href="https://developer.microsoft.com/en-us/microsoft-edge/platform/catalog/">features present in your browser may not be present in other browsers</a>. Browser vendors implement features on different schedules, so a cool new API in your favorite browser might be missing for a lot of users.</p>
<p>These factors combine in unexpected ways: Choosing an API that isn’t supported in all browsers, testing your site only in one browser, and launching in a market where that browser isn’t dominant could mean excluding substantially more than half of your potential audience. Leaving money on the table. Leaving customers out in the cold. That’s worth making the extra effort to avoid.</p>
<h2 id="accessibility">Compatibility intersects with accessibility</h2>
<p>Building cross-browser compatible web sites means designing and coding for unknown client environments, in order to make content available to the widest possible audience. And that audience undoubtedly includes people with disabilities &#8212; probably more than you think. If your web site works in every browser but falls apart in a screen reader, you’re missing a powerful opportunity.</p>
<p>People with disabilities represent a significant market share. For example, in the U.S. alone, <a href="http://www.interactiveaccessibility.com/accessibility-statistics">there are more visually impaired internet users than all Canadian internet users combined.</a> Modern web features address this audience’s needs; you just have to implement them.</p>
<p>Accessibility techniques don&#8217;t just benefit disabled users either — for example:</p>
<ul>
<li>Pages that are more accessible to screen readers are also more accessible to search engine algorithms. Simple accessibility techniques such as using alt-text on images, using descriptive text in links, using CSS for style only (never for meaning), and using HTML5’s semantic tags improve the overall SEO of a page.</p>
</li>
<li>
<p>Transcripts of video content aren&#8217;t just good for people with auditory impairments — they are also useful for users on mobile devices in low bandwidth areas that can&#8217;t download the video, and people in noisy environments that can&#8217;t hear the video. And more text content means more opportunity for relevant keywords, so again, more SEO.</p>
</li>
</ul>
<h2 id="wont_change">Users won’t switch browsers, they’ll switch sites</h2>
<p>You might think that users will switch browsers to use your site. But many won’t or can’t.</p>
<p>Users have no patience for things that don&#8217;t work, and they&#8217;ll just go to a competitor&#8217;s site instead. Failing at a critical point could turn a potential user away forever. According to <a href="https://content.akamai.com/PG2920-Performance-Matters.html">Akamai</a>,</p>
<ul>
<li>32% of users who encounter a problem on your site are less likely to make online transactions with your company</li>
<li>35% will have a more negative perception of your company</li>
<li>45% are less likely to visit your web site again</li>
<li>And more than 1 in 5 users (22%) will leave for good.</li>
</ul>
<p>What&#8217;s more, many users don&#8217;t know how to install a new browser, or even know what a browser is (many users don&#8217;t know the difference between a browser, a search engine, and a web site).</p>
<p>And even if users know how to install a new browser, and want to, they might not be able to. Many companies mandate which browsers their employees are allowed to use, and many people use public computers in places like libraries.</p>
<p>For example, Microsoft gave a deadline of Jan. 12, 2016 for users to switch to a newer version of the browser, but in March 2016 more than a third of IE users remained on outdated versions that no longer receive security updates. Over the <a href="http://gs.statcounter.com/#desktop-browser_version_partially_combined-ww-monthly-201506-201605-bar">last year</a> (June 2015-May 2016) 2.07% were running IE8, a browser that Microsoft no longer patches; the same goes for more than three-quarters of the 1.59% on IE9 and for virtually all of the 10.95% who ran IE10 (although it should be noted that the usage of these browsers has dropped significantly since March).</p>
<p>Broken web experiences drive users away. If half of your users are on a different browser, and you want to keep them, testing it in that browser is essential.</p>
<p><a href="https://hacks.mozilla.org/files/2016/07/webcompat_blog_graphics_600x800-04.jpg"><img class="aligncenter wp-image-30034" src="https://hacks.mozilla.org/files/2016/07/webcompat_blog_graphics_600x800-04-500x667.jpg" alt="Statistics showing that browser use varies by locale, and that broken web sites drive away users." width="700" height="934" /></a></p>
<h2 id="craft">Compatibility === Craft</h2>
<p>Creating for the web is a skilled discipline, not just a menial task — we all want to take pride in what we do, hone our craft, and demonstrate our mastery of it. This involves:</p>
<ul>
<li>Staying current with the latest technologies, frameworks, and techniques.</li>
<li>Testing carefully and implementing cross browser/platform apps including fallbacks for less capable browsers. Is the experience acceptable?</li>
<li>Making sure your web content is accessible to people with disabilities.</li>
<li>Making sure the general look and user experience of your creations is pleasant and fits in with your/your client&#8217;s brand.</li>
</ul>
<p>So, as a web developer, launched sites are your resumé. A high quality experience is important to your users, your peers and your present and future employers.</p>
<p>But so often, time and business constraints get in the way of such things. You have a hard deadline to hit. Your boss only cares about how the site works on their iPad and hasn&#8217;t heard of accessibility. You don&#8217;t have time to fix that IE bug in this sprint. We do what we can most of the time, rather than what we&#8217;d ideally like to do.</p>
<p>It can be tempting to let cross-browser testing become a corner to be cut when deadlines loom, hoping your chosen framework’s testing will cover you. But your site isn’t purely framework code, and you’re responsible for all of it. Testing to ensure that your code works well across browsers is a corner that you should strongly resist cutting.</p>
<p>Writing code that stands up over time; delivering information to anyone who requests it; creating rich functionality that works for all: These are the noble goals of a great web developer.</p>
<h2 id="tools">Modern tools can help</h2>
<p>Now you know a few great reasons to make your web site more compatible. But how do you do it?</p>
<ul>
<li>If you’ve found a bug on <i>someone else’s site</i>, file it at <a href="http://webcompat.com?utm_source=hacks&amp;utm_medium=blog-post&amp;utm_campaign=compat">webcompat.com</a>! If you’re debugging your own site, read on.</li>
<li>Try your site in different browsers and move through it as a user might. Watch the developer console in the browser’s developer tools for errors (most modern desktop browsers have incredibly capable developer tools built in to help you debug issues, even on mobile):
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Tools?utm_source=hacks&amp;utm_medium=blog-post&amp;utm_campaign=compat">Firefox dev tools</a></li>
<li><a href="https://developers.google.com/web/tools/chrome-devtools/">Chrome dev tools</a></li>
<li><a href="https://developer.microsoft.com/en-us/microsoft-edge/platform/documentation/f12-devtools-guide/">IE/Edge dev tools</a></li>
<li><a href="https://developer.apple.com/safari/tools/">Safari dev tools</a></li>
<li><a href="http://www.opera.com/developer">Opera dev tools</a></li>
</ul>
</li>
<li>If you find a bug that is not in your site, maybe it’s a bug in the browser! Open a bug report so your browser’s developers can fix it:
<ul>
<li><a href="https://bugzilla.mozilla.org/">Mozilla Bugzilla</a></li>
<li><a href="https://bugs.chromium.org/p/chromium/issues/list">Chrome issue tracker</a></li>
<li><a href="https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/">IE/Edge</a></li>
<li><a href="https://webkit.org/reporting-bugs/">Safari/Webkit</a></li>
<li><a href="https://bugs.opera.com/wizard/desktop">Opera</a></li>
</ul>
</li>
<li>Integrate a popular cross-browser-testing tool into your deploy process, to make cross-browser testing automatic:
<ul>
<li><a href="https://www.browserstack.com/">BrowserStack</a></li>
<li><a href="https://saucelabs.com/">Sauce Labs</a></li>
<li><a href="https://www.browserling.com/">Browserling</a></li>
</ul>
</li>
<li>Understand which browsers have implemented web features before using them on your site:
<ul>
<li><a href="http://caniuse.com/">Caniuse</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web?utm_source=hacks&amp;utm_medium=blog-post&amp;utm_campaign=compat">MDN</a>’s compatibility tables</li>
<li><a href="http://kangax.github.io/compat-table">Kangax</a>’s ECMAScript compatibility tables</li>
</ul>
</li>
<li>Explore coding tools that can improve cross-browser compatibility:
<ul>
<li><a href="https://github.com/postcss/autoprefixer">Autoprefixer</a>, <a href="http://cssnext.io/">CSSNext</a>, <a href="https://github.com/jonathantneal/oldie">Oldie</a> and other <a href="https://github.com/postcss/postcss#readme">PostCSS</a> plugins make it possible to write pure, modern CSS that does not break in older browsers</li>
<li><a href="https://modernizr.com/">Modernizr</a> helps you identify and handle implementation differences between browsers (use this instead of UA sniffing)</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@supports?utm_source=hacks&amp;utm_medium=blog-post&amp;utm_campaign=compat">@supports</a> helps you build <a href="https://developer.mozilla.org/en-US/docs/Glossary/Progressive_Enhancement?utm_source=hacks&amp;utm_medium=blog-post&amp;utm_campaign=compat">progressive enhancements</a> into the web experience for more capable browsers</li>
</ul>
</li>
<li>Go deep. Learn about the web’s many features and quirks. The more you know about it the more you will love it:
<ul>
<li><a href="https://developer.mozilla.org/en-US/docs/Web?utm_source=hacks&amp;utm_medium=blog-post&amp;utm_campaign=compat">MDN</a></li>
<li><a href="https://developers.google.com/web/">Google Developers</a></li>
<li><a href="https://www.w3.org/developers/">W3C Developers</a></li>
</ul>
</li>
</ul>
<h2>Delivering on the web’s promise</h2>
<p>The promise of the web is that anyone can access content using any browser on any device. Woven into this promise are some of humanity’s greatest aspirations &#8212; self-determination, freedom, education and discovery. Designing for cross-browser compatibility opens your work up to the largest possible audience and market, advances your mastery of the craft, and is a noble end in itself.</p>
<p>While the modern device and browser landscape presents many challenges, modern tools offer many solutions. More than 3 billion people are out there looking for your site &#8212; is it ready for them?</p>
]]></content>
			<link rel="replies" type="text/html" href="https://hacks.mozilla.org/2016/07/make-the-web-work-for-everyone/#comments" thr:count="37"/>
		<link rel="replies" type="application/atom+xml" href="https://hacks.mozilla.org/2016/07/make-the-web-work-for-everyone/feed/atom/" thr:count="37"/>
		<thr:total>37</thr:total>
		</entry>
		<entry>
		<author>
			<name>Belén Albeza</name>
						<uri>http://www.belenalbeza.com</uri>
					</author>
		<title type="html"><![CDATA[Web Font preloading for HTML5 games]]></title>
		<link rel="alternate" type="text/html" href="https://hacks.mozilla.org/2016/06/webfont-preloading-for-html5-games/" />
		<id>https://hacks.mozilla.org/?p=30025</id>
		<updated>2016-06-29T12:22:18Z</updated>
		<published>2016-06-29T12:22:01Z</published>
		<category scheme="https://hacks.mozilla.org" term="CSS" /><category scheme="https://hacks.mozilla.org" term="Featured Article" /><category scheme="https://hacks.mozilla.org" term="Games" /><category scheme="https://hacks.mozilla.org" term="JavaScript" /><category scheme="https://hacks.mozilla.org" term="font preloading" /><category scheme="https://hacks.mozilla.org" term="fonts" /><category scheme="https://hacks.mozilla.org" term="gamedev" />		<summary type="html"><![CDATA[In game development there are two methods of rendering text: via bitmap fonts and vector fonts. Bitmap fonts are essentially a sprite sheet image that contains all the characters of a given font. The sprite sheet uses a regular font file (traditionally .ttf). How does this apply to game development on the Web and HTML5 [&#8230;]]]></summary>
		<content type="html" xml:base="https://hacks.mozilla.org/2016/06/webfont-preloading-for-html5-games/"><![CDATA[<p>In game development there are two methods of <strong>rendering text</strong>: via <em>bitmap fonts</em> and <em>vector fonts</em>. Bitmap fonts are essentially a <em>sprite sheet</em> image that contains all the characters of a given font. The sprite sheet uses a regular font file (traditionally <code>.ttf</code>). How does this apply to game development on the Web and HTML5 games?</p>
<p>You can use bitmap fonts as usual – they are just images, after all, and most HTML 5 game engines or libraries support them straight away. For vector font rendering, we can rely on any font that is accessible via CSS: this includes both system fonts already present in the player&#8217;s computer (like Arial or Times New Roman), or Web Fonts, which can be downloaded on the fly, if they are not already present in the system.</p>
<p>However, not all game engines or frameworks include mechanisms to load these fonts as regular assets –like images or audio files – and rely on them being present already. This can lead to quirks in which the game tries to render a text in a font that is not loaded yet… Instead, the player will get no text, or text rendered with an alternate or default font.</p>
<p>In this article we will explore some techniques for preloading Web Fonts into our games, and describe how to integrate them with a popular 2D game framework: <a href="http://phaser.io" target="_blank">Phaser</a>.</p>
<h2>How Web Font loading works</h2>
<p>There are two ways of loading a Web Font: via CSS (using <a href="https://developer.mozilla.org/en/docs/Web/CSS/@font-face" target="_blank">@font-face</a>) or via JavaScript (using the <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Font_Loading_API" target="_blank">Font Loading API</a>). The CSS solution has been available for some time; while the JavaScript API is not widely adopted yet by browsers. If you want to release a game these days, we recommend the CSS method for its portability.</p>
<h3>Declaration with @font-face</h3>
<p>This is simply a declaration in your CSS code that allows you to set up a font family and point to the places where it can be fetched. In this snippet we declare a font family named Amatica SC, and assume that we have a TTF file as an asset.</p>
<pre><code class="lang-css">@font-face {
  font-family: 'Amatica SC';
  font-style: normal;
  font-weight: 400;
  src: local('Amatica SC'),
       local('AmaticaSC-Regular'),
       url(fonts/amaticasc-regular.ttf) format('truetype');
}
</code></pre>
<p>Note: In addition to pointing to specific files, we can also point to font names that might be installed in the user&#8217;s computer (in this case, Amatica SC or AmaticaSC-Regular).</p>
<h3>Actual loading</h3>
<p>It&#8217;s important to remember that <strong>declaring a font family via CSS does not load the font</strong>! The font is loaded only when the browser detects for the first time that it&#8217;s going to be used.</p>
<p>This can cause a visual glitch: either the text is rendered with a default font and then changes to the Web Font (this is known as FOUT or Flash Of Unstyled Text); or the text isn&#8217;t rendered at all and remains invisible until the font becomes available. In websites this is usually not a big deal, but in games (Canvas/WebGL) <strong>we don&#8217;t get the automatic browser re-rendering when the font is available</strong>! So if we try to render the text and the font is not available, it <em>is</em> a big deal.</p>
<p>So we need to actually download the font before we try to use it in our game…</p>
<h2>How to force a Web Font download</h2>
<h3>The CSS Font Loading API</h3>
<p>The <a href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Font_Loading_API" target="_blank">JavaScript API</a> does force a font to load. As of today, it only works on Firefox, Chrome, and Opera (you can check for the most up-to-date font-loading support information in <a href="http://caniuse.com/#feat=font-loading" target="_blank">caniuse.com</a>).</p>
<p><iframe src="//jsfiddle.net/sfounz3f/6/embedded/" width="100%" height="300" frameborder="0" allowfullscreen="allowfullscreen"></iframe></p>
<p>Note that when using <code>FontFaceSet</code>, you still need to declare your fonts somewhere –in this case, with <code>@font-face</code> in the CSS.</p>
<h3>Typekit&#8217;s Web Font Loader</h3>
<p>This is an open-source loader developed by TypeKit and Google – you can check out <a href="https://github.com/typekit/webfontloader" target="_blank">the Web Font Loader repository in Github</a>. It can load self-hosted fonts, as well as fonts from popular repositories like Typekit, Google Fonts, etc.</p>
<p>In the following snippet we will load Amatica SC directly from Google Fonts and specify a callback function – to render text in a 2D canvas– that will be invoked when the fonts are loaded and ready for use:</p>
<p><iframe src="//jsfiddle.net/gtgkojjy/3/embedded/js,html,result/" width="100%" height="300" frameborder="0" allowfullscreen="allowfullscreen"></iframe></p>
<h3>FontFace Observer library</h3>
<p>FontFace Observer is <a href="https://github.com/bramstein/fontfaceobserver" target="_blank">another open-source loader</a> that doesn&#8217;t contain ad-hoc code for common font repositories. If you are self-hosting your fonts, this might be a better choice than Typekit&#8217;s since it is a lighter-weight file size.</p>
<p>This library uses a <code>Promise</code> interface – but don&#8217;t worry, there&#8217;s a version with a polyfill if you need to support older browsers. Here again, you need to declare your fonts via CSS as well, so the library knows where to go to fetch them:</p>
<p><iframe src="//jsfiddle.net/aknx2rnt/2/embedded/" width="100%" height="300" frameborder="0" allowfullscreen="allowfullscreen"></iframe></p>
<h2>Integrating font loading in Phaser</h2>
<p>Now that we&#8217;ve seen how to load Web Fonts in HTML5, let&#8217;s discuss how to integrate these fonts with a game engine. The process will differ from one engine or framework to another. I have picked Phaser as an example, since it&#8217;s widely used for 2D game development. You can take a look at some online examples here:</p>
<p><iframe src="//mozdevs.github.io/webfont-preloading/" width="665" height="500" frameborder="0" style="overflow:auto"></iframe></p>
<p>And, of course, there is <a href="https://github.com/mozdevs/webfont-preloading">the Github repository</a> with full source code, so you can take a closer look at what I&#8217;ve built.</p>
<p>Here&#8217;s how Phaser works: the game is divided in game states, each of which executes a sequence of phases. The most important phases are: <code>init</code>, <code>preload</code>, <code>create</code>, <code>render</code>, and <code>update</code>. The preload phase is where we must load game assets like images, sounds, etc. but unfortunately Phaser&#8217;s Loader does not provide a method for font preloading.</p>
<p>There are several ways to bypass or work around this issue:</p>
<h3>Delaying font rendering</h3>
<p>We can use the Font Loading API or a library to force a font download in the preload phase. However, this creates a problem. Phaser&#8217;s Loader doesn&#8217;t allow us to indicate it when all loading is completed. This means we can&#8217;t pause the Loader and prevent the preload phase from ending so that we can switch to create – this is where we would want to set up our game world.</p>
<p>A first approach would be to delay the text rendering until the font is loaded. After all, we have a callback available in the promise, right?</p>
<pre><code class="lang-javascript">function preload() {
  // load other assets here
  // ...

  let font = new FontFaceObserver('Amatica SC');
  font.load().then(function () {
    game.add.text(0, 0, 'Lorem ipsum', {
      font: '12px Amatica SC',
      fill: '#fff'
    });
  }
}
</code></pre>
<p>There is a problem with this approach: What happens if the callback is invoked before the <code>preload</code> phase has ended? Our Phaser.Text object would then be wiped out once we switch to <code>create</code>.</p>
<p>What we can do is guard the creation of the text under two flags: one that indicates that the font has loaded, and a second one that indicates that the create phase has started:</p>
<pre><code class="lang-javascript">var fontLoaded = false;
var gameCreated = false;

function createText() {
  if (!fontLoaded || !gameCreated) return;
  game.add.text(0, 0, 'Lorem ipsum', {
      font: '12px Amatica SC',
      fill: '#fff'
  });
}

function preload() {
  let font = new FontFaceObserver('Amatica SC');
  font.load().then(function () {
    fontLoaded = true;
    createText();
  });
}

function create() {
  gameCreated = true;
  createText();
}
</code></pre>
<p>The main disadvantage of this method is that we completely ignore Phaser&#8217;s Loader. Since this doesn&#8217;t queue the font as an asset, the game will <em>start</em> and the fonts will not be there &#8212; this will probably cause a blinking effect or a glitch. Another problem is that the &#8220;Loading&#8221; screen or bar will ignore fonts, will display as if 100% loaded, and switch to the game even though our font assets still haven&#8217;t loaded.</p>
<h3>Using a custom loader</h3>
<p>What if we could modify Phaser&#8217;s Loader and add it to whatever we need? We can! We can extend Phaser.Loader and add a method to the prototype that will queue an asset – a <em>web font</em>! The problem is that we need to modify one internal (meant for private use) Phaser.Loader method, <code>loadFile</code>, so we can tell the Loader how to load the font, and when loading has been finished.</p>
<pre><code class="lang-javascript">// We create our own custom loader class extending Phaser.Loader.
// This new loader will support web fonts
function CustomLoader(game) {
    Phaser.Loader.call(this, game);
}

CustomLoader.prototype = Object.create(Phaser.Loader.prototype);
CustomLoader.prototype.constructor = CustomLoader;

// new method to load web fonts
// this follows the structure of all of the file assets loading methods
CustomLoader.prototype.webfont = function (key, fontName, overwrite) {
    if (typeof overwrite === 'undefined') { overwrite = false; }

    // here fontName will be stored in file's `url` property
    // after being added to the file list
    this.addToFileList('webfont', key, fontName);
    return this;
};

CustomLoader.prototype.loadFile = function (file) {
    Phaser.Loader.prototype.loadFile.call(this, file);

    // we need to call asyncComplete once the file has loaded
    if (file.type === 'webfont') {
        var _this = this;
        // note: file.url contains font name
        var font = new FontFaceObserver(file.url);
        font.load(null, 10000).then(function () {
            _this.asyncComplete(file);
        }, function ()  {
            _this.asyncComplete(file, 'Error loading font ' + file.url);
        });
    }
};
</code></pre>
<p>Once this code is in place, we need to create an instance of it and swap it into <code>game.load</code>. This swapping must take place as soon as possible: in the <code>init</code> phase of the first game state executed.</p>
<pre><code class="lang-javascript">
function init() {
    // swap Phaser.Loader for our custom one
    game.load = new CustomLoader(game);
}

function preload() {
    // now we can load our font like a normal asset
    game.load.webfont('fancy', 'Amatica SC');
}
</code></pre>
<p>The advantage of this method is real integration with the loader, so if we have a loading bar it will not finish until the font has been completely downloaded (or timed out). The disadvantage, of course, is that we are overriding an internal method of Phaser, so we have no guarantee that our code will continue to work in future versions of the framework.</p>
<h3>A silly workaround…</h3>
<p>A method that I have been using in game jams is to not start the game <em>at all</em> until I know that the font is ready. Since most browsers won&#8217;t render a text until the web font has been loaded, I just create a splash screen with a Play button that uses the web font… This way I know that the button will be visible once that font has loaded, so it&#8217;s safe to start the game then.</p>
<p>The obvious disadvantage is that we are not starting to load assets until the player presses that button… But it does work and it is very simple to implement. Here&#8217;s an screenshot example of one of these splash screens, created with regular HTML5 DOM elements and CSS animations:</p>
<p><img class="aligncenter size-full wp-image-30028" src="https://hacks.mozilla.org/files/2016/06/Screen-Shot-2016-06-28-at-15.23.24.png" alt="Screen Shot 2016-06-28 at 15.23.24" width="450" height="246" srcset="https://hacks.mozilla.org/files/2016/06/Screen-Shot-2016-06-28-at-15.23.24.png 450w, https://hacks.mozilla.org/files/2016/06/Screen-Shot-2016-06-28-at-15.23.24-250x137.png 250w" sizes="(max-width: 450px) 100vw, 450px" /></p>
<hr / class="dino">
<p>And there you have it, Web Font rendering in HTML5 games! In the future, once the Font Loading API is more mature, HTML5 game engines and frameworks will start to integrate it in their code, and hopefully we won&#8217;t have to do this ourselves or find a usable workaround.</p>
<p>Until then, happy coding! :)</p>
]]></content>
			<link rel="replies" type="text/html" href="https://hacks.mozilla.org/2016/06/webfont-preloading-for-html5-games/#comments" thr:count="1"/>
		<link rel="replies" type="application/atom+xml" href="https://hacks.mozilla.org/2016/06/webfont-preloading-for-html5-games/feed/atom/" thr:count="1"/>
		<thr:total>1</thr:total>
		</entry>
		<entry>
		<author>
			<name>Chris Mills</name>
					</author>
		<title type="html"><![CDATA[Learning to code for the Web: The MDN Learning Area welcomes you!]]></title>
		<link rel="alternate" type="text/html" href="https://hacks.mozilla.org/2016/06/learning-to-code-for-the-web-the-mdn-learning-area-welcomes-you/" />
		<id>https://hacks.mozilla.org/?p=30018</id>
		<updated>2016-06-17T10:22:04Z</updated>
		<published>2016-06-17T09:32:51Z</published>
		<category scheme="https://hacks.mozilla.org" term="CSS" /><category scheme="https://hacks.mozilla.org" term="HTML5" /><category scheme="https://hacks.mozilla.org" term="Learning" /><category scheme="https://hacks.mozilla.org" term="MDN" /><category scheme="https://hacks.mozilla.org" term="Web Developers" /><category scheme="https://hacks.mozilla.org" term="education" /><category scheme="https://hacks.mozilla.org" term="learning area" /><category scheme="https://hacks.mozilla.org" term="mdn" />		<summary type="html"><![CDATA[As an aspiring developer or as a teacher looking to extend your knowledge of code, it can be difficult to know where to start with web technologies. In this blog post, we’ll be discussing why we have created the Mozilla Developer Network Learning Area to help solve common learning challenges and get you up and [&#8230;]]]></summary>
		<content type="html" xml:base="https://hacks.mozilla.org/2016/06/learning-to-code-for-the-web-the-mdn-learning-area-welcomes-you/"><![CDATA[<p>As an aspiring developer or as a teacher looking to extend your knowledge of code, it can be difficult to know where to start with web technologies. In this blog post, we’ll be discussing why we have created the <a href="https://developer.mozilla.org/en-US/Learn">Mozilla Developer Network Learning Area</a> to help solve common learning challenges and get you up and running with web development.</p>
<p>The aim of the Learning Area is to take beginners from “beginner to comfortable”, with HTML, CSS, JavaScript, and other core web technologies. Once you&#8217;ve worked through the early parts of the Learning Area, you should have enough knowledge to be comfortable using the rest of the Mozilla Developer Network (MDN) site. In addition to helping you on your learning journey, we anticipate that the Learning Area will extend our readership and contributor base, and in turn improve SEO on the site.</p>
<h2>Why the new Learning Area?</h2>
<p>Learning the craft of web design and development (and all the related disciplines) has been a hot topic for as long as we can remember. Many web education initiatives and resources have been worked on over the years, and many related problems have largely moved sideways rather than forwards:</p>
<ol>
<li>There is a shortage of skilled junior web creators coming into the industry.</li>
<li>Traditional educational establishments often tend to be behind the curve in understanding the industry they are sending their students into. It is challenging to keep courses relevant and up-to-date. Many private code schools have appeared to fill the gap left by a lack of quality learning materials for beginning web builders.</li>
<li>The above point is perhaps not so surprising when you consider that industry standards and best practices evolve very quickly, and also that <em>web</em> is somewhat of an orphan — it doesn’t comfortably fit into traditional technical departments like Comp Sci/Software engineering (too many “soft“ skills), or design departments (too much code and scary stuff like that). As a field of study, web is very much a hybrid.</li>
</ol>
<p><strong>Note</strong>: Many of the effective web-related courses at universities that “get it” are found in tangentially-related departments such as business and journalism. And speaking of the “bad” courses, teachers generally do care and want to improve things, but don’t necessarily have the knowledge or time to rapidly iterate on curricula. And the curricula are often slow to change because of bureaucracy.</p>
<p>It is MDN’s wish to help with such problems by producing a reliable set of beginner’s learning materials that will help students understand the technologies the web is built on, and how to use them to create accessible cross browser websites/apps. The MDN Learning Area aims to:</p>
<ul>
<li>Make effective material whether the students are self-directed learners, or part of a structured class.</li>
<li>Structure the material loosely so teachers can use it as supplementary material on top of their own curricula, or a basis for new curricula. Too much structure makes the material limiting and not very flexible.</li>
<li>Cover a core minimum viable product consisting of HTML, CSS, JavaScript, accessibility, and server-side development basic concepts. The material should represent a standard for web learning and best practices. If enough educators use it, it will provide much needed consistency.</li>
<li>Regularly review the material to keep it up to date.</li>
</ul>
<p><strong>Note</strong>: We also want to make the publishing license permissive enough so that others can easily grab and use it in any way they desire. The default MDN license is cc-by-sa, which means that others can republish the content as they wish, as long as they credit the original author, and any modifications are published under the same license as the original, thereby keeping it freely available. The associated code examples are licensed under CC0 (anyone can use them as they wish without restriction).</p>
<h2>Where are we now?</h2>
<p>While we continue to add to the MDN Learning Area content, there is already plenty of modules that beginners can start to use. For a start, we have a complete beginner’s learning module for those who have no previous experience and only basic computer literacy: <a href="https://developer.mozilla.org/en-US/Learn/Getting_started_with_the_web">Getting started with the Web</a>.</p>
<p>The next stage in the learning journey is our Introduction modules, which teach the real basics of the technologies. So far, we have one for both HTML and CSS:</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/Learn/HTML/Introduction_to_HTML">Introduction to HTML</a></li>
<li><a href="https://developer.mozilla.org/en-US/Learn/CSS/Introduction_to_CSS">Introduction to CSS</a></li>
</ul>
<p>To follow on from those, we have some further HTML and CSS modules, which aim to go beyond the basics and expand on some of the core applications of those technologies:</p>
<ul>
<li><a href="https://developer.mozilla.org/en-US/Learn/HTML/Multimedia_and_embedding">HTML Multimedia and embedding</a></li>
<li><a href="https://developer.mozilla.org/en-US/Learn/CSS/Styling_text">Styling text</a></li>
<li><a href="https://developer.mozilla.org/en-US/Learn/CSS/Styling_boxes">Styling boxes</a></li>
</ul>
<p>Each module has a number of articles to discuss the important features and techniques involved, plus an assessment or two at the end to test your comprehension of those teachings.</p>
<p>We also have a well-developed <a href="https://developer.mozilla.org/en-US/docs/Glossary">Glossary</a>, and a list of standalone articles that address specific topics related to the main Learning Area thread, but don’t directly fit into the core learning stream: see <a href="https://developer.mozilla.org/en-US/Learn/Common_questions">common questions</a>.</p>
<h2>Future work</h2>
<p>The latest module being written is <a href="https://developer.mozilla.org/en-US/Learn/CSS/CSS_layout">CSS layout</a>, which will cover all of the layout techniques currently in use on the modern web, with advice on what they should be used for.</p>
<p>Future content for the site will also include modules on core server side development basics, accessibility and JavaScript, and possibly other topics too.</p>
<h2>Call to action</h2>
<p>We are always looking for contributors to help write and otherwise shape the material — with such a small team of writers, it takes time to create all the material. Having extra people on board also helps with making for a better rounded set of ideas, feedback and styles.</p>
<p>If you feel inspired and want to help with contributing to the LA — whether with writing, translating existing material, tech review, copy editing, or other kinds of feedback, please get in touch! We are always happy to curate outside contributions, as it leads to a more rounded, collaborative effort.</p>
<p>We are also really interested in hearing from potential students and teachers that might want to work through the materials and provide feedback on their learning experience.</p>
<p>The best ways to get in touch with us are:</p>
<ul>
<li>Through the #mdn channel on <a href="https://wiki.mozilla.org/IRC">Mozilla IRC</a></li>
<li>Or through the <a href="https://lists.mozilla.org/listinfo/dev-mdc">dev-mdc mailing list</a></li>
</ul>
<p>We also have a <a href="https://trello.com/b/LDggrYSV/learning-area-glossary">Trello board</a> that gives an idea of currently available writing projects.</p>
]]></content>
			<link rel="replies" type="text/html" href="https://hacks.mozilla.org/2016/06/learning-to-code-for-the-web-the-mdn-learning-area-welcomes-you/#comments" thr:count="8"/>
		<link rel="replies" type="application/atom+xml" href="https://hacks.mozilla.org/2016/06/learning-to-code-for-the-web-the-mdn-learning-area-welcomes-you/feed/atom/" thr:count="8"/>
		<thr:total>8</thr:total>
		</entry>
		<entry>
		<author>
			<name>Jarda Snajdr</name>
					</author>
		<title type="html"><![CDATA[Developer Edition 49: Network Request Stack Traces and more]]></title>
		<link rel="alternate" type="text/html" href="https://hacks.mozilla.org/2016/06/developer-edition-49-network-request-stack-traces-and-more/" />
		<id>https://hacks.mozilla.org/?p=30002</id>
		<updated>2016-06-17T23:45:29Z</updated>
		<published>2016-06-15T15:31:10Z</published>
		<category scheme="https://hacks.mozilla.org" term="Developer Tools" /><category scheme="https://hacks.mozilla.org" term="Featured Article" /><category scheme="https://hacks.mozilla.org" term="Firefox" /><category scheme="https://hacks.mozilla.org" term="Firefox Aurora" /><category scheme="https://hacks.mozilla.org" term="Firefox Releases" />		<summary type="html"><![CDATA[This week marks the release of Firefox Developer Edition 49! This post covers some of the big changes that landed in this release. Request stack traces in Network Monitor The Network Monitor now has a new “Cause” column that shows how a given network request is initiated. The column shows the type of the request, [&#8230;]]]></summary>
		<content type="html" xml:base="https://hacks.mozilla.org/2016/06/developer-edition-49-network-request-stack-traces-and-more/"><![CDATA[<p>This week marks the release of <a href="https://www.mozilla.org/en-US/firefox/developer/">Firefox Developer Edition 49</a>! This post covers some of the big changes that landed in this release.</p>
<p><b>Request stack traces in Network Monitor</b></p>
<p>The Network Monitor now has a new “Cause” column that shows how a given network request is initiated. The column shows the type of the request, includes a tooltip with the loading document, and, most importantly, if a JavaScript stack trace is available, you can see it in a popup bubble.</p>
<p>The JavaScript stack trace is most interesting for XHR requests, but is available also for any other request that is directly or indirectly initiated by a script, like when a script inserts a <tt>&lt;script&gt;</tt> or <tt>&lt;img&gt;</tt> element into the page.</p>
<p>This feature is useful if you want to figure out why and from where on the page a particular HTTP request is issued. (See bug <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1134073">1134073</a>.)</p>
<p><a href="https://hacks.mozilla.org/files/2016/06/image00.png" target="_blank"><img class="size-full wp-image-30008" src="https://hacks.mozilla.org/files/2016/06/image00-500x218.png" alt="image00" width="500" height="218" srcset="https://hacks.mozilla.org/files/2016/06/image00-500x218.png 500w, https://hacks.mozilla.org/files/2016/06/image00-250x109.png 250w, https://hacks.mozilla.org/files/2016/06/image00-768x335.png 768w, https://hacks.mozilla.org/files/2016/06/image00.png 1158w" sizes="(max-width: 500px) 100vw, 500px" /></a></p>
<p><b>Animation performance info in Inspector</b></p>
<p>You can use the Inspector panel to investigate details of your CSS and DOM animations. In Firefox 49, you can now get detailed performance information for your animations. If an animation property cannot be run on the compositor (i.e., cannot be hardware-accelerated), it is underlined in the expanded animation view, and an associated tooltip explains what’s going on.</p>
<p>In the example below, the transform and width properties cannot be accelerated at the same time. With this new tool in Inspector, you can now spot under-performing animations and learn what changes you need to make to accelerate them.</p>
<p>Read David Baron’s <a href="http://dbaron.org/log/20150916-compositor-animations">blog post</a> if you want to learn more about how animations are optimized in Gecko. (See bug <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1254408">1254408</a> for more detail.)</p>
<p><a href="https://hacks.mozilla.org/files/2016/06/image05.png" target="_blank"><img class="aligncenter wp-image-30013 size-full" src="https://hacks.mozilla.org/files/2016/06/image05-500x90.png" alt="image05" width="500" height="90" srcset="https://hacks.mozilla.org/files/2016/06/image05-500x90.png 500w, https://hacks.mozilla.org/files/2016/06/image05-250x45.png 250w, https://hacks.mozilla.org/files/2016/06/image05.png 636w" sizes="(max-width: 500px) 100vw, 500px" /></a></p>
<p><b>Reorganized context menu in markup view</b></p>
<p>The Inspector has a context menu with many actions, which was becoming long and unwieldy. Contributor Moaaz Sidat reorganized the menu, dividing it into several sub-menus. (See bug <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1211613">1211613</a>.)</p>
<p><a href="https://hacks.mozilla.org/files/2016/06/image03.gif" target="_blank"><img class="aligncenter wp-image-30011 size-full" src="https://hacks.mozilla.org/files/2016/06/image03.gif" alt="image03" width="475" height="450" /></a></p>
<p><b>Other improvements in the Inspector Panel</b></p>
<p>Firefox 49 adds support for <tt>#rrggbbaa</tt> and <tt>#rgba</tt> syntax for color values. The Inspector in developer tools now supports this syntax, too. (See bug <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1271191">1271191</a>.)</p>
<p><a href="https://hacks.mozilla.org/files/2016/06/image07.gif" target="_blank"><img class="aligncenter wp-image-30015 size-full" src="https://hacks.mozilla.org/files/2016/06/image07-500x268.gif" alt="image07" width="500" height="268" srcset="https://hacks.mozilla.org/files/2016/06/image07-500x268.gif 500w, https://hacks.mozilla.org/files/2016/06/image07-250x134.gif 250w, https://hacks.mozilla.org/files/2016/06/image07-768x411.gif 768w" sizes="(max-width: 500px) 100vw, 500px" /></a></p>
<p>In the CSS rule editor, autocomplete now displays more possible properties, in a scrollable list. As a result, it’s much easier to find the value that is relevant to you, or learn about new CSS properties that you were not familar with previously. (See bug <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1260419">1260419</a>.)</p>
<p><a href="https://hacks.mozilla.org/files/2016/06/image06.png" target="_blank"><img class="aligncenter wp-image-30014 size-full" src="https://hacks.mozilla.org/files/2016/06/image06-500x308.png" alt="image06" width="500" height="308" srcset="https://hacks.mozilla.org/files/2016/06/image06-500x308.png 500w, https://hacks.mozilla.org/files/2016/06/image06-250x154.png 250w, https://hacks.mozilla.org/files/2016/06/image06.png 516w" sizes="(max-width: 500px) 100vw, 500px" /></a></p>
<p>In the markup view, <a href="https://www.w3.org/TR/html5/syntax.html#void-elements">self-closing</a> tags like <tt>&lt;br&gt;</tt> are now displayed as <tt>&lt;br&gt;&lt;/br&gt;</tt> only if the doctype is XHTML. For normal HTML, the markup is now displayed in a more accurate and less verbose form. (See bug <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=820926">820926</a>.)</p>
<p><b>Links to MDN reference docs From Console JavaScript errors</b></p>
<p>When you see an unfamiliar error message in the Console, you no longer need to copy the message and search online for documentation. You can simply click on a direct link to the MDN reference page about the error that is a part of the message. Read a <a href="https://hacks.mozilla.org/2016/06/helping-web-developers-with-javascript-errors/" target="_blank">blog post</a> by <a href="https://twitter.com/floscholz">@floscholz</a> and <a href="https://twitter.com/mrrrgn">@mrrrgn</a> to learn more about this feature and how you can contribute to make it better. (See bug <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1179876">1179876</a>.)</p>
<p><a href="https://hacks.mozilla.org/files/2016/06/image01.png" target="_blank"><img class="aligncenter wp-image-30009 size-full" src="https://hacks.mozilla.org/files/2016/06/image01-500x65.png" alt="image01" width="500" height="65" srcset="https://hacks.mozilla.org/files/2016/06/image01-500x65.png 500w, https://hacks.mozilla.org/files/2016/06/image01-250x32.png 250w, https://hacks.mozilla.org/files/2016/06/image01.png 750w" sizes="(max-width: 500px) 100vw, 500px" /></a></p>
<p><b>New color scheme for syntax highlighting</b></p>
<p>We thought our syntax highlighting colors were looking a little dated, so we changed them up in both the light- and dark-themed versions of Developer Edition Firefox. The new colors are optimized for accessibility: they have better contrast and are easier to distinguish in all situations.</p>
<p><a href="https://hacks.mozilla.org/files/2016/06/image04.png" target="_blank"><img class="aligncenter wp-image-30012 size-full" src="https://hacks.mozilla.org/files/2016/06/image04-500x300.png" alt="image04" width="500" height="300" srcset="https://hacks.mozilla.org/files/2016/06/image04-500x300.png 500w, https://hacks.mozilla.org/files/2016/06/image04-250x150.png 250w, https://hacks.mozilla.org/files/2016/06/image04.png 580w" sizes="(max-width: 500px) 100vw, 500px" /></a></p>
<p><a href="https://hacks.mozilla.org/files/2016/06/image02.png" target="_blank"><img class="aligncenter wp-image-30010 size-full" src="https://hacks.mozilla.org/files/2016/06/image02-500x301.png" alt="image02" width="500" height="301" srcset="https://hacks.mozilla.org/files/2016/06/image02-500x301.png 500w, https://hacks.mozilla.org/files/2016/06/image02-250x150.png 250w, https://hacks.mozilla.org/files/2016/06/image02.png 580w" sizes="(max-width: 500px) 100vw, 500px" /></a></p>
<p><b>Accessibility improvements</b></p>
<p>We&#8217;ve made important accessibility improvements throughout this release. Most developer tools UI elements now have a clearly visible focus indicator, the UI is navigable using the keyboard, and accessibility semantics in the Inspector panel were improved. (See bugs <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1242694">1242694</a>, <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1242715">1242715</a>, and <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1242851">1242851</a>.).</p>
<p><b>Other notable changes</b></p>
<p>In addition to the improvements above, we have polished various areas throughout the developer tools, in particular:</p>
<ul>
<li>The <tt>about:debugging</tt> page displays a warning when service workers are disabled, whether by private browsing mode or by a pref. (See bug <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1266415">1266415</a>.)</li>
<li>Step by step, the Storage Inspector is becoming more editable. In this release, we are adding a context menu option to delete an IndexedDB database. (See bug <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1205123">1205123</a>.)</li>
<li>Network Inspector now shows the exact number of bytes if the response size is smaller than 1KB. (See bug <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1263945">1263945</a>.)</li>
<li>Pressing the <em>&#8216;h&#8217;</em> key in the Inspector panel, which is a shortcut to hide the selected element, now also grays out the element markup. (See bug <a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1127572">1127572</a>.)</li>
</ul>
<p>Thanks to everyone who has contributed to this Developer Edition release! Grab a copy of <a href="https://www.mozilla.org/en-US/firefox/developer/all/">the latest Developer Edition</a> now and let us know what you think.</p>
]]></content>
			<link rel="replies" type="text/html" href="https://hacks.mozilla.org/2016/06/developer-edition-49-network-request-stack-traces-and-more/#comments" thr:count="7"/>
		<link rel="replies" type="application/atom+xml" href="https://hacks.mozilla.org/2016/06/developer-edition-49-network-request-stack-traces-and-more/feed/atom/" thr:count="7"/>
		<thr:total>7</thr:total>
		</entry>
	</feed>
